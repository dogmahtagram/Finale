<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SynapseGaming-SunBurn-Indie</name>
    </assembly>
    <members>
        <member name="T:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.#ctor">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.VerifyAuthorizationCode(System.String)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.BeginVerifyAuthorizationCode(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.EndVerifyAuthorizationCode(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.VerifyAuthorizationCodeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.VerifyAuthorizationCodeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.GenerateAuthorizationFile(System.String)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.BeginGenerateAuthorizationFile(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.EndGenerateAuthorizationFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.GenerateAuthorizationFileAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.GenerateAuthorizationFileAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.GetQueueStats">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.BeginGetQueueStats(System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.EndGetQueueStats(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.GetQueueStatsAsync">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Production.ApertureAuthorityService.GetQueueStatsAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Production.VerifyAuthorizationCodeCompletedEventArgs">
            <summary />
        </member>
        <member name="P:SynapseGaming.DRM.ApertureClient.Production.VerifyAuthorizationCodeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Production.VerifyAuthorizationCodeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Production.GenerateAuthorizationFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:SynapseGaming.DRM.ApertureClient.Production.GenerateAuthorizationFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Production.GenerateAuthorizationFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Production.GetQueueStatsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:SynapseGaming.DRM.ApertureClient.Production.GetQueueStatsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Production.GetQueueStatsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.#ctor">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.VerifyAuthorizationCode(System.String)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.BeginVerifyAuthorizationCode(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.EndVerifyAuthorizationCode(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.VerifyAuthorizationCodeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.VerifyAuthorizationCodeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.GenerateAuthorizationFile(System.String)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.BeginGenerateAuthorizationFile(System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.EndGenerateAuthorizationFile(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.GenerateAuthorizationFileAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:SynapseGaming.DRM.ApertureClient.Test.ApertureAuthorityService.GenerateAuthorizationFileAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Test.VerifyAuthorizationCodeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:SynapseGaming.DRM.ApertureClient.Test.VerifyAuthorizationCodeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Test.VerifyAuthorizationCodeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Test.GenerateAuthorizationFileCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:SynapseGaming.DRM.ApertureClient.Test.GenerateAuthorizationFileCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.DRM.ApertureClient.Test.GenerateAuthorizationFileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Audio.IAudioManager">
            <summary>
            Interface that provides access to the scene's audio manager. The audio manager
            provides methods for storing and querying audio emitters.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IRenderableManager">
            <summary>
            Interface used by objects that manage rendering and scene resources.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IManager">
            <summary>
            Base interface for objects managing scene resources.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IUnloadable">
            <summary>
            Interface used by objects that support Unloading. Unlike disposed objects, unloaded objects
            can continue to be used and any required internal resources are recreated as needed.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IUnloadable.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IManager.Clear">
            <summary>
            Removes resources managed by this object. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IRenderableManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IRenderableManager.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IRenderableManager.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IUpdatableManager">
            <summary>
            Interface used by objects managing resources that are updated based on real or game time.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IUpdatableManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the object and its contained resources.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IManagerService">
            <summary>
            Interface used by manager objects that provide services to other managers and
            game code via IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IManagerService.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IManagerService.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IQuery`1">
            <summary>
            Generic interface used by container objects that implement querying
            for contained objects by various object attributes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IQuery`1.Find``1(System.String,``0@)">
            <summary>
            Retrieves a dynamic object of a specific type by name.
            </summary>
            <typeparam name="TCastType">Type of object to find.</typeparam>
            <param name="name">Name of the object to find.</param>
            <param name="obj">Returned object.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IQuery`1.Find(System.Collections.Generic.List{`0},Microsoft.Xna.Framework.BoundingFrustum,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IQuery`1.Find(System.Collections.Generic.List{`0},Microsoft.Xna.Framework.BoundingBox,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IQuery`1.Find(System.Collections.Generic.List{`0},SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IQuery`1.FindFast(System.Collections.Generic.List{`0},Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Quickly finds all objects near a bounding area without the overhead of
            filtering by object type, checking if objects are enabled, or verifying
            containment within the bounds.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IQuery`1.FindFast(System.Collections.Generic.List{`0})">
            <summary>
            Quickly finds all objects without the overhead of filtering by object
            type or checking if objects are enabled.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ISubmit`1">
            <summary>
            Generic interface used by container objects that implement submitting
            and removing other objects.
            </summary>
            <typeparam name="T">Type of objects that will be submitted and removed.</typeparam>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ISubmit`1.Submit(`0)">
            <summary>
            Adds an object to the container. This does not transfer ownership, disposable
            objects should be maintained and disposed separately.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ISubmit`1.Move(`0)">
            <summary>
            Repositions an object within the container. This method is used when the container
            implements a tree or graph, and relocates an object within that structure
            often due to a change in object world position.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ISubmit`1.MoveDynamicObjects">
            <summary>
            Auto-detects moved dynamic objects and repositions them in the storage tree / scenegraph.
            This method is used when the container implements a tree or graph, and relocates all
            dynamic objects within that structure often due to a change in object world position.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ISubmit`1.Remove(`0)">
            <summary>
            Removes an object from the container.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ISubmit`1.Clear">
            <summary>
            Removes all objects from the container. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IWorldRenderableManager">
            <summary>
            Interface used by objects that manage rendering, scene resources, and have a
            containment volume. Commonly used for scenegraphs, oct-trees, and BSP-trees.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IWorldRenderableManager.Resize(Microsoft.Xna.Framework.BoundingBox,System.Int32)">
            <summary>
            Resizes the tree used to store contained objects.
            </summary>
            <param name="worldboundingbox">The smallest bounding area that completely
            contains the scene. Helps the scenegraph build an optimal scene tree.</param>
            <param name="worldtreemaxdepth">Maximum depth for entries in the scene tree. Small
            scenes with few objects see better performance with shallow trees. Large complex
            scenes often need deeper trees.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IWorldRenderableManager.Optimize">
            <summary>
            Optimizes the tree used to store contained objects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IWorldRenderableManager.Optimize(System.Int32)">
            <summary>
            Optimizes the tree used to store contained objects using a fixed tree depth.
            </summary>
            <param name="worldtreemaxdepth">Fixed tree depth used to optimize the tree.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IWorldRenderableManager.WorldBoundingBox">
            <summary>
            The current containment volume for this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IWorldRenderableManager.AutoOptimize">
            <summary>
            Enables automatic optimizations on the tree used to store contained objects. 
            Optimization occurs when a large number of objects fall outside of the tree bounds.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IWorldRenderableManager.RequiresOptimization">
            <summary>
            Determines if the tree used to store contained objects requires optimization.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Audio.AudioManager">
            <summary>
            Manages all scene audio emitters and allows querying the scene with
            a view or bounding box for audio emitters that affect the area
            (acts as an audio emitters scenegraph).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ObjectGraph`1">
            <summary>
            Acts as a storage tree / scenegraph for objects of a particular
            class or interface.  Supports object adding, moving, and removing
            as well as auto-detecting movement of dynamic objects using the
            MoveDynamicObjects method.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.#ctor">
            <summary>
            Creates a new ObjectGraph using the default world size and tree depth.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.#ctor(Microsoft.Xna.Framework.BoundingBox,System.Int32)">
            <summary>
            Creates a new ObjectGraph using the provided world size and tree depth.
            </summary>
            <param name="worldboundingbox">The smallest bounding area that completely
            contains the scene. Helps build an optimal scene tree.</param>
            <param name="worldtreemaxdepth">Maximum depth for entries in the scene tree. Small
            scenes with few objects see better performance with shallow trees. Large complex
            scenes often need deeper trees.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Resize(Microsoft.Xna.Framework.BoundingBox,System.Int32)">
            <summary>
            Resizes the tree used to store contained objects.
            </summary>
            <param name="worldboundingbox">The smallest bounding area that completely
            contains the scene. Helps the ObjectGraph build an optimal scene tree.</param>
            <param name="worldtreemaxdepth">Maximum depth for entries in the scene tree. Small
            scenes with few objects see better performance with shallow trees. Large complex
            scenes often need deeper trees.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Optimize">
            <summary>
            Optimizes the tree used to store contained objects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Optimize(System.Int32)">
            <summary>
            Optimizes the tree used to store contained objects using a fixed tree depth.
            </summary>
            <param name="worldtreemaxdepth">Fixed tree depth used to optimize the tree.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Submit(`0)">
            <summary>
            Adds an object to the container. This does not transfer ownership, disposable
            objects should be maintained and disposed separately.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Move(`0)">
            <summary>
            Repositions an object within the container. This method is used when a static object
            moves to reposition it in the storage tree / scenegraph.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.MoveDynamicObjects">
            <summary>
            Auto-detects moved dynamic objects and repositions them in the storage tree / scenegraph.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the object and its contained resources.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Find``1(System.String,``0@)">
            <summary>
            Retrieves a dynamic object of a specific type by name.
            
            Note: if multiple objects are submitted using the same name the
            method will return the last object submitted using that name.
            </summary>
            <typeparam name="TCastType">Type of object to find.</typeparam>
            <param name="name">Name of the object to find.</param>
            <param name="obj">Returned object.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Find(System.Collections.Generic.List{`0},Microsoft.Xna.Framework.BoundingFrustum,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            
            Note: list will contain null entries when objects returned by the
            scenegraph are removed by the object filter.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Find(System.Collections.Generic.List{`0},Microsoft.Xna.Framework.BoundingBox,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            
            Note: list will contain null entries when objects returned by the
            scenegraph are removed by the object filter.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Find(System.Collections.Generic.List{`0},SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes.
            
            Note: list will contain null entries when objects returned by the
            scenegraph are removed by the object filter.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.FindFast(System.Collections.Generic.List{`0},Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Quickly finds all objects near a bounding area without the overhead of
            filtering by object type, checking if objects are enabled, or verifying
            containment within the bounds.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.FindFast(System.Collections.Generic.List{`0})">
            <summary>
            Quickly finds all objects without the overhead of filtering by object
            type or checking if objects are enabled.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Remove(`0)">
            <summary>
            Removes an object from the container.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ObjectGraph`1.Clear">
            <summary>
            Removes resources managed by this object. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ObjectGraph`1.WorldBoundingBox">
            <summary>
            The current containment volume for this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ObjectGraph`1.AutoOptimize">
            <summary>
            Enables automatic optimizations on the tree used to store contained objects. 
            Optimization occurs when a large number of objects fall outside of the tree bounds.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ObjectGraph`1.RequiresOptimization">
            <summary>
            Determines if the tree used to store contained objects requires optimization.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ObjectGraph`1.DynamicObjects">
            <summary>
            Dictionary of dynamic objects being tracked.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new AudioManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called during Game.Update() to allow processing at regular intervals.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Called when the game code sets the manager or SceneInterface preferences.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Called when the game begins rendering the current frame.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.EndFrameRendering">
            <summary>
            Called when the game finishes rendering the current frame.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.Submit(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Adds an object to the container. This does not transfer ownership, disposable
            objects should be maintained and disposed separately.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.Move(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Moves an object within the container. This method is used when the container
            implements a tree or graph, and relocates an object within that structure
            often due to a change in object world position.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.Remove(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Removes an object from the container.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.Remove(SynapseGaming.LightingSystem.Audio.AudioSource)">
            <summary>
            Removes an object from the container.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.Clear">
            <summary>
            Called when the game clears the engine of objects (generally when
            clearing the current level / scene and before loading the next one).
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioManager.Unload">
            <summary>
            Called when the game's graphics and disposable resources are no longer
            used or are invalid (due to exiting the game or the graphics device
            resetting).  All resources should be disposed before exiting this method.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioManager.ManagerType">
            <summary>
            Determines which type this manager is registered under in the
            SceneInterface that contains it.
            
            Please note: changing the return value to the ManagerType of
            another class will allow this manager to replace it in the
            SceneInterface (and provide replacement features and implementation).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the SceneInterface. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            
            For managers that do not require a specific order a value of 100 is recommended.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioManager.GraphicsDeviceManager">
            <summary>
            The GraphicsDeviceManager used by this manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioManager.MaximumAudioSources">
            <summary>
            Maximum number of audio sources that can be played simultaneously.
            The number is limited on Xbox to 300, and on WP7 to 64.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Audio.AudioState">
            <summary>
            Determines if a sound is currently playing.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Audio.AudioState.Stopped">
            <summary>
            The sound is not playing.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Audio.AudioState.Playing">
            <summary>
            The sound is playing.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Audio.AudioType">
            <summary>
            Determines how the sound changes in relationship to the viewer. Ambient sounds
            are heard equally from everywhere in the scene, whereas 3D sounds are relative
            to the viewer / listener.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Audio.AudioType.Ambient">
            <summary>
            The sound is heard equally from everywhere in the scene.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Audio.AudioType.Point">
            <summary>
            The sound is 3D and relative to the viewer / listener.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Audio.IAudioSource">
            <summary>
            Interface used by audio sources / emitters stored in and handled by the IAudioManager.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.ISceneEntity">
            <summary>
            Interface used for scene entities, basic named and movable objects that exist in the scene.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IMovableObject">
            <summary>
            Interface used by game objects that implement moving while contained
            within a manager / container object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IWorldBoundingBoxObject">
            <summary>
            Interface used by objects that occupy spatial volume.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IWorldBoundingBoxObject.WorldBoundingBox">
            <summary>
            World space bounding area of the object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.INamedObject">
            <summary>
            Interface used by game objects that expose a string name.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.INamedObject.Name">
            <summary>
            The object's current name.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IMovableObject.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the object using the provided game time.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="E:SynapseGaming.LightingSystem.Core.IMovableObject.UpdateEvent">
            <summary>
            Event used to update the object at regular intervals. This and all
            events are only called on dynamic objects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IMovableObject.UniqueId">
            <summary>
            Unique id used to identify the object across multiple scene loads / reloads.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IMovableObject.InfiniteBounds">
            <summary>
            Indicates the object bounding area spans the entire world and
            the object is always visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IMovableObject.MoveId">
            <summary>
            Indicates the current move. This value increments each time the object
            is moved (when the World transform changes).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IMovableObject.UpdateType">
            <summary>
            Determines if objects receive update events from the engine and are tracked
            by the scenegraph.
            
            Automatic update events are necessary to be affected by gravity, for
            components, and for the scenegraph to track moving objects.  Objects without
            Automatic update events can still move, however the containing scenegraph
            (ObjectManager or LightManager) must be notified using Manager.Move(object).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IMovableObject.World">
            <summary>
            World space transform of the object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IComponentObject`1">
            <summary>
            Interface used by objects that contain components.
            </summary>
            <typeparam name="T">Type of the parent class or interface
            that contains the components. This strongly types the
            components ensuring only components of the correct
            type can be assigned.
            
            For instance all classes and objects that derive from SceneEntity
            use the ISceneEntity type allowing them to share components.
            
            However lights use the ILight type to ensure entity components
            cannot accidently be assigned to them, and vice versa.</typeparam>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IComponentObject`1.Components">
            <summary>
            Container that stores, manages, and updates the object's components.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IEditorCreatedObject`1">
            <summary>
            Interface used by classes listed in the SunBurn editor's list of creatable object types.
            </summary>
            <typeparam name="T">The base interface type used by the editor tab in which the class
            should appear. For the "Scene Objects" tab use the ISceneEntity interface. No other
            tabs are supported at this time.</typeparam>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IEditorObject">
            <summary>
            Interface used by game objects available through the editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.IEditorObject.AffectedInCode">
            <summary>
            Notifies the editor that the object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.IEditorCreatedObject`1.Clone">
            <summary>
            Deep clones the object including any contained sub-objects and components.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IEditorRenderableObject">
            <summary>
            Interface that provides scene entities and objects with rendering of in-editor icons and helpers.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.IEditorRenderableObject.RenderEditorIcon(SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Core.BoundingBoxRenderHelper,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Implements rendering of in-editor icons and helpers.
            
            This method is called twice per-frame: once with scene depth clipping enable, and once with it disabled.
            </summary>
            <param name="scenestate">Current state used to render the scene.</param>
            <param name="renderhelper">Helper used to draw lines associated with the object. Only calling Submit() is
            supported in this method, using other methods may affect rendering of lines drawn by other objects.</param>
            <param name="highlighted">Indicates if the object is currently highlighted by the editor.</param>
            <param name="selected">Indicates if the object is currently selected by the editor.</param>
            <param name="sceneoccludedpass">Indicates if the current rendering pass depth clips with the scene.
            If so rendered icons and helpers are occluded by scene objects.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ISceneEntity.SetWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets both the world and inverse world matrices.  Used to improve
            performance when the world matrix is set, by providing a cached
            or precalculated inverse matrix with the world matrix.
            </summary>
            <param name="world">World space transform of the object.</param>
            <param name="worldtoobj">Inverse world space transform of the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ISceneEntity.RenderCustomPass(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Implements a custom rendering pass. The pass occurs after scene rendering completes, but before post processing.
            </summary>
            <param name="scenestate">Current state used to render the scene.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneEntity.HullType">
            <summary>
            Determines the bounds used in object culling and collision.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneEntity.ObjectBoundingSphere">
            <summary>
            Object space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneEntity.ObjectBoundingBox">
            <summary>
            Object space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneEntity.WorldBoundingSphere">
            <summary>
            World space bounding area of the object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.IAudioSource.Play">
            <summary>
            Starts playing the contained sound from the beginning.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.IAudioSource.Stop">
            <summary>
            Stops playing the contained sound.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.IAudioSource.Loop">
            <summary>
            Determines if the sound will repeat after completing.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.IAudioSource.Volume">
            <summary>
            Determines how loud the sound is.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.IAudioSource.Radius">
            <summary>
            Maximum distance in world space of the source's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.IAudioSource.AudioType">
            <summary>
            Determines how the sound changes in relationship to the viewer. Ambient sounds
            are heard equally from everywhere in the scene, whereas 3D sounds are relative
            to the viewer / listener.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.IAudioSource.AudioState">
            <summary>
            Determines if the sound is currently playing.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.IAudioSource.SoundEffect">
            <summary>
            The SoundEffect used by the emitter to play sounds. This is either
            the sound loaded by the SoundEffectAsset or the sound passed into the constructor
            depending on how the object was initialized.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.IAudioSource.SoundEffectAsset">
            <summary>
            Provides direct access to the repository name, file name, and sound
            the object was created from. Only valid for serialized objects
            created via the SunBurn editor.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Audio.SoundEffectAsset">
            <summary>
            Provides an asset wrapper for XNA SoundEffects containing the source repository name, file name, and direct access
            to the loaded asset. When visible in the SunBurn editor properties of this type automatically support drag
            and drop of repository sounds into the property.
            
            The content repository provided must be loaded before creating an instance of
            this class otherwise the asset will fail to load.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ContentRepositoryAsset`1">
            <summary>
            Provides a generic asset wrapper containing the source repository name, file name, and direct access
            to the loaded asset. The content repository provided must be loaded before creating an instance of
            this class otherwise the asset will fail to load.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IContentRepositoryAsset">
            <summary>
            Interface that provides access to an asset's source repository name and file name.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IContentRepositoryAsset.ContentRepositoryName">
            <summary>
            Name of the content repository, which contains the asset.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IContentRepositoryAsset.SourceAssetFilePath">
            <summary>
            Relative path to the file the asset was loaded from.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepositoryAsset`1.#ctor">
            <summary>
            Creates a new empty ContentRepositoryAsset instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepositoryAsset`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new ContentRepositoryAsset instance and loads the provided asset.
            </summary>
            <param name="repositoryname">Name of the content repository, which contains the asset.</param>
            <param name="sourceassetfilepath">Relative path to the file the asset is loaded from.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ContentRepositoryAsset`1.Asset">
            <summary>
            The loaded asset.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ContentRepositoryAsset`1.ContentRepositoryName">
            <summary>
            Name of the content repository, which contains the asset.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ContentRepositoryAsset`1.SourceAssetFilePath">
            <summary>
            Relative path to the file the asset was loaded from.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Audio.SoundEffectAsset.Empty">
            <summary>
            Provides an empty SoundEffectAsset which can be used to initialize properties of this type.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.SoundEffectAsset.#ctor(System.String,System.String)">
            <summary>
            Creates a new SoundEffectAsset instance and loads the provided sound.
            </summary>
            <param name="repositoryname">Name of the content repository, which contains the asset.</param>
            <param name="sourceassetfilepath">Relative path to the file the asset is loaded from.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Audio.AudioSource">
            <summary>
            Provides an audio emitter which is capable of emitting 3D sound from a specific
            location, or ambient sound heard equally from everywhere in the scene.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.IPointSource">
            <summary>
            Interface that provides point light information.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.IPointSource.Position">
            <summary>
            Position in world space of the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.IPointSource.Radius">
            <summary>
            Maximum distance in world space of the light's influence.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Serialization.IFullSerializable">
            <summary>
            Interface that provides objects with serialization support
            compatible with SunBurn's built-in xml format.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.IFullSerializable.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates an object with data from the System.Runtime.Serialization.SerializationInfo.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to retrieve data from.</param>
            <param name="context">The source (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.#ctor">
            <summary>
            Creates a new AudioSource instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.#ctor(Microsoft.Xna.Framework.Audio.SoundEffect)">
            <summary>
            Creates a new AudioSource instance.
            </summary>
            <param name="sound">The SoundEffect used by the emitter to play sounds.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the object using the provided game time.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.SetWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets both the world and inverse world matrices.  Used to improve
            performance when the world matrix is set, by providing a cached
            or precalculated inverse matrix with the world matrix.
            </summary>
            <param name="world">World space transform of the object.</param>
            <param name="worldtoobj">Inverse world space transform of the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.UpdateBounds">
            <summary>
            Recalculates the emitter bounds based on the audio type, position, and radius.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.Play">
            <summary>
            Starts playing the contained sound from the beginning.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.Stop">
            <summary>
            Stops playing the contained sound.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.Clone">
            <summary>
            Deep clones the object including any contained sub-objects and components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.Create">
            <summary>
            Creates a new instance of the object type. This method assumes the type has a
            default constructor. If the type does not have a default constructor this method
            can be overridden to manually create the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.RenderCustomPass(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Implements a custom rendering pass. The pass occurs after scene rendering completes, but before post processing.
            </summary>
            <param name="scenestate">Current state used to render the scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.RenderEditorIcon(SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Core.BoundingBoxRenderHelper,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Implements rendering of in-editor icons and helpers.
            
            This method is called twice per-frame: once with scene depth clipping enable, and once with it disabled.
            </summary>
            <param name="scenestate">Current state used to render the scene.</param>
            <param name="renderhelper">Helper used to draw lines associated with the object. Only calling Submit() is
            supported in this method, using other methods may affect rendering of lines drawn by other objects.</param>
            <param name="highlighted">Indicates if the object is currently highlighted by the editor.</param>
            <param name="selected">Indicates if the object is currently selected by the editor.</param>
            <param name="sceneoccludedpass">Indicates if the current rendering pass depth clips with the scene.
            If so rendered icons and helpers are occluded by scene objects.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Audio.AudioSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="E:SynapseGaming.LightingSystem.Audio.AudioSource.UpdateEvent">
            <summary>
            Event used to update the source at regular intervals. This and all
            events are only called on automatic source.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.Loop">
            <summary>
            Determines if the sound will repeat after completing.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.Volume">
            <summary>
            Determines how loud the sound is.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.AudioType">
            <summary>
            Determines how the sound changes in relationship to the viewer. Ambient sounds
            are heard equally from everywhere in the scene, whereas 3D sounds are relative
            to the viewer / listener.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.PlayWhenLoaded">
            <summary>
            Determines if the sound automatically begins playing when the emitter is loaded
            as part of a scene. If the sound is not automatically played it will need to be triggered
            using the Play() method.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.AudioState">
            <summary>
            Determines if the sound is currently playing.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.SoundEffect">
            <summary>
            The SoundEffect used by the emitter to play sounds. This is either
            the sound loaded by the SoundEffectAsset or the sound passed into the constructor
            depending on how the object was initialized.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.SoundEffectAsset">
            <summary>
            Provides direct access to the repository name, file name, and sound
            the object was created from. Only valid for serialized objects
            created via the SunBurn editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.Position">
            <summary>
            Position in world space of the source.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.Radius">
            <summary>
            Maximum distance in world space of the source's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.ObjectBoundingBox">
            <summary>
            Object bounding area of the source's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.ObjectBoundingSphere">
            <summary>
            Object bounding area of the source's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.WorldBoundingBox">
            <summary>
            World bounding area of the source's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.WorldBoundingSphere">
            <summary>
            World bounding area of the source's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.World">
            <summary>
            World space transform of the source.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.InfiniteBounds">
            <summary>
            Indicates the object bounding area spans the entire world and
            the object is always visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.MoveId">
            <summary>
            Indicates the current move. This value increments each time the object
            is moved (when the World transform changes).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.UniqueId">
            <summary>
            Unique id used to identify the object across multiple scene loads / reloads.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.HullType">
            <summary>
            Determines the bounds used for emitter culling (always returns HullType.Box).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.UpdateType">
            <summary>
            Determines if objects receive update events from the engine and are tracked
            by the scenegraph.
            
            Automatic update events are necessary to be affected by gravity, for
            components, and for the scenegraph to track moving objects.  Objects without
            Automatic update events can still move, however the containing scenegraph
            (ObjectManager or LightManager) must be notified using Manager.Move(object).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.Name">
            <summary>
            The object's current name.
            
            Important note: Name can be changed at any time, HOWEVER managers
            will only see the change after removing and resubmitting the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Audio.AudioSource.Components">
            <summary>
            Container that stores, manages, and updates the object's components.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.ICollisionManager">
            <summary>
            Interface that provides access to the scene's collision manager. The collision manager
            provides automatic collision and physics for scene objects.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionManager">
            <summary>
            Provides a built-in collision and lightweight physics implementation.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a new CollisionManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates all object movement, applies forces, and calculates collisions.
            
            For any calculations to apply BeginFrameRendering() must be called. This prevents
            games from slowing down due to receiving several Update() calls per rendered frame.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionManager.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionManager.MoveObject(SynapseGaming.LightingSystem.Collision.ICollisionObject,SynapseGaming.LightingSystem.Rendering.IObjectManager,SynapseGaming.LightingSystem.Collision.CollisionPoint)">
            <summary>
            Simulates the object move, checking for collisions along the way.
            </summary>
            <param name="movingobj">Object to move (collider).</param>
            <param name="objectmanager"></param>
            <param name="worldcollisionpoint">Filled with collidee information during the call.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionManager.Collide(SynapseGaming.LightingSystem.Collision.ICollisionObject,SynapseGaming.LightingSystem.Collision.ICollisionObject,SynapseGaming.LightingSystem.Collision.CollisionPoint)">
            <summary>
            Tests for collision between two objects.  Assumes CollisionMove.Begin()
            is already called on the moving object.
            </summary>
            <param name="movingobj">Moving / collider object.</param>
            <param name="staticobj">Potential collidee.</param>
            <param name="worldcollisionpoint">Filled with collidee information during the call.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionManager.Clear">
            <summary>
            Removes resources managed by this object. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionManager.MeshBuilder">
            <summary>
            Helper used to construct and cache collision meshes.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionManager.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionMeshData">
            <summary>
            Provides access to raw geometry data used for collision.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMeshData.Vertices">
            <summary>
            List of the geometry's vertices.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMeshData.Indices">
            <summary>
            List of the geometry's indices.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionMeshBuilder">
            <summary>
            Provides methods for generating collision meshes and mesh
            data from renderable meshes. Also caches the generated
            data for later requests.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMeshBuilder.Unload">
            <summary>
            Clears all cached mesh data.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMeshBuilder.BuildWorldMesh(SynapseGaming.LightingSystem.Rendering.RenderableMeshCollection,SynapseGaming.LightingSystem.Collision.CollisionMesh)">
            <summary>
            Calculates world-space collision mesh geometry from the
            mesh-space collision data in the provided renderable meshes.
            </summary>
            <param name="meshes">Renderable meshes to generate the collision mesh geometry from.</param>
            <param name="worldmesh">Collision mesh to fill with world-space geometry.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMeshBuilder.GetCollisionMeshData(SynapseGaming.LightingSystem.Rendering.RenderableMesh)">
            <summary>
            Builds the collision mesh data for the provided renderable
            mesh. If the data already exists the cached version is returned.
            </summary>
            <param name="mesh">Renderable mesh to generated the collision mesh data from.</param>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionMesh">
            <summary>
            Contains the complete collision mesh for an object.
            Generally the mesh is in world-space.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMesh.SurfaceTree">
            <summary>
            Scenegraph of the geometry's surfaces.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMesh.Indices">
            <summary>
            List of the geometry's indices.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMesh.Vertices">
            <summary>
            List of the geometry's vertices.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMesh.Surfaces">
            <summary>
            List of the geometry's surfaces.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface">
            <summary>
            Creates a new CollisionSurface instance.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface.Surface">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface.Edge0">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface.Edge1">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface.Edge2">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface.VertexIndex0">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface.VertexIndex1">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface.VertexIndex2">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface.Material">
            <summary/>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMesh.CollisionSurface.WorldBoundingBox">
            <summary/>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.ICollisionMove">
            <summary>
            Interface used by classes that implement collision movement
            and applying force to a collision object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.ICollisionMove.ApplyObjectForce(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Applies force to the object. The total force is used to move the
            object during the next call to Begin().
            </summary>
            <param name="objectforce">Amount of object-space force to apply to the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.ICollisionMove.ApplyWorldForce(Microsoft.Xna.Framework.Vector3,System.Boolean)">
            <summary>
            Applies force to the object. The total force is used to move the
            object during the next call to Begin().
            </summary>
            <param name="worldforce">Amount of world-space force to apply to the object.</param>
            <param name="constantforce">Determines if the force is from a constant
            source such as gravity, wind, or similar (eg: applied by the caller
            every frame instead of a single time).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.ICollisionMove.RemoveForces">
            <summary>
            Removes all accumulated forces acting on the object. This will halt the object
            movement, however future forces (such as gravity) can immediately begin acting
            on the object again.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.ICollisionMove.React(SynapseGaming.LightingSystem.Collision.CollisionPoint)">
            <summary>
            Calculates and applies the reaction force between the
            object and the collision surface contained in the CollisionPoint.
            </summary>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionMove.Distance">
            <summary>
            Distance the object will move this frame. Valid after calling Begin().
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionMove.Normal">
            <summary>
            Direction the object will move this frame. Valid after calling Begin().
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionMove.WorldBoundingSphere">
            <summary>
            World bounding area the object will move to this frame.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionMove.WorldBoundingBox">
            <summary>
            World bounding area the object will move to this frame.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionMove">
            <summary>
            Provides the built-in implement of object collision movement
            and applying force.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMove.#ctor(SynapseGaming.LightingSystem.Collision.ICollisionObject)">
            <summary>
            Creates a new CollisionMove instance.
            </summary>
            <param name="parent">Collision object to move.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMove.ApplyObjectForce(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Applies force to the object. The total force is used to move the
            object during the next call to Begin().
            </summary>
            <param name="objectforce">Amount of object-space force to apply to the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMove.ApplyWorldForce(Microsoft.Xna.Framework.Vector3,System.Boolean)">
            <summary>
            Applies force to the object. The total force is used to move the
            object during the next call to Begin().
            </summary>
            <param name="worldforce">Amount of world-space force to apply to the object.</param>
            <param name="constantforce">Determines if the force is from a constant
            source such as gravity, wind, or similar (eg: applied by the caller
            every frame instead of a single time).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMove.RemoveForces">
            <summary>
            Removes all accumulated forces acting on the object. This will halt the object
            movement, however future forces (such as gravity) can immediately begin acting
            on the object again.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMove.GetForce(System.Single)">
            <summary>
            Gets the cumulative amount of force affecting the object for the time period.
            </summary>
            <param name="timeperiod">Normalized time period from 0.0 (start of the
            movement this frame) to 1.0 (end of the movement this frame).</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMove.Begin(System.Single)">
            <summary>
            Prepares the object for movement this frame. Also calculates related
            volumes for collision detection.
            </summary>
            <param name="numberofvirtualupdates">Number of virtual frames that elapsed
            since the last call to Begin(). Allows collisions to be calculated without
            using a fixed time step.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMove.End(SynapseGaming.LightingSystem.Collision.CollisionPoint)">
            <summary>
            Finishes the object move and changes the object position to the specified
            world collision point.
            </summary>
            <param name="worldcollisionpoint">Contains information about the closest
            collision point to the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionMove.React(SynapseGaming.LightingSystem.Collision.CollisionPoint)">
            <summary>
            Calculates and applies the reaction force between the
            object and the collision surface contained in the CollisionPoint.
            </summary>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.OnSurface">
            <summary>
            Determines if the object is currently contacting another object or surface.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.Distance">
            <summary>
            Distance the object will move this frame. Valid after calling Begin().
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.Normal">
            <summary>
            Direction the object will move this frame. Valid after calling Begin().
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.ForceConstant">
            <summary>
            Amount of force applied to the object this frame from constant
            sources such as gravity, wind, or similar.
            
            The amount of force applied to the object is affected by the
            collision time period (see GetForce() for details).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.ForceImpulse">
            <summary>
            Amount of force applied to the object this frame from impulse
            sources such as impacts, exlposions, and similar.
            
            The amount of force applied to the object is NOT affected by the
            collision time period (see GetForce() for details).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.CarryOver">
            <summary>
            Amount of force carried over into the next frame due to collisions.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.WorldBoundingSphere">
            <summary>
            World bounding area the object will move to this frame.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.WorldBoundingBox">
            <summary>
            World bounding area the object will move to this frame.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.WorldSweepBoundingBox">
            <summary>
            Total world bounding area of the object movement. This includes
            both the current and next world bounding areas.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.CollisionMove.WorldCollisionMesh">
            <summary>
            Access to the world space geometry used for collision.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionReactDelegate">
            <summary>
            Delegate used when two object collide.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="collidee">The object hit by the moving object.</param>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
            <param name="collisionhandled">Determines if the collision was handled by a prior event hander.
            If this value is true do NOT process any collision reaction code. If the event handler processes
            collision reaction code set this value to true to avoid another handler or SunBurn's built-in
            reaction code from processing.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionTriggerDelegate">
            <summary>
            Delegate used when an object passes through or overlaps a trigger.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="trigger">The trigger hit by the moving object.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionType">
            <summary>
            Determines how an object interacts with the scene.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionType.None">
            <summary>
            Object does not collide with the scene.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionType.Collide">
            <summary>
            Object does collide with the scene.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionType.Trigger">
            <summary>
            Object does not collide with the scene, but will trigger events as other objects pass through it.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.CollisionPoint">
            <summary>
            Tracks the state and information for the closest collision to the collider.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionPoint.ContactTime">
            <summary>
            Normalized time (from 0.0f to 1.0f) to the closest collision.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionPoint.ContactPoint">
            <summary>
            Contact point of the closest collision.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionPoint.SurfaceNormal">
            <summary>
            Surface normal of the closest collision.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionPoint.ContactObject">
            <summary>
            Collidee object of the closest collision.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionPoint.Material">
            <summary>
            Collision material of the closest collision.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Collision.CollisionPoint.Triggers">
            <summary>
            List of trigger objects the collider interacted with during the move time period.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.CollisionPoint.Clear">
            <summary>
            Resets the contact information.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.ICollisionObject">
            <summary>
            Interface used by objects that support collision.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.ICollisionObject.React(SynapseGaming.LightingSystem.Collision.CollisionPoint)">
            <summary>
            Calculates and applies the reaction force between the
            object and the collision surface contained in the CollisionPoint.
            </summary>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.ICollisionObject.OnCollisionReact(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Collision.CollisionPoint,System.Boolean@)">
            <summary>
            Used to trigger the CollisionReactEvent event when two object collide.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="collidee">The object hit by the moving object.</param>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
            <param name="collisionhandled">Determines if the collision was handled by a prior event hander.
            If this value is true do NOT process any collision reaction code. If the event handler processes
            collision reaction code set this value to true to avoid another handler or SunBurn's built-in
            reaction code from processing.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Collision.ICollisionObject.OnCollisionTrigger(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject)">
            <summary>
            Used to trigger the CollisionTriggerEvent event when an object passes through or overlaps a trigger.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="trigger">The trigger hit by the moving object.</param>
        </member>
        <member name="E:SynapseGaming.LightingSystem.Collision.ICollisionObject.CollisionReactEvent">
            <summary>
            Event used to detect when the object collides with another object, or to
            override the default reaction behavior between objects.
            </summary>
        </member>
        <member name="E:SynapseGaming.LightingSystem.Collision.ICollisionObject.CollisionTriggerEvent">
            <summary>
            Event used to detect when another object collides with this object, but only
            when this object's CollisionType is set to Trigger.
            
            The event handler can then apply custom trigger code like damage, apply force, and more.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionObject.AffectedByGravity">
            <summary>
            Determines if gravity will cause the object to fall. For an object to be affected
            by gravity its UpdateType must be Automatic and CollisionType must be Collide.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionObject.CollisionType">
            <summary>
            Determines how an object interacts with the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionObject.CollisionMove">
            <summary>
            Move helper used by this object to determine its momentum, next location, and sweep volume.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionObject.DefaultCollisionMaterial">
            <summary>
            Default material used when collision surface does not implement material info.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionObject.Mass">
            <summary>
            Mass of the object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Collision.ICollisionMaterial">
            <summary>
            Interface that provides materials with physics properties.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionMaterial.Elasticity">
            <summary>
            Amount material absorbs impact force.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Collision.ICollisionMaterial.Friction">
            <summary>
            Amount material resists objects moving across its surface.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IBoundingVolume">
            <summary>
            Interface used to provide a bounding box
            and sphere for an object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IBoundingVolume.BoundingBox">
            <summary>
            Bounding area that completely contains the associated object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IBoundingVolume.BoundingSphere">
            <summary>
            Bounding area that completely contains the associated object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.BoundingVolume">
            <summary>
            Class used to provide a bounding box
            and sphere for an object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.BoundingVolume.BoundingBox">
            <summary>
            Bounding area that completely contains the associated object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.BoundingVolume.BoundingSphere">
            <summary>
            Bounding area that completely contains the associated object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IComponent`1">
            <summary>
            Interface used by components that plug into other objects (also called object-level components).
            </summary>
            <typeparam name="T">Type of the parent class or interface
            that contains the components. This strongly types the
            components ensuring only components of the correct
            type can be assigned.
            
            For instance all classes and objects that derive from SceneEntity
            use the ISceneEntity type allowing them to share components.
            
            However lights use the ILight type to ensure entity components
            cannot accidently be assigned to them, and vice versa.</typeparam>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IComponent`1.OnInitialize">
            <summary>
            Event called when the component's parent object is assigned or reassigned.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IComponent`1.OnComponentsListChanged">
            <summary>
            Event called when components are added or removed from the parent object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IComponent`1.OnMessage(SynapseGaming.LightingSystem.Core.IComponent{`0},SynapseGaming.LightingSystem.Core.IComponentMessage)">
            <summary>
            Event called when another component issues a message to the parent object's components.
            </summary>
            <param name="sender">Sending component.</param>
            <param name="message">Message object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IComponent`1.OnUpdate(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Event called when the parent object is updated during the game update loop.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IComponent`1.OnCollisionReact(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Collision.CollisionPoint,System.Boolean@)">
            <summary>
            Event called when the parent object collides with another object.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="collidee">The object hit by the moving object.</param>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
            <param name="collisionhandled">Determines if the collision was handled by a prior component.
            If this value is true do NOT process any collision reaction code. If the component processes
            collision reaction code set this value to true to avoid another component or SunBurn's built-in
            reaction code from processing.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IComponent`1.OnCollisionTrigger(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject)">
            <summary>
            Event called when the parent object collides with another object, but only
            when the parent's CollisionType is set to Trigger.
            
            The component can then apply custom trigger code like damage, apply force, and more.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="trigger">The trigger hit by the moving object.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IComponent`1.ComponentType">
            <summary>
            Type used to retrieve the component from the parent object. The component
            class must derive from or implement this type. This is generally the
            class type (eg: "this.GetType();");
            
            Only one component of a specific type can be used by the parent object
            at a time. This allows components to replace one another and be used
            interchangeably by using the same type.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.IComponent`1.ParentObject">
            <summary>
            Parent object which the component controls or interacts with.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IComponentMessage">
            <summary>
            Interface used by objects that transmit inter-component messages.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ComponentDependencyAttribute">
            <summary>
            Attribute used to define a component's dependency on another component. This allows components
            to automatically add their dependencies to an object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentDependencyAttribute.#ctor(System.Type)">
            <summary>
            Creates a new ComponentDependencyAttribute instance.
            </summary>
            <param name="dependency">Component type the class is dependent on.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ComponentDependencyAttribute.Dependency">
            <summary>
            Defines the component type the class is dependent on.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ComponentDependencyCache">
            <summary>
            Used to find and cache a component's dependencies.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentDependencyCache.GetDependencies(System.Type)">
            <summary>
            Find and cache the component's dependencies.
            </summary>
            <param name="componenttype"></param>
            <returns>List of types the component is dependent on.
            
            WARNING: the list is a shared reference. Do not alter the list or it will
            affect internal component dependencies.</returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.BaseComponent`1">
            <summary>
            Base class used by all components.  Warning: this class does not support
            serialization and should not be used to create custom components,
            instead derive from either the BaseComponentAutoSerialization or
            BaseComponentManualSerialization classes.
            
            Provides built-in support for sending inter-component messages, calling
            OnInitialize() when the parent object changes, and automatic ComponentType
            using the derived class type.
            </summary>
            <typeparam name="T">Type of the parent class or interface
            that contains the components. This strongly types the
            components ensuring only components of the correct
            type can be assigned.
            
            For instance all classes and objects that derive from SceneEntity
            use the ISceneEntity type allowing them to share components.
            
            However lights use the ILight type to ensure entity components
            cannot accidently be assigned to them, and vice versa.</typeparam>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.Clone">
            <summary>
            Deep clones the object including any contained sub-objects and components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.Create">
            <summary>
            Creates a new instance of the object type. This method assumes the type has a
            default constructor. If the type does not have a default constructor this method
            can be overridden to manually create the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.SendMessage">
            <summary>
            Sends an inter-component message to the parent object's components.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.SendMessage(SynapseGaming.LightingSystem.Core.IComponentMessage)">
            <summary>
            Sends an inter-component message to the parent object's components.
            </summary>
            <param name="message">Message data.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.OnInitialize">
            <summary>
            Event called when the component's parent object is assigned or reassigned.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.OnComponentsListChanged">
            <summary>
            Event called when components are added or removed from the parent object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.OnMessage(SynapseGaming.LightingSystem.Core.IComponent{`0},SynapseGaming.LightingSystem.Core.IComponentMessage)">
            <summary>
            Event called when another component issues a message to the parent object's components.
            </summary>
            <param name="sender">Sending component.</param>
            <param name="message">Message object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.OnUpdate(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Event called when the parent object is updated during the game update loop.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.OnCollisionReact(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Collision.CollisionPoint,System.Boolean@)">
            <summary>
            Event called when the parent object collides with another object.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="collidee">The object hit by the moving object.</param>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
            <param name="collisionhandled">Determines if the collision was handled by a prior component.
            If this value is true do NOT process any collision reaction code. If the component processes
            collision reaction code set this value to true to avoid another component or SunBurn's built-in
            reaction code from processing.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponent`1.OnCollisionTrigger(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject)">
            <summary>
            Event called when the parent object collides with another object, but only
            when the parent's CollisionType is set to Trigger.
            
            The component can then apply custom trigger code like damage, apply force, and more.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="trigger">The trigger hit by the moving object.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.BaseComponent`1.ComponentType">
            <summary>
            Type used to retrieve the component from the parent object. The component
            class must derive from or implement this type. This is generally the
            class type (eg: "this.GetType();");
            
            Only one component of a specific type can be used by the parent object
            at a time. This allows components to replace one another and be used
            interchangeably by using the same type.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.BaseComponent`1.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.BaseComponent`1.Name">
            <summary>
            The object's current name.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.BaseComponent`1.ParentObject">
            <summary>
            Parent object which the component controls or interacts with.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.BaseComponentAutoSerialization`1">
            <summary>
            Base class used to create components with auto serialization support.
            
            To serialize a field add the [SerializeMember] attribute to it. Please note:
            for the data to be visible in-editor it must be provided via a property.
            This requires all serialized editor visible members to implement a
            property with a backing field where the property is editor visible and
            the backing field serialized by adding the [SerializeMember] attribute.
            
            Provides built-in support for sending inter-component messages, calling
            OnInitialize() when the parent object changes, and automatic ComponentType
            using the derived class type.
            </summary>
            <typeparam name="T">Type of the parent class or interface
            that contains the components. This strongly types the
            components ensuring only components of the correct
            type can be assigned.
            
            For instance all classes and objects that derive from SceneEntity
            use the ISceneEntity type allowing them to share components.
            
            However lights use the ILight type to ensure entity components
            cannot accidently be assigned to them, and vice versa.</typeparam>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.BaseComponentManualSerialization`1">
            <summary>
            Base class used to create components with manual serialization support.
            
            To serialize a member override the GetObjectData() and SetObjectData() methods
            and use the SerializationHelper class to read / write the member to the
            provided SerializationInfo object.
            
            Provides built-in support for sending inter-component messages, calling
            OnInitialize() when the parent object changes, and automatic ComponentType
            using the derived class type.
            </summary>
            <typeparam name="T">Type of the parent class or interface
            that contains the components. This strongly types the
            components ensuring only components of the correct
            type can be assigned.
            
            For instance all classes and objects that derive from SceneEntity
            use the ISceneEntity type allowing them to share components.
            
            However lights use the ILight type to ensure entity components
            cannot accidently be assigned to them, and vice versa.</typeparam>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponentManualSerialization`1.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BaseComponentManualSerialization`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ComponentCollection`1">
            <summary>
            Container that stores, manages, and updates object components.
            </summary>
            <typeparam name="T">Type of the parent class or interface
            that contains the components. This strongly types the
            components ensuring only components of the correct
            type can be assigned.
            
            For instance all classes and objects that derive from SceneEntity
            use the ISceneEntity type allowing them to share components.
            
            However lights use the ILight type to ensure entity components
            cannot accidently be assigned to them, and vice versa.</typeparam>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IGroup`1">
            <summary>
            Interface used by groups that contain other objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IGroup`1.Add(`0)">
            <summary>
            Adds an object to the group.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IGroup`1.Remove(`0)">
            <summary>
            Removes an object to the group.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IGroup`1.RemoveAt(System.Int32)">
            <summary>
            Removes the object at a specific index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IGroup`1.Clear">
            <summary>
            Removes all objects from the group.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.#ctor">
            <summary>
            Creates a new ComponentCollection instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.#ctor(`0)">
            <summary>
            Creates a new ComponentCollection instance.
            </summary>
            <param name="parentobject">Parent object which the components
            control and interact with.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.AddWithDependencies(SynapseGaming.LightingSystem.Core.IComponent{`0})">
            <summary>
            Adds a component that will control or interact with the parent
            object. Also adds any dependent components not in the container.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.Add(SynapseGaming.LightingSystem.Core.IComponent{`0})">
            <summary>
            Adds a component that will control or interact with the parent object.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.Insert(System.Int32,SynapseGaming.LightingSystem.Core.IComponent{`0})">
            <summary>
            Inserts a component at the specified index that will control or interact with the parent object.
            </summary>
            <param name="index"></param>
            <param name="component"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.InsertAfter(SynapseGaming.LightingSystem.Core.IComponent{`0},System.Type)">
            <summary>
            Inserts a component after a component of the specified type,
            that will control or interact with the parent object.
            
            Used to ensure a component of the specified type will be processed
            before the inserted component.
            </summary>
            <param name="component"></param>
            <param name="othercomponenttype">Component type to insert the component after.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.Clear">
            <summary>
            Clears all components from the container.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the component at the specified index from the container.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.Remove``1">
            <summary>
            Removes a component of the specified type from the container.
            
            Must be the same type provided in IComponent.ComponentType.
            </summary>
            <typeparam name="TComponentType"></typeparam>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.Remove(SynapseGaming.LightingSystem.Core.IComponent{`0})">
            <summary>
            Removes a specific component from the container.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.Remove(System.Type)">
            <summary>
            Removes a component of the specified type from the container.
            
            Must be the same type provided in IComponent.ComponentType.
            </summary>
            <param name="componenttype"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.GetComponent``1(System.Boolean)">
            <summary>
            Gets a component of the specified type from the container.
            
            Must be the same type provided in IComponent.ComponentType.
            </summary>
            <typeparam name="TComponentType"></typeparam>
            <param name="required">Determines if the component is required.
            If it is and the component doesn't exist the method will throw an exception.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.GetComponent(System.Type,System.Boolean)">
            <summary>
            Gets a component of the specified type from the container.
            
            Must be the same type provided in IComponent.ComponentType.
            </summary>
            <param name="componenttype"></param>
            <param name="required">Determines if the component is required.
            If it is and the component doesn't exist the method will throw an exception.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.SendMessage(SynapseGaming.LightingSystem.Core.IComponent{`0},SynapseGaming.LightingSystem.Core.IComponentMessage)">
            <summary>
            Sends an inter-component message to the parent object's components.
            </summary>
            <param name="sender">Sender component.</param>
            <param name="message">Message data.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.OnUpdate(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Event called when the parent object is updated during the game update loop.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.OnCollisionReact(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Collision.CollisionPoint,System.Boolean@)">
            <summary>
            Event called when the parent object collides with another object.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="collidee">The object hit by the moving object.</param>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
            <param name="collisionhandled">Determines if the collision was handled by a prior component.
            If this value is true do NOT process any collision reaction code. If the component processes
            collision reaction code set this value to true to avoid another component or SunBurn's built-in
            reaction code from processing.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.OnCollisionTrigger(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject)">
            <summary>
            Event called when the parent object collides with another object, but only
            when the parent's CollisionType is set to Trigger.
            
            The component can then apply custom trigger code like damage, apply force, and more.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="trigger">The trigger hit by the moving object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ComponentCollection`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ComponentCollection`1.Components">
            <summary>
            Read only list of all contained components.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ComponentCollection`1.ParentObject">
            <summary>
            Parent object which the components control and interact with.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ContentRepository">
            <summary>
            Provides storage of automatically loaded game content. This includes
            models, light maps, and light occlusion buffers loaded with scenes
            and during rendering.
            
            Content repositories must be loaded via a content manager before
            scenes and other objects referencing their contents are loaded.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ContentRepository.LightMapCachePath">
            <summary>
            Relative path to the light map cache directory.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.Find(System.String)">
            <summary>
            Finds a content repository by name.
            </summary>
            <param name="contentrepositoryname">Name of the content manager to find.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.#ctor">
            <summary>
            Only for serialization. Using this constructor in game code may cause an exception.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.Dispose">
            <summary>
            Disposes the content repository. This removes it from the list of available repositories.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.Build(System.String@)">
            <summary>
            Rebuilds all contained content.
            </summary>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.BeginBuild">
            <summary>
            Asynchronously rebuilds all contained content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.EndBuild(System.IAsyncResult,System.String@)">
            <summary>
            Completes an asynchronous build.
            </summary>
            <param name="result"></param>
            <param name="errors"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.Reload">
            <summary>
            Reloads all content associated with the repository from disk.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.LoadLightMap(SynapseGaming.LightingSystem.Rendering.RenderableMesh)">
            <summary>
            Loads the light map associated with a RenderableMesh.
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.LoadLightOcclusionBuffer(SynapseGaming.LightingSystem.Lights.ILight)">
            <summary>
            Loads the light occlusion buffer associated with a directional light.
            </summary>
            <param name="light"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.LoadBySourceAssetPath``1(System.String,System.Boolean)">
            <summary>
            Loads an asset using the relative source path. The path includes
            the original file extension.
            
            For instance: "models\\chair.fbx"
            </summary>
            <typeparam name="T">Type of returned class.</typeparam>
            <param name="sourceassetpath">Asset relative source path.</param>
            <param name="allownull">Determines if an exception should
            be thrown when the asset does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.Load``1(System.String)">
            <summary>
            Loads an asset using the xna style path. The path does not include
            the file extension.
            
            For instance: "models\\chair"
            </summary>
            <typeparam name="T">Type of returned class.</typeparam>
            <param name="xnbassetpath">Asset path.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.Clear">
            <summary>
            Removes all objects from the container. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.DeleteLightingCache">
            <summary>
            Deletes all light maps from the repository. This is helpful when
            some contained light maps are no longer used.
            
            Deleting the cache will prevent unused light maps from bloating
            game releases, however all scene lighting will need to be
            recalculated afterward.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.Save">
            <summary>
            Saves the object back to its originating file.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ContentRepository.Name">
            <summary>
            The object's current name.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ContentRepository.DefaultContentRepository">
            <summary>
            Gets the default content repository. This may be null if no content repositories are loaded.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ContentRepository.ContentRepositories">
            <summary>
            List of all content repositories.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ContentRepository.BaseAssetData">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ContentRepository.BaseAssetData.PipelineProcessorOptions">
            <summary>
            Name is the class PropertyName, Value is "val.ToString()".
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.BaseAssetData.GetCompletePipelineProcessorOptions(SynapseGaming.LightingSystem.Core.ContentRepository,SynapseGaming.LightingSystem.Core.ContentRepository.PipelineProcessor,System.Collections.Generic.Dictionary{SynapseGaming.LightingSystem.Core.ContentRepository.PipelineProcessor.Option,System.String})">
            <summary>
            Builds a list of all options including those not in the user pipeline options.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.BaseAssetData.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ContentRepository.BaseAssetData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ContentRepository.SoundEffectData">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ContentRepository.ModelData">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.FrameBufferType">
            <summary>
            Provides a list of both deferred and auxiliary buffer used for rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.FrameBufferType.DeferredDepthAndSpecularPower">
            <summary>
            Stores the scene's linear depth and specular power information during deferred rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.FrameBufferType.DeferredNormalViewSpaceAndSpecular">
            <summary>
            Stores the scene's view-space normal map and specular amount information during deferred rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.FrameBufferType.DeferredLightingDiffuse">
            <summary>
            Stores the scene's accumulated lighting during deferred rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.FrameBufferType.DeferredLightingSpecular">
            <summary>
            Stores the scene's accumulated specular during deferred rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.FrameBufferType.PostProcessing1">
            <summary>
            Auxiliary / temporary buffer used during post processing.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.FrameBufferType.PostProcessing2">
            <summary>
            Auxiliary / temporary buffer used during post processing.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.CustomFrameBufferCollection">
            <summary>
            Provides an implementation specific list of buffers stored
            and maintained by a FrameBuffers object.
            
            Allows using buffers of a different type, format, and size
            from FrameBuffers normal implementation.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.CustomFrameBufferCollection.#ctor">
            <summary>
            Creates a new CustomFrameBufferCollection instance.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.FrameBuffers">
            <summary>
            Provides automatic creation, storage, and management of shared
            buffers (render targets) used during rendering.
            
            These buffers include g-buffers, lighting-buffers, and post
            processing buffers.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FrameBuffers.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,System.Int32,System.Int32,SynapseGaming.LightingSystem.Core.DetailPreference,SynapseGaming.LightingSystem.Core.DetailPreference)">
            <summary>
            Creates a new FrameBuffers instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="customwidth">Custom buffer width.</param>
            <param name="customheight">Custom buffer height.</param>
            <param name="precisionmode">Increases visual quality at the cost of performance.
            Generally used in visualizations, most games do not need this option.</param>
            <param name="lightingrange">Increases lighting quality at the cost of performance.
            Adds additional lighting range when using HDR.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FrameBuffers.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.DetailPreference,SynapseGaming.LightingSystem.Core.DetailPreference)">
            <summary>
            Creates a new FrameBuffers instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="precisionmode">Increases visual quality at the cost of performance.
            Generally used in visualizations, most games do not need this option.</param>
            <param name="lightingrange">Increases lighting quality at the cost of performance.
            Adds additional lighting range when using HDR.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FrameBuffers.GetBuffer(SynapseGaming.LightingSystem.Core.FrameBufferType,System.Boolean)">
            <summary>
            Gets one of the common frame buffers (only valid between
            calls to BeginFrameRendering and EndFrameRendering).
            </summary>
            <param name="buffertype"></param>
            <param name="createmissing">Determines if the buffer should be created
            when it does not exist, otherwise null is returned.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FrameBuffers.GetCustomFrameBufferCollection(System.String,System.Boolean)">
            <summary>
            Gets a collection of implementation specific buffers defined and used by the caller.
            </summary>
            <param name="name">Unique name of the collection to find.</param>
            <param name="createmissing">Determines if the collection should be created if it does not exist.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FrameBuffers.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FrameBuffers.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FrameBuffers.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.FrameBuffers.Width">
            <summary>
            Current width of the frame buffers.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.FrameBuffers.Height">
            <summary>
            Current height of the frame buffers.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.FrameBuffers.PrecisionMode">
            <summary>
            Increases visual quality at the cost of performance.
            Generally used in visualizations, most games do not need this option.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.FrameBuffers.LightingRange">
            <summary>
            Increases lighting quality at the cost of performance.
            Adds additional lighting range when using HDR.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.FrameBuffers.FullFrameQuad">
            <summary>
            Provides a full frame renderable quad sized specifically for the contained buffers.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.FullFrameQuad">
            <summary>
            Helper class that renders a full viewport quad using the user
            effect provided to the Render method.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FullFrameQuad.Render(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Renders a quad without creating a unique FullFrameQuad instance.
            </summary>
            <param name="device"></param>
            <param name="width">Target wiewport width.</param>
            <param name="height">Target wiewport height.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FullFrameQuad.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Creates a new FullFrameQuad instance.
            </summary>
            <param name="device"></param>
            <param name="width">Target wiewport width.</param>
            <param name="height">Target wiewport height.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FullFrameQuad.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new FullFrameQuad instance with min/max screen space
            rendering bounds for partial screen coverage.
            </summary>
            <param name="device"></param>
            <param name="width">Target wiewport width.</param>
            <param name="height">Target wiewport height.</param>
            <param name="screenmin">Screen space min render area.</param>
            <param name="screenmax">Screen space max render area.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FullFrameQuad.Render(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Renders the quad using the supplied effect.
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FullFrameQuad.Render">
            <summary>
            Renders the quad.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.FullFrameQuad.Dispose">
            <summary>
            Disposes all related graphics objects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.FullFrameQuad.VertexBuffer">
            <summary>
            The quad's VertexBuffer (used in custom rendering).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.TransparencyMode">
            <summary>
            Defines the transparency mode when rendering materials and effects.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.TransparencyMode.None">
            <summary>
            No transparency - the material is solid.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.TransparencyMode.Clip">
            <summary>
            Clipped transparency - the material is only rendered where its diffuse
            map alpha value is greater than the reference value.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ProcessorRenderingType">
            <summary>
            Used to indicate the rendering type supported by custom model processors.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ProcessorRenderingType.None">
            <summary>
            Does not support any SunBurn rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ProcessorRenderingType.Forward">
            <summary>
            Supports forward rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ProcessorRenderingType.Deferred">
            <summary>
            Supports deferred rendering.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.PipelineAssetType">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PipelineAssetType.None">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PipelineAssetType.Model">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PipelineAssetType.Sound">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.UpdateDelegate">
            <summary>
            Delegate used when updating movable objects.
            </summary>
            <param name="obj">Object to update.</param>
            <param name="gametime">Time to up date the object to.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.UpdateType">
            <summary>
            Determines if objects receive update events from the engine and are tracked
            by the scenegraph.
            
            Automatic update events are necessary to be affected by gravity, for
            components, and for the scenegraph to track moving objects.  Objects without
            Automatic update events can still move, however the containing scenegraph
            (ObjectManager or LightManager) must be notified using Manager.Move(object).
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.UpdateType.None">
            <summary>
            Object does not receive update events and is not tracked by the scenegraph.
            The object can still move, however the containing scenegraph
            (ObjectManager or LightManager) must be notified using Manager.Move(object).
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.UpdateType.Automatic">
            <summary>
            Object receives update events from the engine and is automatically tracked
            by the scenegraph allowing it to move simply by setting the World transform.
            
            Automatic update events are necessary to be affected by gravity, for
            components, and for the scenegraph to track moving objects.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ObjectVisibility">
            <summary>
            Defines how objects are rendered.
            
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectVisibility.None">
            <summary>
            Object is not rendered.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectVisibility.Rendered">
            <summary>
            Object is rendered on screen.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectVisibility.CastShadows">
            <summary>
            Object casts shadows.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectVisibility.RenderedInEditor">
            <summary>
            Object is rendered on screen when the editor is open.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectVisibility.RenderedAndCastShadows">
            <summary>
            Object is rendered on screen and casts shadows.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ObjectFilter">
            <summary>
            Defines the types of objects that should be returned in a Find() query.
            
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectFilter.Dynamic | ObjectFilter.Enabled",
            finds objects that are both dynamic and enabled).
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectFilter.Dynamic">
            <summary>
            Used to include objects of type ObjectType.Dynamic in the query results.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectFilter.Static">
            <summary>
            Used to include objects of type ObjectType.Static in the query results.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectFilter.Enabled">
            <summary>
            Used to include objects that are enabled in the query results.
            
            If the objects being queried do not support enabling / disabling they will be included
            in the query results regardless of whether this flag is used.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectFilter.Disabled">
            <summary>
            Used to include objects that are disabled in the query results.
            
            If the objects being queried do not support enabling / disabling they will be included
            in the query results regardless of whether this flag is used.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectFilter.DynamicAndStatic">
            <summary>
            Used to include objects of type ObjectType.Dynamic and ObjectType.Static in the query results.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectFilter.EnabledAndDisabled">
            <summary>
            Used to include both objects that are enabled and disabled in the query results.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectFilter.EnabledDynamicAndStatic">
            <summary>
            Used to include enabled objects of type ObjectType.Dynamic and ObjectType.Static in the query results.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.ObjectFilter.All">
            <summary>
            Used to include all objects in the query results.
            
            Note: this includes disabled objects, which in most cases should not be used in normal rendering.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IManagerServiceProvider">
            <summary>
            Interface used by objects containing and providing manager services
            to other managers and game code.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IManagerServiceProvider.AddManager(SynapseGaming.LightingSystem.Core.IManagerService)">
            <summary>
            Adds a manager service to the provider.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IManagerServiceProvider.RemoveManager(SynapseGaming.LightingSystem.Core.IManagerService)">
            <summary>
            Removes a manager service from the provider.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IManagerServiceProvider.GetManager(System.Type,System.Boolean)">
            <summary>
            Retrieves a manager service by type from the provider.
            </summary>
            <param name="managertype">Type used by the manager as a unique
            identifying key (IManagerService.ManagerType).</param>
            <param name="required">Determines whether an exception should
            be thrown if the manager is not found.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IManagerServiceProvider.GetManager``1(System.Boolean)">
            <summary>
            Retrieves a manager service by type from the provider.
            </summary>
            <typeparam name="T">Type used by the manager as a unique
            identifying key (IManagerService.ManagerType).</typeparam>
            <param name="required">Determines whether an exception should
            be thrown if the manager is not found.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IManagerServiceProvider.GetManagers(System.Collections.Generic.List{SynapseGaming.LightingSystem.Core.IManagerService})">
            <summary>
            Retrieves all manager services from the provider.
            </summary>
            <param name="managers">List used to store manager services.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IManagerServiceProvider.ResortServices">
            <summary>
            Resorts the contained manager services.
            
            Providers should automatically resort when manager services
            are added and removed, however manual resorting is necessary
            if a manager service's ManagerProcessOrder property changes
            after being added to the provider.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.SafeSingletonBeginableObject">
            <summary>
            Base object for singleton Begin/End statements.  Forces a Begin called on an object
            to be followed by an End on the same object before Begin can be called on any other
            object derived from this type.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SafeSingletonBeginableObject.Begin">
            <summary>
            Verifies no other Begin is in process.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SafeSingletonBeginableObject.End">
            <summary>
            Verifies a Begin is in process on this object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingHelper.GetClosestPointOnBoxAndDistance(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Used by collision, must be fast!
            </summary>
            <param name="box"></param>
            <param name="position"></param>
            <param name="closestpoint"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingHelper.GetClosestPointOnBoxAndDistanceWithNormal(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Used by collision, must be fast!
            </summary>
            <param name="box"></param>
            <param name="position"></param>
            <param name="closestpoint"></param>
            <param name="surfacenormal"></param>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.GraphicsDeviceSupport">
            <summary>
            Provides information on the device capabilities supported by the current hardware
            and if those capabilities are allowed by the current configuration.  This allows
            users to select various system specific configurations and for developers to test
            a wide variety of configurations on a single machine.
            
            Check a capability property to see if it's supported and allowed.  Setting a
            capability property to true will allow it only if the current hardware supports it.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.GraphicsDeviceSupport.FindSupportedFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat[])">
            <summary>
            Finds the first supported surface format in a list of requested formats. Always sort the
            requested format list in order of preference to ensure the supported and returned format is the best possible match.
            </summary>
            <param name="requestedformats">List of requested formats.</param>
            <returns></returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.GraphicsDeviceSupport.MaxTextureSize">
            <summary>
            The maximum texture size supported by the hardware.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.GraphicsDeviceSupport.MaxAnisotropy">
            <summary>
            The maximum anisotropy value supported by the hardware.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.GraphicsDeviceSupport.SurfaceFormat">
            <summary>
            List of surface formats and related hardware support.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.LightingSystemManager">
            <summary>
            Provides and manages lighting system specific resources
            such as lighting textures, effects, and helper models.
            At least one instance must be created before interacting
            with the lighting system.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemManager.#ctor(System.IServiceProvider,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            Creates a new LightingSystemManager instance.
            </summary>
            <param name="service"></param>
            <param name="managerwithactivationfile">Content manager that contains the SunBurn activation file.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemManager.Finalize">
            <summary>
            Cleans up a deleted LightingSystemManager instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemManager.GetBestRenderTargetUsage">
            <summary>
            Gets the system's prefered render target usage for the current platform.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemManager.GetGraphicsDeviceSupport(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Returns information on the currently configured and supported graphic device features.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemManager.Unload">
            <summary>
            Unloads all lighting system and device specific data.  Must be called
            when the device is reset (during Game.UnloadGraphicsContent()).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemManager.Edition">
            <summary>
            Returns the edition of the loaded SunBurn assembly.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemManager.PublicKeyToken">
            <summary>
            Returns the public key token of the loaded SunBurn assembly.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemManager.Version">
            <summary>
            Returns the version of the loaded SunBurn assembly.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemManager.DetectOverSizedFrameBuffers">
            <summary>
            Determines if SunBurn should throw an exception when the frame buffers exceed the
            viewport size. This helps detect performance issues due to mismatched buffer sizes.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemManager.DefaultResourceManager">
            <summary>
            Provides a default resource manager for use without access to a scene interface.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.DetailPreference">
            <summary>
            Provides enumerated values for applying user detail
            and performance preferences.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.DetailPreference.High">
            <summary>
            Highest detail and lowest performance setting.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.DetailPreference.Medium">
            <summary>
            Medium detail and medium performance setting.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.DetailPreference.Low">
            <summary>
            Low detail and high performance setting.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.DetailPreference.Off">
            <summary>
            Disable feature and highest performance setting.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.SamplingPreference">
            <summary>
            Provides enumerated values for applying user sampling
            and performance preferences.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SamplingPreference.Point">
            <summary>
            Provides classic filtering mode similar to old software rendered games.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SamplingPreference.Bilinear">
            <summary>
            Lowest sampling quality and highest performance setting.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SamplingPreference.Trilinear">
            <summary>
            Medium sampling quality and medium performance setting.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SamplingPreference.Anisotropic">
            <summary>
            Highest sampling quality and lowest performance setting.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IPreferences">
            <summary>
            Interface that provides a base for all objects that load and save user preference.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IPreferences.LoadFromFile(System.String)">
            <summary>
            Loads user preference from a file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IPreferences.SaveToFile(System.String)">
            <summary>
            Saves user preference to a file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ILightingSystemPreferences">
            <summary>
            Interface that provides a base for lighting system user preferences.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ILightingSystemPreferences.TextureSampling">
            <summary>
            Sets the user preferred balance of texture sampling quality and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ILightingSystemPreferences.MaxAnisotropy">
            <summary>
            Sets the maximum anisotropy level when TextureSampling is set to Anisotropic.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ILightingSystemPreferences.ShadowDetail">
            <summary>
            Sets the user preferred balance of shadow filtering quality and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ILightingSystemPreferences.ShadowQuality">
            <summary>
            Sets the user preferred balance of shadow resolution and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ILightingSystemPreferences.EffectDetail">
            <summary>
            Sets the user preferred balance of LightingEffect detail and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ILightingSystemPreferences.LightingDetail">
            <summary>
            Sets the user preferred balance of lighting detail and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ILightingSystemPreferences.PostProcessingDetail">
            <summary>
            Sets the user preferred balance of post-processing effect detail and performance.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.LightingSystemPreferences">
            <summary>
            Provides user and hardware specific preferences to the Lighting System.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.#ctor">
            <summary>
            Creates a new LightingSystemPreferences object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.LoadFromFile(System.String)">
            <summary>
            Loads preferences from file (available on Windows only – Xbox and WP7 implementations
            using LightingSystemPreferences should set preferences via code as all target
            hardware is the same).
            </summary>
            <param name="filename">Path and name of file.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.SaveToFile(System.String)">
            <summary>
            Saves preferences to file (available on Windows only – Xbox 360 implementations
            using LightingSystemPreferences should set preferences via code as all target
            hardware is the same).
            </summary>
            <param name="filename">Path and name of file.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.TextureSampling">
            <summary>
            Sets the user preferred balance of texture sampling quality and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.MaxAnisotropy">
            <summary>
            Sets the maximum anisotropy level when TextureSampling is set to Anisotropic.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.ShadowDetail">
            <summary>
            Sets the user preferred balance of shadow filtering quality and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.ShadowQuality">
            <summary>
            Sets the user preferred balance of shadow resolution and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.EffectDetail">
            <summary>
            Sets the user preferred balance of LightingEffect detail and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.LightingDetail">
            <summary>
            Sets the user preferred balance of lighting detail and performance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LightingSystemPreferences.PostProcessingDetail">
            <summary>
            Sets the user preferred balance of post-processing effect detail and performance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SystemStatisticsRenderer.Append(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            all to avoid StringBuilder's alloc when passing in a numeric...
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="decimalplace"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.SystemStatisticCategory">
            <summary>
            Statistic categories used when rendering. Data is always captured even when not rendered.
            
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "RenderCategories.Rendering | RenderCategories.Lighting",
            renders both rendering and lighting statistics).
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.None">
            <summary>
            Only renders the frame rate and total poly count.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.Rendering">
            <summary>
            Renders all rendering related statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.Lighting">
            <summary>
            Renders all lighting related statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.Shadowing">
            <summary>
            Renders all shadowing related statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.SceneGraph">
            <summary>
            Renders all scenegraph related statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.Collision">
            <summary>
            Renders all collision related statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.Performance">
            <summary>
            
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.UserDefined1">
            <summary>
            Category used for storing and rendering user defined statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.UserDefined2">
            <summary>
            Category used for storing and rendering user defined statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.UserDefined3">
            <summary>
            Category used for storing and rendering user defined statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.UserDefined4">
            <summary>
            Category used for storing and rendering user defined statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.UserDefined5">
            <summary>
            Category used for storing and rendering user defined statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.UserDefined6">
            <summary>
            Category used for storing and rendering user defined statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.UserDefined7">
            <summary>
            Category used for storing and rendering user defined statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.UserDefined8">
            <summary>
            Category used for storing and rendering user defined statistics.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatisticCategory.All">
            <summary>
            Renders all statistics.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.SystemStatistic">
            <summary>
            Represents a single numeric statistic, which can be rendered on-screen
            or saved to file using the SystemConsole class.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.SystemStatistic.AccumulationValue">
            <summary>
            Current accumulating value being generated over this frame. This is the value
            to increment when supplying statistic information. For instance if the statistic
            tracks object rendering, then whenever an object is rendered increment the AccumulationValue
            by one.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SystemStatistic.Name">
            <summary>
            Unique display name for the statistic.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SystemStatistic.Category">
            <summary>
            Categories the statistic is assigned to.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SystemStatistic.Value">
            <summary>
            Fully accumulated value generated during the last frame. This is the display value.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.SystemConsole">
            <summary>
            Tracks per-frame lighting and rendering statistics.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SystemConsole.GetStatistic(System.String,SynapseGaming.LightingSystem.Core.SystemStatisticCategory)">
            <summary>
            Gets a statistic by name, creating it if necessary.
            </summary>
            <param name="name"></param>
            <param name="category">Category assign to the statistic if a new statistic object is created.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SystemConsole.AddMessage(System.String,System.Int32)">
            <summary>
            Adds a message to the system console.
            </summary>
            <param name="message">Message to display.</param>
            <param name="displayseconds">Time in seconds the message is displayed.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SystemConsole.Apply">
            <summary>
            Ends statistic gathering for this frame and resets the AccumulationValue for all statistics.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SystemConsole.Render(Microsoft.Xna.Framework.Graphics.GraphicsDevice,SynapseGaming.LightingSystem.Core.SystemStatisticCategory,System.Boolean,System.Boolean,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Renders stats to the screen. This can be slow on some hardware, rendering several
            categories when trying to capture the frame rate is not recommended.
            </summary>
            <param name="device"></param>
            <param name="categories">The statistic categories to render.</param>
            <param name="showstats">Determines if system stats are rendered.</param>
            <param name="showconsole">Determines if system console messages
            are rendered. The console is not displayed if no messages exist.</param>
            <param name="screenposition">Upper left corner to begin rendering.</param>
            <param name="scale">Text scale.</param>
            <param name="color">Text color.</param>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SystemConsole.ToString(SynapseGaming.LightingSystem.Core.SystemStatisticCategory,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Returns a string containing the names and values of all requested statistics.
            </summary>
            <param name="categories">Statistic categories to include.</param>
            <param name="gametime">Current game time used in frame rate calculation.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SystemConsole.ToString">
            <summary>
            Returns a string containing the names and values of all statistics. Because this method
            does not take the current game time the frame rate is likely to be inaccurate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SystemConsole.SaveToFile(System.String,SynapseGaming.LightingSystem.Core.SystemStatisticCategory,Microsoft.Xna.Framework.GameTime)">
            <summary>
            Writes the requested statistics to a file.
            </summary>
            <param name="filename">Full path including filename of the file to write statistics to.</param>
            <param name="categories">Statistic categories to write to the file.</param>
            <param name="gametime">Current game time used in frame rate calculation.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SystemConsole.Statistics">
            <summary>
            Dictionary of all statistics.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.LightingSystemPerformance">
            <summary>
            
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPerformance.Begin(System.String)">
            <summary>
            
            </summary>
            <param name="codearea"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPerformance.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPerformance.Dump">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.LightingSystemPerformance.TimeTracker">
            <summary>
            
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPerformance.TimeTracker.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPerformance.TimeTracker.Begin">
            <summary>
            
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPerformance.TimeTracker.End">
            <summary>
            
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LightingSystemPerformance.TimeTracker.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.PooledObjectFactory`1">
            <summary>
            Object pool that maintains a list of unused objects
            which are recycled to avoid allocating new objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PooledObjectFactory`1._UnusedObjectPool">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PooledObjectFactory`1._LostObjectCount">
            <summary/>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PooledObjectFactory`1.New">
            <summary>
            Returns an existing unused object if one exists,
            otherwise a new object is created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PooledObjectFactory`1.Free(`0)">
            <summary>
            Places an unused object back in the object pool
            for reuse during a later call to the New method.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PooledObjectFactory`1.Clear">
            <summary>
            Removes all objects from the object pool.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PooledObjectFactory`1.Clear(System.Collections.Generic.List{`0})">
            <summary>
            Returns all unused objects and removes them from the
            object pool.  This is useful when pooling disposable
            objects, as the method returns all objects for manual
            disposal.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.PrefabObjectCategory">
            <summary>
            Defines the type of a prefab object.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PrefabObjectCategory.Unknown">
            <summary>
            Unknown object type.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PrefabObjectCategory.Entity">
            <summary>
            Object is of the type ISceneEntity or ISceneObject.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PrefabObjectCategory.EntityGroup">
            <summary>
            Object is of the type ISceneEntityGroup.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PrefabObjectCategory.Light">
            <summary>
            Object is of the type ILight.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.PrefabObjectCategory.LightGroup">
            <summary>
            Object is of the type ILightGroup.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator">
            <summary>
            Used to generate prefabricated objects from a source object including all
            serialized members, sub-objects, and components.
            
            The source object type must include the [Serialize] attribute and if a custom
            class should ideally implement the IFullSerializable interface.
            
            Note: objects can only be serialized in Windows. To generate objects on
            Xbox or Windows Phone 7 the source xml must be saved to a file on Windows
            and deployed to the Xbox or Windows Phone 7.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator.#ctor">
            <summary>
            Creates a PrefabObjectGenerator instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator.#ctor(System.String)">
            <summary>
            Creates a PrefabObjectGenerator instance from source xml.
            </summary>
            <param name="xml">Xml containing the serialized source object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator.#ctor(System.Object)">
            <summary>
            Creates a PrefabObjectGenerator instance from a source object.
            
            The source object type must include the [Serialize] attribute and if a custom
            class should ideally implement the IFullSerializable interface.
            </summary>
            <param name="obj">Source object used as a prefab template when generating new objects.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator.CreateObject">
            <summary>
            Creates a new instance of the contained prefab template object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator.CreateObject``1">
            <summary>
            Creates a new instance of the contained prefab template object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator.Category">
            <summary>
            Category type of the contained prefab object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.PrefabObjectGenerator.Xml">
            <summary>
            Xml containing the serialized source object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.BasePrimitiveRenderHelper">
            <summary>
            Base class used in primitive rendering helper classes.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BasePrimitiveRenderHelper.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new BasePrimitiveRenderHelper instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BasePrimitiveRenderHelper.SubmitVertex(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
            <summary>
            Submits a single vertex to the render helper.
            
            Please note: all vertices and primitives contained in the render helper
            *must* be in the same space (ie: object space, world space, ...), as they
            are rendered all at once in the Render method using the same effect
            property values (including world, view, and projection transforms).
            </summary>
            <param name="position"></param>
            <param name="color"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BasePrimitiveRenderHelper.Clear">
            <summary>
            Clears all submitted vertices from the render helper.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BasePrimitiveRenderHelper.Render(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Renders all contained vertices at once using the supplied effect.
            
            Please note: this method expects all effect property values
            including transforms to be set correctly.  If using BasicEffect remember
            to enable VertexColorEnabled for vertex colors to be visible.
            </summary>
            <param name="effect"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.BasePrimitiveRenderHelper.PrimitiveType">
            <summary>
            Primitive type. This is implemented by descendant classes.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.LineRenderHelper">
            <summary>
            Helper class that provides quick and easy line rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LineRenderHelper.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new LineRenderHelper instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LineRenderHelper.Submit(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Submits a single line to the render helper.
            
            Please note: all vertices and primitives contained in the render helper
            *must* be in the same space (ie: object space, world space, ...), as they
            are rendered all at once in the Render method using the same effect
            property values (including world, view, and projection transforms).
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="startcolor"></param>
            <param name="endcolor"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.LineRenderHelper.Submit(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
            <summary>
            Submits a single line to the render helper.
            
            Please note: all vertices and primitives contained in the render helper
            *must* be in the same space (ie: object space, world space, ...), as they
            are rendered all at once in the Render method using the same effect
            property values (including world, view, and projection transforms).
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="color"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.LineRenderHelper.PrimitiveType">
            <summary>
            Primitive type used by the render helper.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.BoundingBoxRenderHelper">
            <summary>
            Helper class that provides quick and easy BoundingBox rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BoundingBoxRenderHelper.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new BoundingBoxRenderHelper instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.BoundingBoxRenderHelper.Submit(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Color)">
            <summary>
            Submits a single BoundingBox to the render helper.
            
            Please note: all BoundingBoxes contained in the render helper
            *must* be in the same space (ie: object space, world space, ...), as they
            are rendered all at once in the Render method using the same effect
            property values (including world, view, and projection transforms).
            </summary>
            <param name="bounds"></param>
            <param name="color"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.TriangleRenderHelper">
            <summary>
            Helper class that provides quick and easy triangle rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.TriangleRenderHelper.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new TriangleRenderHelper instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.TriangleRenderHelper.Submit(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Submits a single triangle to the render helper.
            
            Please note: all vertices and primitives contained in the render helper
            *must* be in the same space (ie: object space, world space, ...), as they
            are rendered all at once in the Render method using the same effect
            property values (including world, view, and projection transforms).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="acolor"></param>
            <param name="bcolor"></param>
            <param name="ccolor"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.TriangleRenderHelper.Submit(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color)">
            <summary>
            Submits a single triangle to the render helper.
            
            Please note: all vertices and primitives contained in the render helper
            *must* be in the same space (ie: object space, world space, ...), as they
            are rendered all at once in the Render method using the same effect
            property values (including world, view, and projection transforms).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="color"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.TriangleRenderHelper.PrimitiveType">
            <summary>
            Primitive type used by the render helper.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.RenderTargetHelper">
            <summary>
            Helper class for rendering to a texture. Provides automatic support for rendering
            reflection and refraction textures, as well as standard render-to-texture.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.RenderTargetHelper.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.RenderTargetHelper.TargetType,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
            <summary>
            Creates a new RenderTargetHelper instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="type">Type of rendering to perform on the render target.</param>
            <param name="width">Render target width.</param>
            <param name="height">Render target height.</param>
            <param name="format">Render target format.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.RenderTargetHelper.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.RenderTargetHelper.TargetType,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
            <summary>
            Creates a new RenderTargetHelper instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="type">Type of rendering to perform on the render target.</param>
            <param name="width">Render target width.</param>
            <param name="height">Render target height.</param>
            <param name="mipmapped">Determines if the render target generates mipmaps.</param>
            <param name="format">Render target format.</param>
            <param name="multisamplecount">Render target multisample quality.</param>
            <param name="usage">Render target usage.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.RenderTargetHelper.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.RenderTargetHelper.Clear">
            <summary>
            Removes resources managed by this object. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.RenderTargetHelper.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.RenderTargetHelper.GetTexture">
            <summary>
            Gets the texture containing the resulting rendered image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.RenderTargetHelper.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.RenderTargetHelper.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState,Microsoft.Xna.Framework.Plane)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
            <param name="worldreflectionplane">World space plane used as the reflection surface.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.RenderTargetHelper.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.RenderTargetHelper.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.RenderTargetHelper.SceneState">
            <summary>
            Scene rendering state used to render objects to this RenderTargetHelper. The state values
            may be different from those passed into BeginFrameRendering to accommodate reflection and refraction.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.RenderTargetHelper.Preferences">
            <summary>
            Rendering preferences used to render objects to this RenderTargetHelper.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.RenderTargetHelper.TargetType">
            <summary>
            Type of rendering to perform on the render target.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.RenderTargetHelper.TargetType.Reflection">
            <summary>
            Automatically generates a reflection image based on the current view and reflection plane.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.RenderTargetHelper.TargetType.Refraction">
            <summary>
            Automatically generates a refraction image based on the current view and reflection plane.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.RenderTargetHelper.TargetType.Standard">
            <summary>
            Renders to texture normally based on the current view.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.IResourceManager">
            <summary>
            Interface that provides access to the scene's resource manager. The resource manager
            tracks disposable and unloadable resources, freeing them when the scene is unloaded.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IResourceManager.AssignOwnership(System.IDisposable)">
            <summary>
            Assigns ownership of the resource to the resource manager, this means the manager
            will handle disposing and removing (IDisposable), or unloading (IUnloadable) the
            resource when the scene is unloaded (when [manager].Unload() is called).
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.IResourceManager.AssignOwnership(SynapseGaming.LightingSystem.Core.IUnloadable)">
            <summary>
            Assigns ownership of the resource to the resource manager, this means the manager
            will handle disposing and removing (IDisposable), or unloading (IUnloadable) the
            resource when the scene is unloaded (when [manager].Unload() is called).
            </summary>
            <param name="resource"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ResourceManager">
            <summary>
            Can be assigned ownership of disposable and unloadable resources, automatically
            freeing them when the scene is unloaded.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ResourceManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Unused.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ResourceManager.AssignOwnership(System.IDisposable)">
            <summary>
            Assigns ownership of the resource to the resource manager, this means the manager
            will handle disposing and removing (IDisposable), or unloading (IUnloadable) the
            resource when the scene is unloaded (when [manager].Unload() is called).
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ResourceManager.AssignOwnership(SynapseGaming.LightingSystem.Core.IUnloadable)">
            <summary>
            Assigns ownership of the resource to the resource manager, this means the manager
            will handle disposing and removing (IDisposable), or unloading (IUnloadable) the
            resource when the scene is unloaded (when [manager].Unload() is called).
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ResourceManager.Clear">
            <summary>
            Unused. Resources assigned to the manager are not removed until
            they are disposed (during the Unload method).
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ResourceManager.Unload">
            <summary>
            Disposes and removes all IDisposable resources. Unloads but
            continues tracking IUnloadable resources.
            
            Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ResourceManager.ShareMaterialsBetweenModels">
            <summary>
            Determines if material effects loaded from the content pipeline are shared
            based on the source material file.
            
            As an example models and effects that load the material "Materials\Rock.mat"
            will all share a single reference to the same "Materials\Rock.mat" material effect.
            Modifying properties on the effect will change the material properties for
            all models and effects referencing it.
            
            Disabling shared materials emulates the behavior of SunBurn prior to version 2.0.13
            and standard XNA, where loading multiple models will create multiple unique copies
            of the same material effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ResourceManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ResourceManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ISceneState">
            <summary>
            Interface that provides a base for objects exposing scene, frame, and view data to the the lighting system.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ISceneState.ApplyEditorUpdate(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary/>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.View">
            <summary>
            The scene's current view matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.ViewToWorld">
            <summary>
            The scene's inverse view matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.Projection">
            <summary>
            The scene's current projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.ProjectionNonOblique">
            <summary>
            Non-oblique copy of the scene's projection matrix. If the projection matrix is already non-oblique
            both ProjectionNonOblique and Projection are equal.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.ProjectionToView">
            <summary>
            The scene's inverse projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.ViewProjection">
            <summary>
            The scene's combined view and projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.ProjectionToWorld">
            <summary>
            The scene's combined inverse view and inverse projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.ViewFrustum">
            <summary>
            The scene's current view frustum.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.RenderingToScreen">
            <summary>
            Indicates the rendering pass is drawing to the screen (or to a
            target copied to the screen).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.InvertedWindings">
            <summary>
            Determines if primitive culling mode should be flipped to accommodate
            inverted windings caused by mirrored view or projection transforms.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.OrthographicProjection">
            <summary>
            Indicates the projection is 2D.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.GameTime">
            <summary>
            The scene's current game time.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.FrameId">
            <summary>
            The current frame id.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.Environment">
            <summary>
            The scene's current environment.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneState.FrameBuffers">
            <summary>
            Shared buffers used to render the scene.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.ISceneEnvironment">
            <summary>
            Interface that provides a base for all scene environment objects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.ISceneEnvironment.Save">
            <summary>
            Saves the object back to its originating file.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.VisibleDistance">
            <summary>
            Maximum world space distance objects are visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.FogEnabled">
            <summary>
            Enables scene fog.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.FogStartDistance">
            <summary>
            World space distance that fog begins.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.FogEndDistance">
            <summary>
            World space distance that fog fully obscures objects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.FogColor">
            <summary>
            Color applied to scene fog.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.ShadowFadeStartDistance">
            <summary>
            World space distance that directional shadows begin fading.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.ShadowFadeEndDistance">
            <summary>
            World space distance that directional shadows completely disappear.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.ShadowCasterDistance">
            <summary>
            World space distance used to include shadow casters. This allows including shadows
            from objects further away than the shadow fade area, for instance shadows from
            distant mountains.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.BloomAmount">
            <summary>
            Strength of bloom applied to the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.BloomThreshold">
            <summary>
            Minimum pixel intensity required for bloom to occur.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.DynamicRangeEnabled">
            <summary>
            Enables High Dynamic Range.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.ExposureAmount">
            <summary>
            Intensity of the scene exposure.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.DynamicRangeSaturationAmount">
            <summary>
            Intensity of scene colors when using High Dynamic Range.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.DynamicRangeDarkenAmount">
            <summary>
            Intensity of scene contrast when using High Dynamic Range.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.DynamicRangeCinematicAmount">
            <summary>
            Intensity of High Dynamic Range color correction and simulated film exposure effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.DynamicRangeTransitionTime">
            <summary>
            Time required to fully adjust High Dynamic Range to lighting changes.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.DynamicRangeTransitionMaxScale">
            <summary>
            Maximum intensity increase allowed for High Dynamic Range. Limits intensity
            increases, which sets the darkness-level where the scene will remain dark.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.DynamicRangeTransitionMinScale">
            <summary>
            Maximum intensity decrease allowed for High Dynamic Range. Limits intensity
            decreases, which sets the brightness-level where the scene will remain overly bright.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.Gravity">
            <summary>
            Amount of gravity applied to dynamic collide-able objects in the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.EditorIconScale">
            <summary>
            Size of icons displayed in the editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.EditorMoveScale">
            <summary>
            Movement speed of the in-editor camera.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.EditorRotationScale">
            <summary>
            Rotation speed of the in-editor camera.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.ISceneEnvironment.EditorDefaultObjectScale">
            <summary>
            Scale of newly created objects in the editor.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.SceneState">
            <summary>
            Provides scene, frame, and view specific data to the the lighting system.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneState.BeginFrameRendering(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,Microsoft.Xna.Framework.GameTime,SynapseGaming.LightingSystem.Core.ISceneEnvironment,SynapseGaming.LightingSystem.Core.FrameBuffers,System.Boolean)">
            <summary>
            Sets up the scene state prior to 2D rendering.
            </summary>
            <param name="viewposition">World space position of the 2D camera.</param>
            <param name="viewwidth">Number of world space units visible across the
            width of the viewport.</param>
            <param name="aspectratio">Aspect ratio of the viewport.</param>
            <param name="gametime">Current game time.</param>
            <param name="environment">Environment object used while rendering.</param>
            <param name="framebuffers">Shared buffers used to render the scene.</param>
            <param name="renderingtoscreen">Indicates the rendering pass is drawing
            to the screen (or to a target copied to the screen).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneState.BeginFrameRendering(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.GameTime,SynapseGaming.LightingSystem.Core.ISceneEnvironment,SynapseGaming.LightingSystem.Core.FrameBuffers,System.Boolean)">
            <summary>
            Sets up the scene state prior to 3D rendering. Includes support for oblique projection.
            </summary>
            <param name="view">Camera view matrix.</param>
            <param name="projection">Camera projection matrix. Must be a non-oblique version of the projection matrix.</param>
            <param name="projectionoblique">Camera projection matrix.</param>
            <param name="gametime">Current game time.</param>
            <param name="environment">Environment object used while rendering.</param>
            <param name="framebuffers">Shared buffers used to render the scene.</param>
            <param name="renderingtoscreen">Indicates the rendering pass is drawing
            to the screen (or to a target copied to the screen).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneState.BeginFrameRendering(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.GameTime,SynapseGaming.LightingSystem.Core.ISceneEnvironment,SynapseGaming.LightingSystem.Core.FrameBuffers,System.Boolean)">
            <summary>
            Sets up the scene state prior to 3D rendering.
            </summary>
            <param name="view">Camera view matrix.</param>
            <param name="projection">Camera projection matrix. Must be a non-oblique version of the projection matrix.</param>
            <param name="gametime">Current game time.</param>
            <param name="environment">Environment object used while rendering.</param>
            <param name="framebuffers">Shared buffers used to render the scene.</param>
            <param name="renderingtoscreen">Indicates the rendering pass is drawing
            to the screen (or to a target copied to the screen).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneState.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneState.ApplyEditorUpdate(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary/>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.View">
            <summary>
            The scene's current view matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.ViewToWorld">
            <summary>
            The scene's inverse view matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.Projection">
            <summary>
            The scene's current projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.ProjectionNonOblique">
            <summary>
            Non-oblique copy of the scene's projection matrix. If the projection matrix is already non-oblique
            both ProjectionNonOblique and Projection are equal.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.ProjectionToView">
            <summary>
            The scene's inverse projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.ViewProjection">
            <summary>
            The scene's combined view and projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.ProjectionToWorld">
            <summary>
            The scene's combined inverse view and inverse projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.ViewFrustum">
            <summary>
            The scene's current view frustum.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.RenderingToScreen">
            <summary>
            Indicates the rendering pass is drawing to the screen (or to a
            target copied to the screen).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.InvertedWindings">
            <summary>
            Determines if primitive culling mode should be flipped to accommodate
            inverted windings caused by mirrored view or projection transforms.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.OrthographicProjection">
            <summary>
            Indicates the projection is 2D.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.GameTime">
            <summary>
            The scene's current game time.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.FrameId">
            <summary>
            The current frame id.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.Environment">
            <summary>
            The scene's current environment.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneState.FrameBuffers">
            <summary>
            Shared buffers used to render the scene.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.SceneEnvironment">
            <summary>
            Provides scene environmental information to the lighting system.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneEnvironment.#ctor">
            <summary>
            Creates a new SceneEnvironment instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneEnvironment.Dispose">
            <summary>
            Releases resources allocated by this object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneEnvironment.Save">
            <summary>
            Saves the object back to its originating file.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneEnvironment.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneEnvironment.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.VisibleDistance">
            <summary>
            Maximum world space distance objects are visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.FogEnabled">
            <summary>
            Enables scene fog.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.FogStartDistance">
            <summary>
            World space distance that fog begins.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.FogEndDistance">
            <summary>
            World space distance that fog fully obscures objects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.FogColor">
            <summary>
            Color applied to scene fog.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.ShadowFadeStartDistance">
            <summary>
            World space distance that directional shadows begin fading.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.ShadowFadeEndDistance">
            <summary>
            World space distance that directional shadows completely disappear.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.ShadowCasterDistance">
            <summary>
            World space distance used to include shadow casters. This allows including shadows
            from objects further away than the shadow fade area, for instance shadows from
            distant mountains.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.BloomAmount">
            <summary>
            Strength of bloom applied to the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.BloomThreshold">
            <summary>
            Minimum pixel intensity required for bloom to occur.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.DynamicRangeEnabled">
            <summary>
            Enables High Dynamic Range.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.ExposureAmount">
            <summary>
            Intensity of the scene exposure.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.DynamicRangeSaturationAmount">
            <summary>
            Intensity of scene colors when using High Dynamic Range.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.DynamicRangeDarkenAmount">
            <summary>
            Intensity of scene contrast when using High Dynamic Range.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.DynamicRangeCinematicAmount">
            <summary>
            Intensity of High Dynamic Range color correction and simulated film exposure effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.DynamicRangeTransitionTime">
            <summary>
            Time required to fully adjust High Dynamic Range to lighting changes.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.DynamicRangeTransitionMaxScale">
            <summary>
            Maximum intensity increase allowed for High Dynamic Range. Limits intensity
            increases, which sets the darkness-level where the scene will remain dark.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.DynamicRangeTransitionMinScale">
            <summary>
            Maximum intensity decrease allowed for High Dynamic Range. Limits intensity
            decreases, which sets the brightness-level where the scene will remain overly bright.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.Gravity">
            <summary>
            Amount of gravity applied to dynamic collide-able objects in the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.EditorIconScale">
            <summary>
            Size of icons displayed in the editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.EditorMoveScale">
            <summary>
            Movement speed of the in-editor camera.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.EditorRotationScale">
            <summary>
            Rotation speed of the in-editor camera.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.EditorDefaultObjectScale">
            <summary>
            Scale of newly created objects in the editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.Name">
            <summary>
            The object's current name.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneEnvironment.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.SceneInterface">
            <summary>
            Acts as both a service provider and component manager for a scene.
            
            As a service provider its contained manager services can be requested by type and
            accessed through common interfaces, making both using the built-in managers and
            writing custom replacement managers easy.
            
            As a component manager all contained manager services automatically receive calls
            to BeginFrameRendering, EndFrameRendering, Update, and more, allowing custom managers
            to be plugged in and run with out writing any additional code to specifically handle them.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new SceneInterface instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.CreateDefaultManagers(System.Boolean)">
            <summary>
            Creates and adds a default set of manager services. This makes
            initializing the SceneInterface easier.
            
            Depending on the creation options provided the following manager
            services will be created:
            
            Always
                -ResourceManager
                -ObjectManager
                -LightManager
                -AvatarManager
                -PostProcessManager
                -CollisionManager
                -LightMapManager
                -LightingSystemEditor
                
            Forward rendering
                -RenderManager
                -LightManager
            
            Deferred rednering
                -DeferredRenderManager
                -DeferredShadowMapManager
            </summary>
            <param name="usedeferredrendering"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.AddManager(SynapseGaming.LightingSystem.Core.IManagerService)">
            <summary>
            Adds a manager service to the provider.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.RemoveManager(SynapseGaming.LightingSystem.Core.IManagerService)">
            <summary>
            Removes a manager service from the provider.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.ResortServices">
            <summary>
            Resorts the contained manager services.
            
            Providers should automatically resort when manager services
            are added and removed, however manual resorting is necessary
            if a manager service's ManagerProcessOrder property changes
            after being added to the provider.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.GetManager``1(System.Boolean)">
            <summary>
            Retrieves a manager service by type from the provider.
            </summary>
            <typeparam name="T">Type used by the manager as a unique
            identifying key (IManagerService.ManagerType).</typeparam>
            <param name="required">Determines whether an exception should
            be thrown if the manager is not found.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.GetManager(System.Type,System.Boolean)">
            <summary>
            Retrieves a manager service by type from the provider.
            </summary>
            <param name="managertype">Type used by the manager as a unique
            identifying key (IManagerService.ManagerType).</param>
            <param name="required">Determines whether an exception should
            be thrown if the manager is not found.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.GetManagers(System.Collections.Generic.List{SynapseGaming.LightingSystem.Core.IManagerService})">
            <summary>
            Retrieves all manager services from the provider.
            </summary>
            <param name="managers">List used to store manager services.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the
            contained manager services.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.Submit(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Submits a scene to the contained manager services.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.Remove(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Removes a scene from the contained manager services.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.Clear">
            <summary>
            Removes resources managed by the contained manager services.
            Commonly used while clearing the scene.
            
            Note: this does not remove the contained manager services.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.Unload">
            <summary>
            Disposes any graphics resources used internally by the
            contained manager services, and removes scene resources
            managed by them. Commonly used during Game.UnloadContent.
            
            Note: this does not remove the contained manager services.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the contained manager services and their managed resources.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the contained manager services prior to rendering (used for forward rendering).
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.SceneInterface.EndFrameRendering">
            <summary>
            Finalizes rendering on the contained manager services.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.ActiveSceneInterface">
            <summary>
            Provides access to the current active SceneInterface. A SceneInterface becomes
            active when ApplyPreferences(), Update(), Clear(), Unload(),
            BeginFrameRendering(), or EndFrameRendering() is called.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.ResourceManager">
            <summary>
            Provides convenient access to the ResourceManager manager service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.ObjectManager">
            <summary>
            Provides convenient access to the ObjectManager manager service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.RenderManager">
            <summary>
            Provides convenient access to the RenderManager manager service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.LightManager">
            <summary>
            Provides convenient access to the LightManager manager service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.AudioManager">
            <summary>
            Provides convenient access to the AudioManager manager service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.Editor">
            <summary>
            Provides convenient access to the LightingSystemEditor service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.ShadowMapManager">
            <summary>
            Provides convenient access to the ShadowMapManager manager service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.AvatarManager">
            <summary>
            Provides convenient access to the AvatarManager manager service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.LightMapManager">
            <summary>
            Provides convenient access to the LightMapManager manager service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.CollisionManager">
            <summary>
            Provides convenient access to the CollisionManager manager service contained in the provider.
            
            Note: this property will be null if no manager service of this type is contained in the provider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.ResourceManagerType">
            <summary>
            Manager type used to retrieve the IResourceManager manager service.  Use this
            type when creating a custom manager that replaces the built-in manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.ObjectManagerType">
            <summary>
            Manager type used to retrieve the IObjectManager manager service.  Use this
            type when creating a custom manager that replaces the built-in manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.RenderManagerType">
            <summary>
            Manager type used to retrieve the IRenderManager manager service.  Use this
            type when creating a custom manager that replaces the built-in manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.LightManagerType">
            <summary>
            Manager type used to retrieve the ILightManager manager service.  Use this
            type when creating a custom manager that replaces the built-in manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.AudioManagerType">
            <summary>
            Manager type used to retrieve the IAudioManager manager service.  Use this
            type when creating a custom manager that replaces the built-in manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.ShadowMapManagerType">
            <summary>
            Manager type used to retrieve the IShadowMapManager manager service.  Use this
            type when creating a custom manager that replaces the built-in manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.EditorType">
            <summary>
            Manager type used to retrieve the LightingSystemEditor service.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.AvatarManagerType">
            <summary>
            Manager type used to retrieve the IAvatarManager manager service.  Use this
            type when creating a custom manager that replaces the built-in manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.LightMapManagerType">
            <summary>
            Manager type used to retrieve the ILightMapManager manager service.  Use this
            type when creating a custom manager that replaces the built-in manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.CollisionManagerType">
            <summary>
            Manager type used to retrieve the ICollisionManager manager service.  Use this
            type when creating a custom manager that replaces the built-in manager.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.ShowStatistics">
            <summary>
            Enables on-screen statistics.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.ShowConsole">
            <summary>
            Enables on-screen console messages. The console is not displayed if no messages exist.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.SceneInterface.StatisticCategories">
            <summary>
            Categories used when rendering on-screen statistics.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.OptimizationSystem">
            <summary>
            Static class used to control SunBurn's built-in optimizations.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.OptimizationSystem.Clear">
            <summary>
            Clears the internal cache of pre-cast data types. This may become necessary when
            creating and removing many new objects from the scenegraph without calling Clear().
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump">
            <summary>
            Describes a SunBurn compatible vertex format structure that contains position, normal data, one set of texture coordinates,
            and tangent space information used in bump / specular mapping.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump.Normal">
            <summary>
            The vertex normal.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump.TextureCoordinate">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump.Tangent">
            <summary>
            Tangent space tangent element used in bump / specular mapping.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump.Binormal">
            <summary>
            Tangent space binormal element used in bump / specular mapping.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump.VertexElements">
            <summary>
            An array of vertex elements describing this vertex.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump.VertexDeclaration">
            <summary>
            Vertex declaration, which defines per-vertex data.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump.BuildTangentSpaceDataForTriangleList(System.Int16[],SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump[])">
            <summary>
            Generates tangent space data (used for bump and specular mapping) from the provided vertex information.
            </summary>
            <param name="indices">Indices that describe a list of triangles to generate tangent space
            information for.  WARNING: this method requires triangle lists (not fans or strips).</param>
            <param name="vertices">Array of vertices.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBump.SizeInBytes">
            <summary>
            Gets the size of this structure.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin">
            <summary>
            Describes a SunBurn compatible vertex format structure that contains position, normal data, one set of texture coordinates,
            tangent space information used in bump / specular mapping, and skinning information.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.Normal">
            <summary>
            The vertex normal.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.TextureCoordinate">
            <summary>
            The texture coordinates.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.Tangent">
            <summary>
            Tangent space tangent element used in bump / specular mapping.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.Binormal">
            <summary>
            Tangent space binormal element used in bump / specular mapping.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.BoneIndex0">
            <summary>
            Index used during skinning to lookup the meshToObject transform from a bone
            transform array given to an effect or render manager for rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.BoneIndex1">
            <summary>
            Index used during skinning to lookup the meshToObject transform from a bone
            transform array given to an effect or render manager for rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.BoneIndex2">
            <summary>
            Index used during skinning to lookup the meshToObject transform from a bone
            transform array given to an effect or render manager for rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.BoneIndex3">
            <summary>
            Index used during skinning to lookup the meshToObject transform from a bone
            transform array given to an effect or render manager for rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.BoneWeights">
            <summary>
            Weights used to blend between the transforms assigned via bone indices 0 - 3.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.VertexElements">
            <summary>
            An array of vertex elements describing this vertex.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.VertexDeclaration">
            <summary>
            Vertex declaration, which defines per-vertex data.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.BuildTangentSpaceDataForTriangleList(System.Int16[],SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin[])">
            <summary>
            Generates tangent space data (used for bump and specular mapping) from the provided vertex information.
            </summary>
            <param name="indices">Indices that describe a list of triangles to generate tangent space
            information for.  WARNING: this method requires triangle lists (not fans or strips).</param>
            <param name="vertices">Array of vertices.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.VertexPositionNormalTextureBumpSkin.SizeInBytes">
            <summary>
            Gets the size of this structure.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.VideoHardwareHelper">
            <summary>
            Helper class used to determine video card manufacturer, model, and memory size.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Core.VideoHardwareHelper.#ctor">
            <summary>
            Creates a new VideoHardwareHelper instance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.VideoHardwareHelper.Manufacturer">
            <summary>
            Manufacturer of the active video card.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.VideoHardwareHelper.ModelNumber">
            <summary>
            Model number of the active video card.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.VideoHardwareHelper.TotalMemory">
            <summary>
            Total memory available to the active video card. This is not always accurate,
            video hardware that supports shared memory will report *all* available memory
            not just the faster on board memory.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Core.VideoHardwareHelper.Description">
            <summary>
            Description of the active video card.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Core.VideoHardwareHelper.VideoManufacturer">
            <summary>
            Common video card manufacturers.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VideoHardwareHelper.VideoManufacturer.Nvidia">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VideoHardwareHelper.VideoManufacturer.Ati">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Core.VideoHardwareHelper.VideoManufacturer.Unknown">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorObjectAttribute">
            <summary>
            Attribute that marks the class as editable inside the SunBurn Editor. 
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EditorObjectAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new EditorObjectAttribute instance.
            </summary>
            <param name="onlymarkedproperties">Defines whether or not the editor will ignore
            public properties that do not have an EditorPropertyAttribute.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorPropertyAttribute">
            <summary>
            Attribute that marks properties as editable inside the SunBurn Editor and 
            defines UI-behavior.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EditorPropertyAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new EditorPropertyAttribute instance.
            </summary>
            <param name="editorvisible">Defines whether or not this property will be
            displayed in-editor.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.EditorPropertyAttribute.Description">
            <summary>
            The human-readable description for this property to be displayed in-editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.EditorPropertyAttribute.ToolTipText">
            <summary>
            The Tooltip information to display when the mouse hovers over the
            control for this property.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.EditorPropertyAttribute.MajorGrouping">
            <summary>
            The major grouping for organizing properties. Major groups are separated
            by dividers in the properties panel.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.EditorPropertyAttribute.MinorGrouping">
            <summary>
            The minor grouping for organizing properties. This defines the order of 
            properties within the same major group.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.EditorPropertyAttribute.HorizontalAlignment">
            <summary>
            Defines the position of the description label for this property. True for the label
            to appear next to the control, false for it to appear above the control.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.EditorPropertyAttribute.ControlType">
            <summary>
            Overrides the default control type. Useful to display Vector3 properties
            as a color selection box.
            Use with caution, will create unexpected results for mismatched datatypes.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorEnumDescriptionAttribute">
            <summary>
            Attribute to give enum values human-readable descriptions to be displayed in-editor.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EditorEnumDescriptionAttribute.#ctor(System.String)">
            <summary>
            Creates a new EditorEnumDescriptionAttribute instance.
            </summary>
            <param name="description">The human-readable description to display
            in-editor.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EditorEnumDescriptionAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new EditorEnumDescriptionAttribute instance.
            </summary>
            <param name="ignore">Defines whether or not this enum value will
            be hidden in-editor.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.BaseControlOptionsAttribute">
            <summary>
            Abstract base class for all property control options attributes.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorNumberPadOptionsAttribute">
            <summary>
            Attribute for numeric properties to define numberpad specific control options.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EditorNumberPadOptionsAttribute.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new EditorNumberPadOptionsAttribute instance.
            </summary>
            <param name="decimalplaces">The number of decimal places to show in the numberpad control.</param>
            <param name="minvalue">The minimum allowed value for the property.</param>
            <param name="maxvalue">The maximum allowed value for the property.</param>
            <param name="increment">The amount to increase/decrease by when the user cycles through the numberpad.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorCheckboxOptionsAttribute">
            <summary>
            Attribute for boolean properties to define checkbox specific control options.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EditorCheckboxOptionsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new EditorCheckboxOptionsAttribute instance.
            </summary>
            <param name="integervalue">Defines whether or not the checkbox should
            return an integer value (0=false, 1=true), instead of a boolean value.
            Useful to allow checkboxes to control enum properties.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorDropDownOptionsAttribute">
            <summary>
            Attribute for enum properties to define dropdownbox specific control options.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EditorDropDownOptionsAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new EditorDropDownOptionsAttribute instance.
            </summary>
            <param name="width">Overrides the control width for this dropdownbox.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorTextBoxOptionsAttribute">
            <summary>
            Attribute for string properties to define textbox specific control options.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EditorTextBoxOptionsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new EditorTextBoxOptionsAttribute instance.
            </summary>
            <param name="errortextbox">Defines whether or not this textbox will
            be an error textbox. Error textboxes are readonly and display their value
            in red text.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.EditorTextBoxOptionsAttribute.Width">
            <summary>
            Overrides the control width for this textbox.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.BaseEditorContainer">
            <summary>
            Base RemoteContainer functionality that includes TreeNode
            representaion and get/set of remote properties.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IEditorContainer">
            <summary>
            Base Interface to wrap editor objects used by ObjectManagers.
            Specific containers should implement this.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IRemovable">
            <summary>
            Allows for removal of objects in an EditorCollection.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.ControlType">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.None">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.Button">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.CheckBox">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.ColorSelection">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.DropDown">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.NumberPad">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.TextBox">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.TextureBox">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.VectorPad">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.AssetDropTarget">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.ModelDropTarget">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.ControlType.Default">
            <summary/>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.LightingSystemEditor">
            <summary>
            Adds editor support to SunBurn projects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a LightingSystemEditor instance.
            </summary>
            <param name="sceneinterface"></param>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.Finalize">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Processes in editor input control, object selection, and camera movement.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.Clear">
            <summary>
            Removes resources managed by this object. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.LaunchEditor">
            <summary>
            Opens the SunBurn editor manually.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.ReplaceEffect">
            <summary>
            Used to remap effects that are replaced in editor.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.ReloadAssets">
            <summary>
            Used to reload all scene assets when requested by the editor.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.RegisterOnReplaceEffect(SynapseGaming.LightingSystem.Editor.LightingSystemEditor.EffectReplaceDelegate)">
            <summary>
            Register delegate used to reload scene assets when requested by the editor.
            </summary>
            <param name="del"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.UnregisterOnReplaceEffect(SynapseGaming.LightingSystem.Editor.LightingSystemEditor.EffectReplaceDelegate)">
            <summary>
            Unregister delegate used to reload scene assets when requested by the editor.
            </summary>
            <param name="del"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.OnCreateResource(System.IDisposable)">
            <summary>
            Call to start tracking user defined resources in the editor.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.OnDisposeResource(System.IDisposable)">
            <summary>
            Call to stop tracking user defined resources in the editor.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.LaunchKey">
            <summary>
            The assigned key that, when pressed, will be used to launch the in-game editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.UserHandledView">
            <summary>
            Determines if user defined code handles in editor camera movement.
            If so only object selection and object movement is processed.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.EditorAttached">
            <summary>
            Allows specific processing when the editor attached. Commonly used for editor specific input processing.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.GameHasFocus">
            <summary>
            Allows specific processing when the game window has input focus, not the editor's controls.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.EffectReplaceDelegate">
            <summary>
            Used to remap effects that are replaced in editor.
            </summary>
            <param name="currenteffect">The effect to replace.</param>
            <param name="neweffect">The new effect.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.LightingSystemEditor.ReloadAssetsDelegate">
            <summary>
            Used to reload all scene assets when requested by the editor.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorCollection`1">
            <summary>
            A read-only generic collection for a List.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.ContainerCollection">
            <summary>
            A read-only collection of IRemoteContainers.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.ObjectControlCollection">
            <summary>
            A read-only collection of IEditorObjectControls.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.EditorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.EditorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EffectRemapHelper">
            <summary>
            Helps remap dynamically replaced effects at runtime. Commonly used to support
            converting effects to/from custom effects in the editor when not using the built in RenderManager.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EffectRemapHelper.GetRemappedEffect(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Returns any effect that replaces the current effect. If no replacement is available the current effect is returned.
            </summary>
            <param name="currenteffect"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EffectRemapHelper.RemapEffect(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Defines a new effect the current effect should be replaced with.
            </summary>
            <param name="currenteffect">The effect to replace.</param>
            <param name="neweffect">The new effect.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.EffectRemapHelper.Unload">
            <summary>
            Removes all effect remaps.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect">
            <summary>
            Provides basic rendering support.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.IRenderableEffect">
            <summary>
            Interface that provides custom effects with basic RenderManager compatibility.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.IRenderableEffect.SetWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Sets both the world and inverse world matrices.  Used to improve
            performance in effects that automatically generate an inverse
            world matrix when the world matrix is set, by providing a cached
            or precalculated inverse matrix with the world matrix.
            </summary>
            <param name="world">World matrix applied to geometry using this effect.</param>
            <param name="worldtoobj">Inverse world matrix applied to geometry using this effect.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.IRenderableEffect.SetViewAndProjection(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets both the view, projection, and their inverse matrices.  Used to improve
            performance in effects that automatically generate an inverse
            matrix when the view and project are set, by providing a cached
            or precalculated inverse matrix with the view and project matrices.
            </summary>
            <param name="view">View matrix applied to geometry using this effect.</param>
            <param name="viewtoworld">Inverse view matrix applied to geometry using this effect.</param>
            <param name="projection">Projection matrix applied to geometry using this effect.</param>
            <param name="projectiontoview">Inverse projection matrix applied to geometry using this effect.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IRenderableEffect.World">
            <summary>
            World matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IRenderableEffect.View">
            <summary>
            View matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IRenderableEffect.Projection">
            <summary>
            Projection matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IRenderableEffect.DoubleSided">
            <summary>
            Surfaces rendered with the effect should be visible from both sides.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IRenderableEffect.EffectDetail">
            <summary>
            Applies the user's effect preference. This generally trades detail
            for performance based on the user's selection.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect._UpdatedByBatch">
            <summary>
            Set value to true when changes to a property cause calls to EffectParameter.SetValue.
            This tells the renderer to commit changes made during Effect Begin/End.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.SetTechnique">
            <summary>
            Sets the effect technique based on its current property values.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.SetWorldViewProjection(System.Boolean,System.Boolean)">
            <summary>
            Recalculates the combination view-projection and world-view-projection matrix
            based on the individual world, view, and projection.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.SetViewAndProjection(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets both the view, projection, and their inverse matrices.  Used to improve
            performance in effects that automatically generate an inverse
            matrix when the view and project are set, by providing a cached
            or precalculated inverse matrix with the view and project matrices.
            </summary>
            <param name="view">View matrix applied to geometry using this effect.</param>
            <param name="viewtoworld">Inverse view matrix applied to geometry using this effect.</param>
            <param name="projection">Projection matrix applied to geometry using this effect.</param>
            <param name="projectiontoview">Inverse projection matrix applied to geometry using this effect.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.SetWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Sets both the world and inverse world matrices.  Used to improve
            performance in effects that automatically generate an inverse
            world matrix when the world matrix is set, by providing a cached
            or precalculated inverse matrix with the world matrix.
            </summary>
            <param name="world">World matrix applied to geometry using this effect.</param>
            <param name="worldtoobj">Inverse world matrix applied to geometry using this effect.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.Clone">
            <summary>
            Creates a new effect of the same class type, with the same property values, and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.Create">
            <summary>
            Creates a new empty effect of the same class type and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.World">
            <summary>
            World matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.WorldToObject">
            <summary>
            Inverse world matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.View">
            <summary>
            View matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.ViewToWorld">
            <summary>
            Inverse view matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.Projection">
            <summary>
            Projection matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.ProjectionToView">
            <summary>
            Inverse projection matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.DoubleSided">
            <summary>
            Surfaces rendered with the effect should be visible from both sides.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.EffectDetail">
            <summary>
            Applies the user's effect preference. This generally trades detail
            for performance based on the user's selection.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseRenderableEffect.UpdatedByBatch">
            <summary>
            Determines if the renderer should call Apply within an effect Begin/End due
            to internal calls to EffectParameter.SetValue. The renderer should set this value
            to false after calling Apply.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IEditorControl">
            <summary>
            Base interface for any WinForm Controls that interact
            with the Editor.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IEditorObjectControl">
            <summary>
            Interface for WinForm Controls that will manipulate specific object
            properties with the Editor.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IEditorEventControl">
            <summary>
            Interface for WinForm Controls that will hand off events
            (Click, Hover, etc.) to ObjectManagers for handling.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorValueChangingArgs">
            <summary>
            Event arguments for Winform Controls changing values
            that will interact with the Editor.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.EditorCreatedObjectAttribute">
            <summary>
            Attribute that indicates the class should appear in the SunBurn editor's list of creatable object types.
            
            Note: for the type to appear it must implement either the IEditorCreatedObject or IEditorCreatedModelObject
            interface and have a default constructor.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IEditorActiveObject">
            <summary>
            Interface that provides scenes the ability to display as active / inactive in the editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.IEditorActiveObject.AssetInUse">
            <summary>
            Notifies the editor that the object is currently used for rendering. The editor
            will display unused / inactive objects as grayed-out.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.IEditorValue">
            <summary>
            Represents a changing value to be passed to any
            tied WinForm Controls for processing.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.Undo.IUndoStep">
            <summary>
            Represents an undo step for a specified selection
            of containers.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Editor.Lights.LightType">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.Lights.LightType.None">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.Lights.LightType.Ambient">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.Lights.LightType.Directional">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.Lights.LightType.Point">
            <summary/>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.Lights.LightType.Spot">
            <summary/>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.#ctor(System.String)">
            <summary>
            Creates an instance of TgaReader and loads a specific .tga file.
            </summary>
            <param name="path">The absolute or relative path to the file.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.LoadTga(System.String)">
            <summary>
            Loads a TGA.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.ParseHeader(System.Byte[]@)">
            <summary>
            Parses the information within the tga header.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.LoadRaw(System.Byte[]@)">
            <summary>
            Load data
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.LoadRawRLE(System.Byte[]@)">
            <summary>
            Load data
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.LoadPalette(System.Byte[]@)">
            <summary>
            Load palette
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.FixRGB">
            <summary>
            Convert BGR to RGB
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.Flip">
            <summary>
            Fix flipped tga
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.Path">
            <summary>
            The path to the loaded .tga file.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Editor.Utility.TgaReader.Image">
            <summary>
            The loaded .tga file.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.Windows.ApplyTransformWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Windows.ApplyTransformWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Windows.ApplyTransformWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.UI.ColorSelectWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.UI.ColorSelectWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.UI.ColorSelectWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.UI.ContentPropertiesWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.UI.ContentPropertiesWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.UI.ContentPropertiesWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.UI.EditorWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.UI.EditorWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.UI.EditorWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.Windows.InformationWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Windows.InformationWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Windows.InformationWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.Windows.ModelSelectWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Windows.ModelSelectWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.Windows.ModelSelectWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Editor.UI.TextureWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.UI.TextureWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Editor.UI.TextureWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect">
            <summary>
            Base class that provides data for SunBurn materials (bump, specular, parallax, ...).  Used by the
            forward rendering LightingEffect and deferred rendering DeferredObjectEffect classes.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.BaseSkinnedEffect">
            <summary>
            Provides basic skinned animation rendering support.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.ISkinnedEffect">
            <summary>
            Interface that provides custom effects with skinned animation support.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ISkinnedEffect.SkinBones">
            <summary>
            Array of bone transforms for the skeleton's current pose. The matrix index is the
            same as the bone order used in the model or vertex buffer.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ISkinnedEffect.Skinned">
            <summary>
            Determines if the effect is currently rendering skinned objects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSkinnedEffect.SkinBones">
            <summary>
            Array of bone transforms for the skeleton's current pose. The matrix index is the
            same as the bone order used in the model or vertex buffer.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSkinnedEffect.Skinned">
            <summary>
            Determines if the effect is currently rendering skinned objects.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.IAddressableEffect">
            <summary>
            Interface that provides custom effects with texture addressing support.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IAddressableEffect.AddressModeU">
            <summary>
            Determines the effect's texture address mode in the U texture-space direction.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IAddressableEffect.AddressModeV">
            <summary>
            Determines the effect's texture address mode in the V texture-space direction.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IAddressableEffect.AddressModeW">
            <summary>
            Determines the effect's texture address mode in the W texture-space direction.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.IStaticLightingEffect">
            <summary>
            Interface that provides custom effects with static lighting support.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.IStaticLightingEffect.SetStaticLighting(Microsoft.Xna.Framework.Graphics.Texture2D,SynapseGaming.LightingSystem.Lights.CompositeLighting@)">
            <summary>
            Sets the static lighting applied to the effect during rendering.
            </summary>
            <param name="lightmap">Light map texture containing static
            lighting. If texture is not null the texture will override
            the provided composite lighting.</param>
            <param name="compositelighting">Composite lighting containing
            static lighting.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.ITransparentEffect">
            <summary>
            Interface that provides custom effects with transparency support.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.ITransparentEffect.SetTransparencyModeAndMap(SynapseGaming.LightingSystem.Core.TransparencyMode,System.Single,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets all transparency information at once.  Used to improve performance
            by avoiding multiple effect technique changes.
            </summary>
            <param name="mode">The transparency style used when rendering the effect.</param>
            <param name="transparency">Used with TransparencyMode to determine the effect transparency.
              -For Clipped mode this value is a comparison value, where all TransparencyMap
               alpha values below this value are *not* rendered.</param>
            <param name="map">The texture map used for transparency (values are pulled from the alpha channel).</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ITransparentEffect.TransparencyMode">
            <summary>
            The transparency style used when rendering the effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ITransparentEffect.Transparency">
            <summary>
            Used with TransparencyMode to determine the effect transparency.
              -For Clipped mode this value is a comparison value, where all TransparencyMap
               alpha values below this value are *not* rendered.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ITransparentEffect.TransparencyMap">
            <summary>
            The texture map used for transparency (values are pulled from the alpha channel).
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.SetStaticLighting(Microsoft.Xna.Framework.Graphics.Texture2D,SynapseGaming.LightingSystem.Lights.CompositeLighting@)">
            <summary>
            Sets the static lighting applied to the effect during rendering.
            </summary>
            <param name="lightmap">Light map texture containing static
            lighting. If texture is not null the texture will override
            the provided composite lighting.</param>
            <param name="compositelighting">Composite lighting containing
            static lighting.</param>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._CurrentLight">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._NormalMapTexture">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._DiffuseMapTexture">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._DefaultDiffuseMapTexture">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._DefaultNormalMapTexture">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._DiffuseColorIndirectParam">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._DiffuseMapTextureIndirectParam">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._NormalMapTextureIndirectParam">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._DiffuseColorOriginal">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._DiffuseColorCached">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect._EmissiveColor">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.SetTransparencyModeAndMap(SynapseGaming.LightingSystem.Core.TransparencyMode,System.Single,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets all transparency information at once.  Used to improve performance
            by avoiding multiple effect technique changes.
            </summary>
            <param name="mode">The transparency style used when rendering the effect.</param>
            <param name="transparency">Used with TransparencyMode to determine the effect transparency.
              -For Clipped mode this value is a comparison value, where all TransparencyMap
               alpha values below this value are *not* rendered.</param>
            <param name="map">The texture map used for transparency (values are pulled from the alpha channel).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.SyncTransparency(System.Boolean)">
            <summary>
            Applies the object's transparency information to its effect parameters.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.SyncAmbientLighting(System.Boolean)">
            <summary>
            Clears the effect ambient lighting based on the provided value.
            </summary>
            <param name="clearambient"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.SyncDiffuseAndNormalData(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Applies the provided diffuse information to the object and its effect parameters.
            </summary>
            <param name="diffusecolor"></param>
            <param name="diffusemap"></param>
            <param name="normalmap"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.SetTechnique">
            <summary>
            Sets the effect technique based on its current property values.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
            <summary>
            Creates a new BaseMaterialEffect instance.
            </summary>
            <param name="graphicsdevice"></param>
            <param name="effectname"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Boolean)">
            <summary>
            Creates a new BaseMaterialEffect instance.
            </summary>
            <param name="graphicsdevice"></param>
            <param name="effectname"></param>
            <param name="trackeffect"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Effect and optionally releases the managed resources.
            </summary>
            <param name="releasemanaged"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.Save">
            <summary>
            Saves the object back to its originating file.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.NormalMapTexture">
            <summary>
            Texture normal-map used to apply bump mapping to materials. Setting the
            texture to null disables this feature.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.DiffuseMapTexture">
            <summary>
            Texture used as the primary color map for materials. Generally this texture
            includes shading and lighting information when bump mapping is not used. Setting
            the texture to null disables this feature.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.DiffuseColor">
            <summary>
            Base color applied to materials when no DiffuseMapTexture is specified.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.EmissiveColor">
            <summary>
            Color used to apply emissive lighting and self-illumination to materials.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.SpecularPower">
            <summary>
            Power applied to material specular reflections. Affects how shiny a material appears.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.SpecularAmount">
            <summary>
            Intensity applied to material specular reflections. Affects how intense the specular appears.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.AddressModeU">
            <summary>
            Determines the effect's texture address mode in the U texture-space direction.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.AddressModeV">
            <summary>
            Determines the effect's texture address mode in the V texture-space direction.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.AddressModeW">
            <summary>
            Determines the effect's texture address mode in the W texture-space direction.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.TransparencyMode">
            <summary>
            The transparency style used when rendering the effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.Transparency">
            <summary>
            Used with TransparencyMode to determine the effect transparency.
              -For Clipped mode this value is a comparison value, where all TransparencyMap
               alpha values below this value are *not* rendered.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.TransparencyMap">
            <summary>
            The texture map used for transparency (values are pulled from the alpha channel).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.Elasticity">
            <summary>
            Amount material absorbs impact force.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseMaterialEffect.Friction">
            <summary>
            Amount material resists objects moving across its surface.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.BaseSasEffect">
            <summary>
            Effect class with full support for, and binding of, FX Standard Annotations and Semantics (SAS).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect">
            <summary>
            Base class for effects with automatic support for, and binding of, FX Standard Annotations and Semantics (SAS).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.ParameteredEffect">
            <summary>
            Base class for SAS, XSI, and other effects with shader driven properties.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.ParameteredEffect.SetTransparencyModeAndMap(SynapseGaming.LightingSystem.Core.TransparencyMode,System.Single,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets all transparency information at once.  Used to improve performance
            by avoiding multiple effect technique changes.
            </summary>
            <param name="mode">The transparency style used when rendering the effect.</param>
            <param name="transparency">Used with TransparencyMode to determine the effect transparency.
              -For Clipped mode this value is a comparison value, where all TransparencyMap
               alpha values below this value are *not* rendered.</param>
            <param name="map">The texture map used for transparency (values are pulled from the alpha channel).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.ParameteredEffect.SyncTransparency">
            <summary>
            Applies the object's transparency information to its effect parameters.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.ParameteredEffect.SetTechnique(System.String)">
            <summary>
            Sets the effect technique by name.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.ParameteredEffect.SetTexture(System.String,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets the effect texture by name.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.ParameteredEffect.Save">
            <summary>
            Saves the object back to its originating file.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.ParameteredEffect.Clone">
            <summary>
            Creates a new effect of the same class type, with the same property values, and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.ParameteredEffect.Create">
            <summary>
            Creates a new empty effect of the same class type and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ParameteredEffect.Elasticity">
            <summary>
            Amount material absorbs impact force.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ParameteredEffect.Friction">
            <summary>
            Amount material resists objects moving across its surface.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ParameteredEffect.DoubleSided">
            <summary>
            Surfaces rendered with the effect should be visible from both sides.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ParameteredEffect.TransparencyMode">
            <summary>
            The transparency style used when rendering the effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ParameteredEffect.Transparency">
            <summary>
            Used with TransparencyMode to determine the effect transparency.
              -For Clipped mode this value is a comparison value, where all TransparencyMap
               alpha values below this value are *not* rendered.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ParameteredEffect.TransparencyMap">
            <summary>
            The texture map used for transparency (values are pulled from the alpha channel).
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_World_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldInverse_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldInverseTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldView_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldViewInverse_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldViewTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldViewInverseTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldViewProjection_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldViewProjectionInverse_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldViewProjectionTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_WorldViewProjectionInverseTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_View_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_ViewInverse_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_ViewTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_ViewInverseTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_Projection_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_ProjectionInverse_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_ProjectionTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_ProjectionInverseTranspose_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_NumAmbientLights">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_NumDirectionalLights">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_NumPointLights">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_Camera_Position">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_SkeletonBones_Matrix">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_Time_Now">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_Time_Last">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_Time_FrameNumber">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_AmbientLight_Color">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_DirectionalLight_Color">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_DirectionalLight_Direction">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_PointLight_Color">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_PointLight_Position">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SASAddress_PointLight_Range">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.FindByName(System.String)">
            <summary>
            Finds parameter by shader variable name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.FindBySemantic(System.String)">
            <summary>
            Finds parameter by shader variable semantic.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.FindBySasAddress(System.String)">
            <summary>
            Finds parameter by shader variable bind address.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.BindBySasAddress(Microsoft.Xna.Framework.Graphics.EffectParameter,System.String)">
            <summary>
            Binds parameter to a specific string address. Generally used to remap
            non standard semantics to standard bind addresses.
            </summary>
            <param name="parameter"></param>
            <param name="address"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.BindAllByPartialSasAddress(System.String)">
            <summary>
            Binds all parameters containing a bind address that starts
            with the partial address, to the partial address.
            </summary>
            <param name="partialaddress"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SyncTimeEffectData">
            <summary>
            Applies the current game time information to the bound effect time parameters.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.GameTime">
            <summary>
            The current game time used by animated materials.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SasAutoBindTable">
            <summary>
            Maintains a table of string addresses and their bound effect parameter lists.
            Used to tie any number of similar parameters using different names, semantics,
            and bind addresses to the same single address.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SasBindTable">
            <summary>
            Maintains a table of string addresses and their bound effect parameter lists.
            Used to tie any number of similar parameters using different names, semantics,
            and bind addresses to the same single address.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SasBindTable.Add(System.String,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Adds an effect parameter to the string address.
            </summary>
            <param name="bindaddress"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SasBindTable.Find(System.String)">
            <summary>
            Finds all effect parameters for a string address.
            </summary>
            <param name="bindaddress"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasBindEffect.SasBindTable.Clear">
            <summary>
            Clears the bind table.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasEffect.SetStaticLighting(Microsoft.Xna.Framework.Graphics.Texture2D,SynapseGaming.LightingSystem.Lights.CompositeLighting@)">
            <summary>
            Sets the static lighting applied to the effect during rendering.
            </summary>
            <param name="lightmap">Light map texture containing static
            lighting. If texture is not null the texture will override
            the provided composite lighting.</param>
            <param name="compositelighting">Composite lighting containing
            static lighting.</param>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.BaseSasEffect.EffectByteCode">
            <summary/>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasEffect.SetWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Sets both the world and inverse world matrices.  Used to improve
            performance in effects that automatically generate an inverse
            world matrix when the world matrix is set, by providing a cached
            or precalculated inverse matrix with the world matrix.
            </summary>
            <param name="world">World matrix applied to geometry using this effect.</param>
            <param name="worldtoobj">Inverse world matrix applied to geometry using this effect.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasEffect.SetViewAndProjection(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets both the view, projection, and their inverse matrices.  Used to improve
            performance in effects that automatically generate an inverse
            matrix when the view and project are set, by providing a cached
            or precalculated inverse matrix with the view and project matrices.
            </summary>
            <param name="view">View matrix applied to geometry using this effect.</param>
            <param name="viewtoworld">Inverse view matrix applied to geometry using this effect.</param>
            <param name="projection">Projection matrix applied to geometry using this effect.</param>
            <param name="projectiontoview">Inverse projection matrix applied to geometry using this effect.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasEffect.SetTechnique">
            <summary>
            Sets the effect technique based on its current property values.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasEffect.SyncTransformEffectData">
            <summary>
            Applies the current transform information to the bound effect parameters.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasEffect.SyncSkinBoneEffectData">
            <summary>
            Applies the current bone transform information to the bound effect parameters.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseSasEffect.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Effect and optionally releases the managed resources.
            </summary>
            <param name="releasemanaged"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasEffect.World">
            <summary>
            World matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasEffect.View">
            <summary>
            View matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasEffect.Projection">
            <summary>
            Projection matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasEffect.ProjectionToView">
            <summary>
            Inverse projection matrix applied to geometry using this effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasEffect.EffectDetail">
            <summary>
            Applies the user's effect preference. This generally trades detail
            for performance based on the user's selection.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasEffect.SkinBones">
            <summary>
            Array of bone transforms for the skeleton's current pose. The matrix index is the
            same as the bone order used in the model or vertex buffer.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasEffect.Skinned">
            <summary>
            Determines if the effect is currently rendering skinned objects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasEffect.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseSasEffect.SkinBonesEffectParameter">
            <summary>
            Effect parameter used to set the bone transform array.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.ITerrainEffect">
            <summary>
            Interface that provides effects with terrain rendering support.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ITerrainEffect.HeightMapTexture">
            <summary>
            Texture containing height values used to displace a terrain mesh. Also used
            for low frequency lighting.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ITerrainEffect.HeightScale">
            <summary>
            Adjusts the terrain displacement magnitude.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ITerrainEffect.Tiling">
            <summary>
            Adjusts the number of times the height map tiles across a terrain's
            mesh. Similar to uv scale when texture mapping.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ITerrainEffect.MeshSegments">
            <summary>
            Density or tessellation of the terrain mesh.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect">
            <summary>
            Base class that provides data for rendering SunBurn's terrain.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
            <summary>
            Creates a new BaseTerrainEffect instance.
            </summary>
            <param name="graphicsdevice"></param>
            <param name="effectname"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Boolean)">
            <summary>
            Creates a new BaseTerrainEffect instance.
            </summary>
            <param name="graphicsdevice"></param>
            <param name="effectname"></param>
            <param name="trackeffect"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Effect and optionally releases the managed resources.
            </summary>
            <param name="releasemanaged"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.DiffuseMapLayer1Texture">
            <summary>
            Diffuse texture used in blend mapping (associated with the Red
            blend map texture channel).
            
            For optimal performance always use the lowest layers first (for instance:
            if using two layers use layer 1 and layer 2).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.DiffuseMapLayer2Texture">
            <summary>
            Diffuse texture used in blend mapping (associated with the Green
            blend map texture channel).
            
            For optimal performance always use the lowest layers first (for instance:
            if using two layers use layer 1 and layer 2).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.DiffuseMapLayer3Texture">
            <summary>
            Diffuse texture used in blend mapping (associated with the Blue
            blend map texture channel).
            
            For optimal performance always use the lowest layers first (for instance:
            if using two layers use layer 1 and layer 2).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.DiffuseMapLayer4Texture">
            <summary>
            Diffuse texture used in blend mapping (associated with the Alpha
            blend map texture channel).
            
            For optimal performance always use the lowest layers first (for instance:
            if using two layers use layer 1 and layer 2).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.NormalMapLayer1Texture">
            <summary>
            Normal map texture used in blend mapping (associated with the Red
            blend map texture channel).
            
            For optimal performance always use the lowest layers first (for instance:
            if using two layers use layer 1 and layer 2).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.NormalMapLayer2Texture">
            <summary>
            Normal map texture used in blend mapping (associated with the Green
            blend map texture channel).
            
            For optimal performance always use the lowest layers first (for instance:
            if using two layers use layer 1 and layer 2).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.NormalMapLayer3Texture">
            <summary>
            Normal map texture used in blend mapping (associated with the Blue
            blend map texture channel).
            
            For optimal performance always use the lowest layers first (for instance:
            if using two layers use layer 1 and layer 2).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.NormalMapLayer4Texture">
            <summary>
            Normal map texture used in blend mapping (associated with the Alpha
            blend map texture channel).
            
            For optimal performance always use the lowest layers first (for instance:
            if using two layers use layer 1 and layer 2).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.HeightMapTexture">
            <summary>
            Texture containing height values used to displace a terrain mesh. Also used
            for low frequency lighting.
            
            Requires a HalfSingle format texture.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.BlendMapTexture">
            <summary>
            Texture containing intensity values used to blend diffuse and normal map textures
            into the final material. Each texture channel (Red, Green, Blue, Alpha) controls
            a terrain texture layer (layer 1, 2, 3, 4).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.NormalMapStrength">
            <summary>
            Controls the depth or detail level of low frequency lighting on a terrain.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.DiffuseScale">
            <summary>
            Adjusts the number of times the blend mapped materials tile across a terrain's
            mesh. Similar to uv scale when texture mapping.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.HeightScale">
            <summary>
            Adjusts the terrain displacement magnitude.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.Tiling">
            <summary>
            Adjusts the number of times the height map tiles across a terrain's
            mesh. Similar to uv scale when texture mapping.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.SpecularPower">
            <summary>
            Power applied to material specular reflections. Affects how shiny a material appears.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.SpecularAmount">
            <summary>
            Intensity applied to material specular reflections. Affects how intense the specular appears.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.SpecularColor">
            <summary>
            Color applied to material specular reflections.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.BaseTerrainEffect.MeshSegments">
            <summary>
            Density or tessellation of the terrain mesh.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.EffectData">
            <summary>
            Provides direct access to effect byte code.
            
            Used to fix issues with XNA 4.0 effects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectData.#ctor(System.Byte[])">
            <summary>
            Creates an EffectData instance.
            </summary>
            <param name="bytecode">Effect byte code used to construct new effect objects.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectData.Dispose">
            <summary>
            Releases unmanaged resources used by the EffectData.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.EffectData.ByteCode">
            <summary>
            Effect byte code used to construct new effect objects.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.Forward.SasLightingEffect">
            <summary>
            Effect class with complete support for, and binding of, FX Standard Annotations and Semantics (SAS).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.Forward.SasEffect">
            <summary>
            Effect class with full non-lighting support for, and binding of, FX Standard Annotations and Semantics (SAS).
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.SasEffect.Create">
            <summary>
            Creates a new empty effect of the same class type and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.ILightingEffect">
            <summary>
            Interface that provides custom effects with RenderManager lighting support.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ILightingEffect.MaxLightSources">
            <summary>
            Maximum number of light sources the effect supports.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.ILightingEffect.LightSources">
            <summary>
            Light sources that apply lighting to the effect during rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.SasLightingEffect.SetMaxLightCount(System.Int32)">
            <summary>
            Sets the max light count supported by the effect.
            </summary>
            <param name="maxlights"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.SasLightingEffect.FindMaxLightCount">
            <summary>
            Finds the max light count supported by the effect's shader.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.SasLightingEffect.SyncLightSourceEffectData">
            <summary>
            Applies the current lighting information to the bound effect parameters.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.SasLightingEffect.Create">
            <summary>
            Creates a new empty effect of the same class type and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.SasLightingEffect.MaxLightSources">
            <summary>
            Maximum number of light sources the effect supports.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.SasLightingEffect.LightSources">
            <summary>
            Light sources that apply lighting to the effect during rendering.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.Forward.TerrainEffect">
            <summary>
            Provides SunBurn's built-in forward terrain rendering.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.Forward.TerrainEffect.MaxLightCount">
            <summary>
            Maximum number of lights this effect can support in a single rendering pass.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.TerrainEffect.SetTechnique">
            <summary>
            Sets the effect technique based on its current property values.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.TerrainEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new TerrainEffect instance.
            </summary>
            <param name="graphicsdevice"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.TerrainEffect.Create">
            <summary>
            Creates a new empty effect of the same class type and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.TerrainEffect.MaxLightSources">
            <summary>
            Maximum number of light sources the effect supports.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.TerrainEffect.LightSources">
            <summary>
            Light sources that apply lighting to the effect during rendering.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.Forward.XSIEffect">
            <summary>
            Provides support for XSI shaders.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.XSIEffect.SetTechnique">
            <summary>
            Sets the effect technique based on its current property values.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.XSIEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Byte[])">
            <summary>
            Creates a new XSIEffect instance from an effect containing an XSI shader
            (often loaded through the content pipeline or from disk).
            </summary>
            <param name="graphicsdevice"></param>
            <param name="effectbytecode"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.Resources_Framework">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Resources_Framework.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Resources_Framework.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.EffectHelper">
            <summary>
            Provides methods that help with effect setup and data synchronization.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectHelper.SyncMatrixEffectData(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.EffectParameter@)">
            <summary>
            Synchronizes an EffectParameter's data if the new value differs from the previous.
            </summary>
            <param name="newdata">New value assigned to the EffectParameter.</param>
            <param name="cachedata">Member that contains the previous value.</param>
            <param name="effectparam">EffectParameter to set.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectHelper.SyncMatrixWithInverseEffectData(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.EffectParameter@,Microsoft.Xna.Framework.Graphics.EffectParameter@)">
            <summary>
            Synchronizes an EffectParameter's data if the new value differs from the previous.
            Automatically creates an inverse of the new matrix, which is assigned to the inverse EffectParameter.
            </summary>
            <param name="newdata">New value assigned to the EffectParameter.</param>
            <param name="cachedata">Member that contains the previous value.</param>
            <param name="inversecachedata">Member that contains the previous inverse value.</param>
            <param name="effectparam">EffectParameter to set.</param>
            <param name="inverseeffectparam">Inverse EffectParameter to set.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectHelper.SyncVector4EffectData(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Graphics.EffectParameter@)">
            <summary>
            Synchronizes an EffectParameter's data if the new value differs from the previous.
            </summary>
            <param name="newdata">New value assigned to the EffectParameter.</param>
            <param name="cachedata">Member that contains the previous value.</param>
            <param name="effectparam">EffectParameter to set.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectHelper.SyncTexture2DEffectData(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D@,Microsoft.Xna.Framework.Graphics.EffectParameter@)">
            <summary>
            Synchronizes an EffectParameter's data if the new value differs from the previous.
            </summary>
            <param name="newdata">New value assigned to the EffectParameter.</param>
            <param name="cachedata">Member that contains the previous value.</param>
            <param name="effectparam">EffectParameter to set.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectHelper.SyncObjectAndShadowEffects(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Synchronizes all recognized object effect properties with the shadow effect.
            Allows shadow effects to support material transparency.
            </summary>
            <param name="objeffect">The object's effect</param>
            <param name="shadoweffect">The shadow effect</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectTechniqueNameAssembler.GetTechniqueName(SynapseGaming.LightingSystem.Effects.EffectTechniqueNameAssembler.Type,SynapseGaming.LightingSystem.Effects.EffectTechniqueNameAssembler.Effect,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary />
            <param name="type"></param>
            <param name="effects"></param>
            <param name="lightcount"></param>
            <param name="doublesided">Only controls double sided LIGHTING, not the culling, only supported on ps 3.0 and needed ONLY by diffuse lighting pass.</param>
            <param name="transparent"></param>
            <param name="skinned"></param>
            <param name="terrain"></param>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.Forward.LightingEffect">
            <summary>
            Effect provides SunBurn's built-in lighting and material support.
            
            Including:
            -Diffuse mapping
            -Bump mapping
            -Specular mapping (with specular intensity mapping)
            -Point, spot, directional, and ambient lighting
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.Forward.LightingEffect.MaxLightCount">
            <summary>
            Maximum number of lights this effect can support in a single rendering pass.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.LightingEffect.SyncAmbientLighting(System.Boolean)">
            <summary>
            Clears the effect ambient lighting based on the provided value.
            </summary>
            <param name="clearambient"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.LightingEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new LightingEffect instance.
            </summary>
            <param name="graphicsdevice"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.LightingEffect.Create">
            <summary>
            Creates a new empty effect of the same class type and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.LightingEffect.MaxLightSources">
            <summary>
            Maximum number of light sources the effect supports.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.LightingEffect.LightSources">
            <summary>
            Light sources that apply lighting to the effect during rendering.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.Forward.FogEffect">
            <summary>
            Effect provides per-pixel fog.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.SetTechnique">
            <summary>
            Sets the effect technique based on its current property values.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new FogEffect instance.
            </summary>
            <param name="graphicsdevice"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.Create">
            <summary>
            Creates a new empty effect of the same class type and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.StartDistance">
            <summary>
            Distance from the camera in world space that fog begins.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.EndDistance">
            <summary>
            Distance from the camera in world space that fog ends.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.Color">
            <summary>
            Color of the applied fog.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.HeightMapTexture">
            <summary>
            Texture containing height values used to displace a terrain mesh. Also used
            for low frequency lighting.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.HeightScale">
            <summary>
            Adjusts the terrain displacement magnitude.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.Tiling">
            <summary>
            Adjusts the number of times the height map tiles across a terrain's
            mesh. Similar to uv scale when texture mapping.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.FogEffect.MeshSegments">
            <summary>
            Density or tessellation of the terrain mesh.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.IShadowGenerateEffect">
            <summary>
            Interface that provides custom effects with shadow map generation support.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.IShadowGenerateEffect.SetCameraView(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets the camera view and inverse camera view matrices. These are the matrices used in the final
            on-screen render from the camera / player point of view.
            
            These matrices will differ from the standard view and inverse view matrices when rendering from
            an alternate point of view (for instance during shadow map and cube map generation).
            </summary>
            <param name="view">Camera view matrix applied to geometry using this effect.</param>
            <param name="viewtoworld">Camera inverse view matrix applied to geometry using this effect.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IShadowGenerateEffect.SupportsShadowGeneration">
            <summary>
            Determines if the effect is capable of generating shadow maps. Objects using effects unable to
            generate shadow maps automatically use the built-in shadow effect, however this puts
            heavy restrictions on how the effects handle rendering (only basic vertex transforms are supported).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IShadowGenerateEffect.ShadowPrimaryBias">
            <summary>
            Main property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IShadowGenerateEffect.ShadowSecondaryBias">
            <summary>
            Additional fine-tuned property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IShadowGenerateEffect.ShadowArea">
            <summary>
            Bounding area of the shadow source, where the bounds center is the actual shadow source location,
            and the radius is either the source radius (for point sources) or the maximum view based casting
            distance (for directional sources).
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.SetCameraView(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets the camera view and inverse camera view matrices. These are the matrices used in the final
            on-screen render from the camera / player point of view.
            
            These matrices will differ from the standard view and inverse view matrices when rendering from
            an alternate point of view (for instance during shadow map and cube map generation).
            </summary>
            <param name="view">Camera view matrix applied to geometry using this effect.</param>
            <param name="viewtoworld">Camera inverse view matrix applied to geometry using this effect.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.SetTechnique">
            <summary>
            Sets the effect technique based on its current property values.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new ShadowEffect instance.
            </summary>
            <param name="graphicsdevice"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.Create">
            <summary>
            Creates a new empty effect of the same class type and using the same effect file as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.TransparencyMode">
            <summary>
            The transparency style used when rendering the effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.Transparency">
            <summary>
            Used with TransparencyMode to determine the effect transparency.
              -For Clipped mode this value is a comparison value, where all TransparencyMap
               alpha values below this value are *not* rendered.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.TransparencyMap">
            <summary>
            The texture map used for transparency (values are pulled from the alpha channel).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.AddressModeU">
            <summary>
            Determines the effect's texture address mode in the U texture-space direction.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.AddressModeV">
            <summary>
            Determines the effect's texture address mode in the V texture-space direction.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.AddressModeW">
            <summary>
            Determines the effect's texture address mode in the W texture-space direction.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.HeightMapTexture">
            <summary>
            Texture containing height values used to displace a terrain mesh. Also used
            for low frequency lighting.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.HeightScale">
            <summary>
            Adjusts the terrain displacement magnitude.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.Tiling">
            <summary>
            Adjusts the number of times the height map tiles across a terrain's
            mesh. Similar to uv scale when texture mapping.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.Forward.ShadowEffect.MeshSegments">
            <summary>
            Density or tessellation of the terrain mesh.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.DeferredEffectOutput">
            <summary>
            Determines the type of shader output deferred object rendering effects will generate.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.DeferredEffectOutput.Depth">
            <summary>
            Renders the z-fill optimization pass.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.DeferredEffectOutput.GBuffer">
            <summary>
            Renders the g-buffer generation pass.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.DeferredEffectOutput.ShadowDepth">
            <summary>
            Renders the shadow map depth.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Effects.DeferredEffectOutput.Final">
            <summary>
            Renders the final image composition pass.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.WP7.EffectDirtyFlags">
            <summary>
            Track which effect parameters need to be recomputed during the next OnApply.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.WP7.EffectHelpers">
            <summary>
            Helper code shared between the various built-in effects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.WP7.EffectHelpers.EnableDefaultLighting(Microsoft.Xna.Framework.Graphics.DirectionalLight,Microsoft.Xna.Framework.Graphics.DirectionalLight,Microsoft.Xna.Framework.Graphics.DirectionalLight)">
            <summary>
            Sets up the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.SunBurnBasicEffect">
            <summary>
            Used to fix issues with XNA 4.0 effects.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.IExtendedXNAEffect">
            <summary>
            Interface that provides basic material properties to XNA built-in effects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.IExtendedXNAEffect.DoubleSided">
            <summary>
            Surfaces rendered with the effect should be visible from both sides.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnBasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a SunBurnBasicEffect instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnBasicEffect.Clone">
            <summary>
            Creates a clone of the current effect instance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnBasicEffect.DoubleSided">
            <summary>
            Surfaces rendered with the effect should be visible from both sides.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnBasicEffect.Elasticity">
            <summary>
            Amount material absorbs impact force.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnBasicEffect.Friction">
            <summary>
            Amount material resists objects moving across its surface.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new BasicEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.Clone">
            <summary>
            Creates a clone of the current effect instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.EnableDefaultLighting">
            <summary>
            Sets up the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.CacheEffectParameters(Microsoft.Xna.Framework.Graphics.BasicEffect)">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.OnApply">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.EmissiveColor">
            <summary>
            Gets or sets the material emissive color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.SpecularColor">
            <summary>
            Gets or sets the material specular color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.SpecularPower">
            <summary>
            Gets or sets the material specular power.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.LightingEnabled">
            <summary>
            Gets or sets the lighting enable flag.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.PreferPerPixelLighting">
            <summary>
            Gets or sets the per-pixel lighting prefer flag.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color (range 0 to 1).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.DirectionalLight0">
            <summary>
            Gets the first directional light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.DirectionalLight1">
            <summary>
            Gets the second directional light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.DirectionalLight2">
            <summary>
            Gets the third directional light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.TextureEnabled">
            <summary>
            Gets or sets whether texturing is enabled.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.Texture">
            <summary>
            Gets or sets the current texture.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.WP7.SunBurnFastBasicEffect.VertexColorEnabled">
            <summary>
            Gets or sets whether vertex color is enabled.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.SunBurnAlphaTestEffect">
            <summary>
            Used to fix issues with XNA 4.0 effects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnAlphaTestEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a SunBurnAlphaTestEffect instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnAlphaTestEffect.Clone">
            <summary>
            Creates a clone of the current effect instance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnAlphaTestEffect.DoubleSided">
            <summary>
            Surfaces rendered with the effect should be visible from both sides.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnAlphaTestEffect.Elasticity">
            <summary>
            Amount material absorbs impact force.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnAlphaTestEffect.Friction">
            <summary>
            Amount material resists objects moving across its surface.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.SunBurnDualTextureEffect">
            <summary>
            Used to fix issues with XNA 4.0 effects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnDualTextureEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a SunBurnDualTextureEffect instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnDualTextureEffect.Clone">
            <summary>
            Creates a clone of the current effect instance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnDualTextureEffect.DoubleSided">
            <summary>
            Surfaces rendered with the effect should be visible from both sides.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnDualTextureEffect.Elasticity">
            <summary>
            Amount material absorbs impact force.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnDualTextureEffect.Friction">
            <summary>
            Amount material resists objects moving across its surface.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.SunBurnEnvironmentMapEffect">
            <summary>
            Used to fix issues with XNA 4.0 effects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnEnvironmentMapEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a SunBurnEnvironmentMapEffect instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnEnvironmentMapEffect.Clone">
            <summary>
            Creates a clone of the current effect instance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnEnvironmentMapEffect.DoubleSided">
            <summary>
            Surfaces rendered with the effect should be visible from both sides.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnEnvironmentMapEffect.Elasticity">
            <summary>
            Amount material absorbs impact force.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnEnvironmentMapEffect.Friction">
            <summary>
            Amount material resists objects moving across its surface.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.SunBurnSkinnedEffect">
            <summary>
            Used to fix issues with XNA 4.0 effects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnSkinnedEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a SunBurnSkinnedEffect instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.SunBurnSkinnedEffect.Clone">
            <summary>
            Creates a clone of the current effect instance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnSkinnedEffect.DoubleSided">
            <summary>
            Surfaces rendered with the effect should be visible from both sides.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnSkinnedEffect.Elasticity">
            <summary>
            Amount material absorbs impact force.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Effects.SunBurnSkinnedEffect.Friction">
            <summary>
            Amount material resists objects moving across its surface.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.AmbientLight">
            <summary>
            Provides ambient light information for rendering lighting.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.BaseLight">
            <summary>
            Abstract class that provides the base properties required for all light types.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.ILight">
            <summary>
            Interface that provides basic lighting information for all lights.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILight.Enabled">
            <summary>
            Turns illumination on and off without removing the light from the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILight.LightingType">
            <summary>
            Determines if the lighting is real-time or bake-down.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILight.DiffuseColor">
            <summary>
            Direct lighting color given off by the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILight.Intensity">
            <summary>
            Intensity of the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILight.FillLight">
            <summary>
            Provides softer indirect-like illumination without "hot-spots".
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILight.FalloffStrength">
            <summary>
            Controls how quickly lighting falls off over distance (only available in deferred rendering).
            Value ranges from 0.0f to 1.0f.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILight.CompositeColorAndIntensity">
            <summary>
            The combined light color and intensity (provided for convenience).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILight.ShadowSource">
            <summary>
            Shadow source the light's shadows are generated from.
            Allows sharing shadows between point light sources.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILight.WorldBoundingSphere">
            <summary>
            Bounding area of the light's influence.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLight.#ctor">
            <summary>
            Creates a new BaseLight instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLight.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the object using the provided game time.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLight.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLight.Clone">
            <summary>
            Deep clones the object including any contained sub-objects and components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLight.Create">
            <summary>
            Creates a new instance of the object type. This method assumes the type has a
            default constructor. If the type does not have a default constructor this method
            can be overridden to manually create the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLight.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLight.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="E:SynapseGaming.LightingSystem.Lights.BaseLight.UpdateEvent">
            <summary>
            Event used to update the light at regular intervals. This and all
            events are only called on dynamic lights.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.Enabled">
            <summary>
            Turns illumination on and off without removing the light from the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.LightingType">
            <summary>
            Determines if the lighting is real-time or bake-down.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.DiffuseColor">
            <summary>
            Direct lighting color given off by the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.Intensity">
            <summary>
            Intensity of the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.FillLight">
            <summary>
            Provides softer indirect-like illumination without "hot-spots".
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.FalloffStrength">
            <summary>
            Controls how quickly lighting falls off over distance (only available in deferred rendering).
            Value ranges from 0.0f to 1.0f.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.CompositeColorAndIntensity">
            <summary>
            The combined light color and intensity (provided for convenience).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.WorldBoundingBox">
            <summary>
            Bounding area of the light's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.WorldBoundingSphere">
            <summary>
            Bounding area of the light's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.ShadowSource">
            <summary>
            Shadow source the light's shadows are generated from.
            Allows sharing shadows between point light sources.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.World">
            <summary>
            World space transform of the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.UniqueId">
            <summary>
            Unique id used to identify the object across multiple scene loads / reloads.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.InfiniteBounds">
            <summary>
            Indicates the object bounding area spans the entire world and
            the object is always visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.MoveId">
            <summary>
            Indicates the current move. This value increments each time the object
            is moved (when the World transform changes).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.UpdateType">
            <summary>
            Determines if objects receive update events from the engine and are tracked
            by the scenegraph.
            
            Automatic update events are necessary to be affected by gravity, for
            components, and for the scenegraph to track moving objects.  Objects without
            Automatic update events can still move, however the containing scenegraph
            (ObjectManager or LightManager) must be notified using Manager.Move(object).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.Name">
            <summary>
            The object's current name.
            
            Important note: Name can be changed at any time, HOWEVER managers
            will only see the change after removing and resubmitting the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLight.Components">
            <summary>
            Container that stores, manages, and updates the object's components.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.IAmbientSource">
            <summary>
            Interface that provides ambient lighting information.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.IAmbientSource.Depth">
            <summary>
            Increases the detail of normal mapped surfaces during the ambient lighting pass (deferred rendering only).
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.AmbientLight.#ctor">
            <summary>
            Creates a new AmbientLight instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.AmbientLight.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.AmbientLight.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.AmbientLight.LightingType">
            <summary>
            Determines if the lighting is real-time or bake-down.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.AmbientLight.FillLight">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.AmbientLight.FalloffStrength">
            <summary>
            Controls how quickly lighting falls off over distance (unused in this light type).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.AmbientLight.InfiniteBounds">
            <summary>
            Indicates the object bounding area spans the entire world and
            the object is always visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.AmbientLight.ShadowSource">
            <summary>
            Shadow source the light's shadows are generated from.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.AmbientLight.World">
            <summary>
            World space transform of the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.AmbientLight.MoveId">
            <summary>
            Indicates the current move. This value increments each time the object
            is moved (when the World transform changes).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.AmbientLight.Depth">
            <summary>
            Increases the detail of normal mapped surfaces during the ambient lighting pass (deferred rendering only).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.BaseLightManager">
            <summary>
            Manages all scene lights and allows querying the scene with
            a view or bounding box for lights that affect the area
            (acts as a light scenegraph).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.ILightQuery">
            <summary>
            Provides an interface for retrieving lights contained in a volume from a scenegraph.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightQuery.GetCompositeLighting(Microsoft.Xna.Framework.BoundingBox,System.Single,SynapseGaming.LightingSystem.Lights.LightingType)">
            <summary>
            Generates approximate lighting for an area in world space. The returned composite
            lighting is packed into a single directional and ambient light for fast single-pass lighting.
            
            Note: because this information is approximated smaller world space areas will
            result in more accurate lighting. Also the approximation is calculated on the
            cpu and cannot take into account shadowing.
            </summary>
            <param name="worldbounds">Bounding area used to determine approximate lighting.</param>
            <param name="ambientblend">Blending value (0.0f - 1.0f) that determines how much approximate lighting
            contributes to ambient lighting. Approximate lighting can create highly directional lighting, using
            a higher blending value can create softer, more realistic lighting.</param>
            <param name="lightingtype">Light types to include in approximate lighting.</param>
            <returns>Composite lighting packed into a single directional and ambient light.</returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightQuery.GetCompositeLighting(Microsoft.Xna.Framework.BoundingBox@,System.Single,SynapseGaming.LightingSystem.Lights.LightingType,SynapseGaming.LightingSystem.Lights.CompositeLighting@)">
            <summary>
            Generates approximate lighting for an area in world space. The returned composite
            lighting is packed into a single directional and ambient light for fast single-pass lighting.
            
            Note: because this information is approximated smaller world space areas will
            result in more accurate lighting. Also the approximation is calculated on the
            cpu and cannot take into account shadowing.
            </summary>
            <param name="worldbounds">Bounding area used to determine approximate lighting.</param>
            <param name="ambientblend">Blending value (0.0f - 1.0f) that determines how much approximate lighting
            contributes to ambient lighting. Approximate lighting can create highly directional lighting, using
            a higher blending value can create softer, more realistic lighting.</param>
            <param name="lightingtype">Light types to include in approximate lighting.</param>
            <param name="compositelighting">Composite lighting packed into a single directional and ambient light.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightQuery.GetCompositeLighting(System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},Microsoft.Xna.Framework.BoundingBox,System.Single)">
            <summary>
            Generates approximate lighting for an area in world space using a custom set of lights.
            The returned composite lighting is packed into a single directional and ambient light for
            fast single-pass lighting.
            
            Note: because this information is approximated smaller world space areas will
            result in more accurate lighting. Also the approximation is calculated on the
            cpu and cannot take into account shadowing.
            </summary>
            <param name="sourcelights">Lights used to generate approximate lighting.</param>
            <param name="worldbounds">Bounding area used to determine approximate lighting.</param>
            <param name="ambientblend">Blending value (0.0f - 1.0f) that determines how much approximate lighting
            contributes to ambient lighting. Approximate lighting can create highly directional lighting, using
            a higher blending value can create softer, more realistic lighting.</param>
            <returns>Composite lighting packed into a single directional and ambient light.</returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightQuery.GetCompositeLighting(System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},Microsoft.Xna.Framework.BoundingBox@,System.Single,SynapseGaming.LightingSystem.Lights.CompositeLighting@)">
            <summary>
            Generates approximate lighting for an area in world space using a custom set of lights.
            The returned composite lighting is packed into a single directional and ambient light for
            fast single-pass lighting.
            
            Note: because this information is approximated smaller world space areas will
            result in more accurate lighting. Also the approximation is calculated on the
            cpu and cannot take into account shadowing.
            </summary>
            <param name="sourcelights">Lights used to generate approximate lighting.</param>
            <param name="worldbounds">Bounding area used to determine approximate lighting.</param>
            <param name="ambientblend">Blending value (0.0f - 1.0f) that determines how much approximate lighting
            contributes to ambient lighting. Approximate lighting can create highly directional lighting, using
            a higher blending value can create softer, more realistic lighting.</param>
            <param name="compositelighting">Composite lighting packed into a single directional and ambient light.</param>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.BaseLightManager.SceneState">
            <summary>
            Current scene state information provided to BeginFrameRendering (only valid between calls to BeginFrameRendering and EndFrameRendering).
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.BaseLightManager.ServiceProvider">
            <summary>
            Service provider used to access scene managers.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.#ctor(SynapseGaming.LightingSystem.Core.IManagerServiceProvider,Microsoft.Xna.Framework.BoundingBox,System.Int32)">
            <summary>
            Creates a new BaseLightManager instance.
            </summary>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
            <param name="worldboundingbox">The smallest bounding area that completely
            contains the scene. Helps the LightManager build an optimal scene tree.</param>
            <param name="worldtreemaxdepth">Maximum depth for entries in the scene tree. Small
            scenes with few objects see better performance with shallow trees. Large complex
            scenes often need deeper trees.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.#ctor(SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a new BaseLightManager instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.Find(System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},Microsoft.Xna.Framework.BoundingFrustum,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            
            Note: list will contain null entries when objects returned by the
            scenegraph are removed by the object filter.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.Find(System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},Microsoft.Xna.Framework.BoundingBox,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            
            Note: list will contain null entries when objects returned by the
            scenegraph are removed by the object filter.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.Find(System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes.
            
            Note: list will contain null entries when objects returned by the
            scenegraph are removed by the object filter.
            </summary>
            <param name="foundobjects">List used to store found objects during the query.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.GetCompositeLighting(Microsoft.Xna.Framework.BoundingBox,System.Single,SynapseGaming.LightingSystem.Lights.LightingType)">
            <summary>
            Generates approximate lighting for an area in world space. The returned composite
            lighting is packed into a single directional and ambient light for fast single-pass lighting.
            
            Note: because this information is approximated smaller world space areas will
            result in more accurate lighting. Also the approximation is calculated on the
            cpu and cannot take into account shadowing.
            </summary>
            <param name="worldbounds">Bounding area used to determine approximate lighting.</param>
            <param name="ambientblend">Blending value (0.0f - 1.0f) that determines how much approximate lighting
            contributes to ambient lighting. Approximate lighting can create highly directional lighting, using
            a higher blending value can create softer, more realistic lighting.</param>
            <param name="lightingtype">Light types to include in approximate lighting.</param>
            <returns>Composite lighting packed into a single directional and ambient light.</returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.GetCompositeLighting(Microsoft.Xna.Framework.BoundingBox@,System.Single,SynapseGaming.LightingSystem.Lights.LightingType,SynapseGaming.LightingSystem.Lights.CompositeLighting@)">
            <summary>
            Generates approximate lighting for an area in world space. The returned composite
            lighting is packed into a single directional and ambient light for fast single-pass lighting.
            
            Note: because this information is approximated smaller world space areas will
            result in more accurate lighting. Also the approximation is calculated on the
            cpu and cannot take into account shadowing.
            </summary>
            <param name="worldbounds">Bounding area used to determine approximate lighting.</param>
            <param name="ambientblend">Blending value (0.0f - 1.0f) that determines how much approximate lighting
            contributes to ambient lighting. Approximate lighting can create highly directional lighting, using
            a higher blending value can create softer, more realistic lighting.</param>
            <param name="lightingtype">Light types to include in approximate lighting.</param>
            <param name="compositelighting">Composite lighting packed into a single directional and ambient light.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.GetCompositeLighting(System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},Microsoft.Xna.Framework.BoundingBox,System.Single)">
            <summary>
            Generates approximate lighting for an area in world space using a custom set of lights.
            The returned composite lighting is packed into a single directional and ambient light for
            fast single-pass lighting.
            
            Note: because this information is approximated smaller world space areas will
            result in more accurate lighting. Also the approximation is calculated on the
            cpu and cannot take into account shadowing.
            </summary>
            <param name="sourcelights">Lights used to generate approximate lighting.</param>
            <param name="worldbounds">Bounding area used to determine approximate lighting.</param>
            <param name="ambientblend">Blending value (0.0f - 1.0f) that determines how much approximate lighting
            contributes to ambient lighting. Approximate lighting can create highly directional lighting, using
            a higher blending value can create softer, more realistic lighting.</param>
            <returns>Composite lighting packed into a single directional and ambient light.</returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.GetCompositeLighting(System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},Microsoft.Xna.Framework.BoundingBox@,System.Single,SynapseGaming.LightingSystem.Lights.CompositeLighting@)">
            <summary>
            Generates approximate lighting for an area in world space using a custom set of lights.
            The returned composite lighting is packed into a single directional and ambient light for
            fast single-pass lighting.
            
            Note: because this information is approximated smaller world space areas will
            result in more accurate lighting. Also the approximation is calculated on the
            cpu and cannot take into account shadowing.
            </summary>
            <param name="sourcelights">Lights used to generate approximate lighting.</param>
            <param name="worldbounds">Bounding area used to determine approximate lighting.</param>
            <param name="ambientblend">Blending value (0.0f - 1.0f) that determines how much approximate lighting
            contributes to ambient lighting. Approximate lighting can create highly directional lighting, using
            a higher blending value can create softer, more realistic lighting.</param>
            <param name="compositelighting">Composite lighting packed into a single directional and ambient light.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.ILightMapManager">
            <summary>
            Interface that provides access to the scene's light map manager. The light map manager
            provides methods for generating, storing, and retrieving light maps.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightMapManager.GetLightMap(SynapseGaming.LightingSystem.Rendering.RenderableMesh)">
            <summary>
            Gets the light map associated with the provided mesh or a default light map if non exists.
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightMapManager.GetLightOcclusionBuffer(SynapseGaming.LightingSystem.Lights.ILight)">
            <summary>
            Gets the light occlusion buffer associated with the provided light or null if non exists.
            </summary>
            <param name="light"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightMapManager.CalculateLighting">
            <summary>
            Generates light maps and occlusion buffers for all light mapped
            objects and bake-down lights in the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightMapManager.SaveLighting">
            <summary>
            Saves generated light maps and occlusion buffers to disk.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.BaseLightMapManager">
            <summary>
            Base manager used for generating light maps.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.GeneratedLightMapSizeChanged">
            <summary>
            Called when GeneratedLightMapSize changes.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a new BaseLightMapManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.Clear">
            <summary>
            Removes all objects from the container. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.GetLightMap(SynapseGaming.LightingSystem.Rendering.RenderableMesh)">
            <summary>
            Gets the light map associated with the provided mesh or a default light map if non exists.
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.GetLightOcclusionBuffer(SynapseGaming.LightingSystem.Lights.ILight)">
            <summary>
            Gets the light occlusion buffer associated with the provided light or null if non exists.
            </summary>
            <param name="light"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.SaveLighting">
            <summary>
            Saves generated light maps and occlusion buffers to disk.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.StoreLightMaps(System.Collections.Generic.Dictionary{System.Int32,SynapseGaming.LightingSystem.Lights.BaseLightMapManager.TargetInfo},System.Int32,System.Int32)">
            <summary>
            Synchronizes data between light maps and their render targets and textures.
            </summary>
            <param name="rendertargets"></param>
            <param name="currentprogress"></param>
            <param name="totalprogress"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.StoreLightOcclusionBuffer(SynapseGaming.LightingSystem.Lights.LightOcclusionBuffer,SynapseGaming.LightingSystem.Lights.ILight)">
            <summary>
            Synchronizes data in the light occlusion buffer.
            </summary>
            <param name="buffer"></param>
            <param name="light"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.CalculateLighting">
            <summary>
            Generates light maps and occlusion buffers for all light mapped
            objects and bake-down lights in the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.GeneratedLightMapSize">
            <summary>
            Sets the size used for the generated light maps.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.TargetInfo">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.TargetInfo.RenderableMesh">
            <summary>
            This is only ONE mesh that uses the unique id, and only used
            to locate the parent object's repository.  All other meshes
            with the same id will also be in the same light map due to
            multisubobject mapping.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.BaseLightMapManager.TargetInfo.RenderTarget">
            <summary>
            Render target used to generate the light map.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.DirectionalLight">
            <summary>
            Provides directional light (sunlight) information for rendering lighting and shadows.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.IDirectionalSource">
            <summary>
            Interface that provides directional lighting information.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.IDirectionalSource.Direction">
            <summary>
            Direction in world space of the light's influence.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.IShadowSource">
            <summary>
            Interface that provides all basic source information for all shadow casters.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowSource.GetShadowSourceHashCode">
            <summary>
            Returns a hash code that uniquely identifies the shadow source
            and its current state.  Changes to ShadowPosition affects the
            hash code, which is used to trigger updates on related shadows.
            </summary>
            <returns>Shadow hash code.</returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowSource.ShadowType">
            <summary>
            Defines the type of objects that cast shadows from the light.
            Does not affect an object's ability to receive shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowSource.ShadowPosition">
            <summary>
            Position in world space of the shadow source.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowSource.ShadowQuality">
            <summary>
            Adjusts the visual quality of casts shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowSource.ShadowPrimaryBias">
            <summary>
            Main property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowSource.ShadowSecondaryBias">
            <summary>
            Additional fine-tuned property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowSource.ShadowPerSurfaceLOD">
            <summary>
            Enables independent level-of-detail per cubemap face on point-based lights.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowSource.ShadowRenderLightsTogether">
            <summary>
            Requests that all lights contained within the shadow source are rendered in one
            pass (this is only a performance hint - support depends on the rendering implementation).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowSource.World">
            <summary>
            World space transform of the shadow source.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.DirectionalLight.#ctor">
            <summary>
            Creates a new DirectionalLight instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.DirectionalLight.GetShadowSourceHashCode">
            <summary>
            Returns a hash code that uniquely identifies the shadow source
            and its current state.  Changes to ShadowPosition affects the
            hash code, which is used to trigger updates on related shadows.
            </summary>
            <returns>Shadow hash code.</returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.DirectionalLight.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.DirectionalLight.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.LightingType">
            <summary>
            Determines if the lighting is real-time or bake-down.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.FillLight">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.FalloffStrength">
            <summary>
            Controls how quickly lighting falls off over distance (unused in this light type).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.InfiniteBounds">
            <summary>
            Indicates the object bounding area spans the entire world and
            the object is always visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.ShadowSource">
            <summary>
            Shadow source the light's shadows are generated from.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.ShadowType">
            <summary>
            Defines the type of objects that cast shadows from the light.
            Does not affect an object's ability to receive shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.ShadowPosition">
            <summary>
            Position in world space of the shadow source.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.ShadowQuality">
            <summary>
            Adjusts the visual quality of casts shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.ShadowPrimaryBias">
            <summary>
            Main property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.ShadowSecondaryBias">
            <summary>
            Additional fine-tuned property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.ShadowPerSurfaceLOD">
            <summary>
            Enables independent level-of-detail per cubemap face on point-based lights.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.ShadowRenderLightsTogether">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.Direction">
            <summary>
            Direction in world space of the light's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.World">
            <summary>
            World space transform of the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.DirectionalLight.MoveId">
            <summary>
            Indicates the current move. This value increments each time the object
            is moved (when the World transform changes).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.LightingType">
            <summary>
            Determines if lighting is real-time or bake-down.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.LightingType.RealTime">
            <summary>
            Lighting is calculated in real-time via shaders.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.LightingType.BakedDown">
            <summary>
            Lighting is calculated in-editor and stored in light map textures.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.ISpotSource">
            <summary>
            Interface that provides spotlight lighting information.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ISpotSource.Angle">
            <summary>
            Angle in degrees of the light's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ISpotSource.Volume">
            <summary>
            Intensity of the light's 3D light beam.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.ILightManager">
            <summary>
            Interface that provides access to the scene's light manager. The light manager
            provides methods for storing and querying scene lights.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightManager.SubmitStaticDirectionalLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,SynapseGaming.LightingSystem.Shadows.ShadowType,System.Single,System.Single,System.Single)">
            <summary>
            Helper method that creates and submits a static light
            using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="diffusecolor">Direct lighting color given off by the light.</param>
            <param name="direction">Direction the light is pointing.</param>
            <param name="intensity">Intensity of the light.</param>
            <param name="shadowtype">Defines the type of objects that cast shadows from the light.
            Does not affect an object's ability to receive shadows.</param>
            <param name="shadowquality">Visual quality of casts shadows.</param>
            <param name="shadowprimarybias">Main property used to eliminate shadow artifacts.</param>
            <param name="shadowsecondarybias">Additional fine-tuned property used to eliminate shadow artifacts.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightManager.SubmitStaticPointLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Boolean,System.Single,SynapseGaming.LightingSystem.Shadows.ShadowType,System.Single,System.Single,System.Single,SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Helper method that creates and submits a static light
            using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="diffusecolor">Direct lighting color given off by the light.</param>
            <param name="position">Position in world space of the light.</param>
            <param name="intensity">Intensity of the light.</param>
            <param name="radius">Lighting radius in world space.</param>
            <param name="filllight">Provides softer indirect-like illumination without "hot-spots".</param>
            <param name="falloffstrength">Controls how quickly lighting falls off over distance (only available in deferred rendering).</param>
            <param name="shadowtype">Defines the type of objects that cast shadows from the light.
            Does not affect an object's ability to receive shadows.</param>
            <param name="shadowquality">Visual quality of casts shadows.</param>
            <param name="shadowprimarybias">Main property used to eliminate shadow artifacts.</param>
            <param name="shadowsecondarybias">Additional fine-tuned property used to eliminate shadow artifacts.</param>
            <param name="shadowsource">Shadow source the light's shadows are generated from.
            Allows sharing shadows between point light sources.  Setting the parameter
            to null makes the light its own unique shadow source.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightManager.SubmitStaticSpotLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Single,SynapseGaming.LightingSystem.Shadows.ShadowType,System.Single,System.Single,System.Single,SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Helper method that creates and submits a static light
            using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="diffusecolor">Direct lighting color given off by the light.</param>
            <param name="position">Position in world space of the light.</param>
            <param name="intensity">Intensity of the light.</param>
            <param name="radius">Lighting radius in world space.</param>
            <param name="direction">Direction the light is pointing.</param>
            <param name="angle">Angle in degrees of the light's influence.</param>
            <param name="filllight">Provides softer indirect-like illumination without "hot-spots".</param>
            <param name="falloffstrength">Controls how quickly lighting falls off over distance (only available in deferred rendering).</param>
            <param name="shadowtype">Defines the type of objects that cast shadows from the light.
            Does not affect an object's ability to receive shadows.</param>
            <param name="shadowquality">Visual quality of casts shadows.</param>
            <param name="shadowprimarybias">Main property used to eliminate shadow artifacts.</param>
            <param name="shadowsecondarybias">Additional fine-tuned property used to eliminate shadow artifacts.</param>
            <param name="shadowsource">Shadow source the light's shadows are generated from.
            Allows sharing shadows between point light sources.  Setting the parameter
            to null makes the light its own unique shadow source.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightManager.SubmitStaticAmbientLight(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Helper method that creates and submits a static light
            using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="diffusecolor">Direct lighting color given off by the light.</param>
            <param name="intensity">Intensity of the light.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightManager.MoveDynamicObjects">
            <summary>
            Auto-detects moved dynamic objects and repositions them in the storage tree / scenegraph.
            This method is used when the container implements a tree or graph, and relocates all
            dynamic objects within that structure often due to a change in object world position.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.ILightManager.Clear">
            <summary>
            Removes all objects from the container. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.CompositeLighting">
            <summary>
            Represents approximate lighting packed into a single directional and ambient light for
            fast single-pass lighting.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.CompositeLighting.EmptyLighting">
            <summary>
            Represents an unlit composite lighting. This field is read-only.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.CompositeLighting.Direction">
            <summary>
            Direction in world space of the light's influence.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.CompositeLighting.DiffuseColor">
            <summary>
            Directional lighting color given off by the light.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Lights.CompositeLighting.AmbientColor">
            <summary>
            Ambient lighting color given off by the light.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.CompositeLighting.Equals(SynapseGaming.LightingSystem.Lights.CompositeLighting)">
            <summary>
            Determines if the supplied composite lighting contains the same lighting values.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.LightManager">
            <summary>
            Manages all scene lights and allows querying the scene with
            a view or bounding box for lights that affect the area
            (acts as a light scenegraph).
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider,Microsoft.Xna.Framework.BoundingBox,System.Int32)">
            <summary>
            Creates a new LightManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
            <param name="worldboundingbox">The smallest bounding area that completely
            contains the scene. Helps the LightManager build an optimal scene tree.</param>
            <param name="worldtreemaxdepth">Maximum depth for entries in the scene tree. Small
            scenes with few objects see better performance with shallow trees. Large complex
            scenes often need deeper trees.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a new LightManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.SubmitStaticDirectionalLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,SynapseGaming.LightingSystem.Shadows.ShadowType,System.Single,System.Single,System.Single)">
            <summary>
            Helper method that creates and submits a static light
            using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="diffusecolor">Direct lighting color given off by the light.</param>
            <param name="direction">Direction the light is pointing.</param>
            <param name="intensity">Intensity of the light.</param>
            <param name="shadowtype">Defines the type of objects that cast shadows from the light.
            Does not affect an object's ability to receive shadows.</param>
            <param name="shadowquality">Visual quality of casts shadows.</param>
            <param name="shadowprimarybias">Main property used to eliminate shadow artifacts.</param>
            <param name="shadowsecondarybias">Additional fine-tuned property used to eliminate shadow artifacts.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.SubmitStaticPointLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Boolean,System.Single,SynapseGaming.LightingSystem.Shadows.ShadowType,System.Single,System.Single,System.Single,SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Helper method that creates and submits a static light
            using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="diffusecolor">Direct lighting color given off by the light.</param>
            <param name="position">Position in world space of the light.</param>
            <param name="intensity">Intensity of the light.</param>
            <param name="radius">Lighting radius in world space.</param>
            <param name="filllight">Provides softer indirect-like illumination without "hot-spots".</param>
            <param name="falloffstrength">Controls how quickly lighting falls off over distance (only available in deferred rendering).</param>
            <param name="shadowtype">Defines the type of objects that cast shadows from the light.
            Does not affect an object's ability to receive shadows.</param>
            <param name="shadowquality">Visual quality of casts shadows.</param>
            <param name="shadowprimarybias">Main property used to eliminate shadow artifacts.</param>
            <param name="shadowsecondarybias">Additional fine-tuned property used to eliminate shadow artifacts.</param>
            <param name="shadowsource">Shadow source the light's shadows are generated from.
            Allows sharing shadows between point light sources.  Setting the parameter
            to null makes the light its own unique shadow source.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.SubmitStaticSpotLight(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean,System.Single,SynapseGaming.LightingSystem.Shadows.ShadowType,System.Single,System.Single,System.Single,SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Helper method that creates and submits a static light
            using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="diffusecolor">Direct lighting color given off by the light.</param>
            <param name="position">Position in world space of the light.</param>
            <param name="intensity">Intensity of the light.</param>
            <param name="radius">Lighting radius in world space.</param>
            <param name="direction">Direction the light is pointing.</param>
            <param name="angle">Angle in degrees of the light's influence.</param>
            <param name="filllight">Provides softer indirect-like illumination without "hot-spots".</param>
            <param name="falloffstrength">Controls how quickly lighting falls off over distance (only available in deferred rendering).</param>
            <param name="shadowtype">Defines the type of objects that cast shadows from the light.
            Does not affect an object's ability to receive shadows.</param>
            <param name="shadowquality">Visual quality of casts shadows.</param>
            <param name="shadowprimarybias">Main property used to eliminate shadow artifacts.</param>
            <param name="shadowsecondarybias">Additional fine-tuned property used to eliminate shadow artifacts.</param>
            <param name="shadowsource">Shadow source the light's shadows are generated from.
            Allows sharing shadows between point light sources.  Setting the parameter
            to null makes the light its own unique shadow source.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.SubmitStaticAmbientLight(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Helper method that creates and submits a static light
            using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="diffusecolor">Direct lighting color given off by the light.</param>
            <param name="intensity">Intensity of the light.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.Submit(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Adds an object to the container. This does not transfer ownership, disposable
            objects should be maintained and disposed separately.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.Move(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Moves an object within the container. This method is used when the container
            implements a tree or graph, and relocates an object within that structure
            often due to a change in object world position.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.Remove(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Removes an object from the container.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.Clear">
            <summary>
            Removes all lights and cleans up scene information.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.LightManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.LightManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.LightManager.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.LightMapManager">
            <summary>
            Manager used for generating, storing, and retrieving light maps.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a new LightMapManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapManager.GeneratedLightMapSizeChanged">
            <summary>
            Called when GeneratedLightMapSize changes.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapManager.GetLightMap(SynapseGaming.LightingSystem.Rendering.RenderableMesh)">
            <summary>
            Gets the light map associated with the provided mesh or a default light map if non exists.
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapManager.GetLightOcclusionBuffer(SynapseGaming.LightingSystem.Lights.ILight)">
            <summary>
            Gets the light occlusion buffer associated with the provided light or null if non exists.
            </summary>
            <param name="light"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapManager.StoreLightOcclusionBuffer(SynapseGaming.LightingSystem.Lights.LightOcclusionBuffer,SynapseGaming.LightingSystem.Lights.ILight)">
            <summary>
            Synchronizes data in the light occlusion buffer.
            </summary>
            <param name="buffer"></param>
            <param name="light"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapManager.StoreLightMaps(System.Collections.Generic.Dictionary{System.Int32,SynapseGaming.LightingSystem.Lights.BaseLightMapManager.TargetInfo},System.Int32,System.Int32)">
            <summary>
            Synchronizes data between light maps and their render targets and textures.
            </summary>
            <param name="rendertargets"></param>
            <param name="currentprogress"></param>
            <param name="totalprogress"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapManager.SaveLighting">
            <summary>
            Saves generated light maps and occlusion buffers to disk.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.Forward.ShadowCubeMap">
            <summary>
            Shadow map class that implements cube-mapped shadows with
            per surface level-of-detail. Used for point based lights.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap">
            <summary>
            Shadow map class that implements cube-mapped shadows with
            per surface level-of-detail. Used for point based lights.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.BaseShadowEffectShadowMap">
            <summary>
            Base shadow map class that provides support for the built-in ShadowEffect.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.BaseShadowMap">
            <summary>
            Base shadow map class that provides a basic IShadowMap implementation.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.IShadowMap">
            <summary>
            Interface that provides a base for all shadow objects that render using shadow mapping.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.IShadow">
            <summary>
            Interface that provides a base for all shadow storage and rendering objects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMap.Build(Microsoft.Xna.Framework.Graphics.GraphicsDevice,SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Shadows.ShadowGroup,SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility,System.Single)">
            <summary>
            Builds the shadow map information based on the provided scene state and shadow
            group, visibility, and quality.
            </summary>
            <param name="device"></param>
            <param name="scenestate"></param>
            <param name="shadowgroup">Shadow group used as the source for the shadow map.</param>
            <param name="shadowvisibility"></param>
            <param name="shadowquality">Shadow quality from 1.0 (highest) to 0.0 (lowest).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMap.EndRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMap.IsSurfaceVisible(System.Int32,Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Determines if the shadow map surface is visible to the provided view frustum.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="viewfrustum"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMap.SetSurfaceRenderTargetLocation(System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets the location in the shadow map render target the surface renders to.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="location">Texel region used by the shadow map surface.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMap.BeginSurfaceRendering(System.Int32)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMap.BeginSurfaceRendering(System.Int32,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMap.EndSurfaceRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowMap.ContentsAreValid">
            <summary>
            Used to determine if the shadow map contents are valid or if the contents need
            to be re-rendered.
            
            The default SunBurn shadow mapping implementation renders shadow map contents
            every frame, however custom implementations can provide static shadow maps.
            
            Please note: if shadow maps are static and the contents are valid DO NOT call
            ShadowRenderTargetGroup Begin() and End().  On the Xbox this will invalidate the
            render target data.
            
            However skipping calls to Begin and End require calling
            ShadowRenderTargetGroup.UpdateRenderTargetTexture() to ensure the shadow texture
            is up to date.
            
            When using the built-in render managers this is all handled automatically.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowMap.Surfaces">
            <summary>
            Array of surfaces used to render the shadow map. Each surface contains its own
            section within a render target. Surfaces are used for multi-part rendering and
            level-of-detail.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowMap.CustomRenderTarget">
            <summary>
            Used to provide a custom render target for the shadow map. Though this allows
            custom render targets it also bypasses render target retrieval from the
            ShadowMapCache, which can cause higher memory usage.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowMap.ShadowEffect">
            <summary>
            Effect used for shadow map rendering. The effect should support both generating
            the shadow map and rendering shadows to the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.Build(Microsoft.Xna.Framework.Graphics.GraphicsDevice,SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Shadows.ShadowGroup,SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility,System.Single)">
            <summary>
            Builds the shadow map information based on the provided scene state and shadow
            group, visibility, and quality.
            </summary>
            <param name="device"></param>
            <param name="scenestate"></param>
            <param name="shadowgroup">Shadow group used as the source for the shadow map.</param>
            <param name="shadowvisibility"></param>
            <param name="shadowquality">Shadow quality from 1.0 (highest) to 0.0 (lowest).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.Dispose">
            <summary>
            Releases resources allocated by this object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.EndRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.IsSurfaceVisible(System.Int32,Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Determines if the shadow map surface is visible to the provided view frustum.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="viewfrustum"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.SetSurfaceRenderTargetLocation(System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets the location in the shadow map render target the surface renders to.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="location">Texel region used by the shadow map surface.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.BeginSurfaceRendering(System.Int32)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.BeginSurfaceRendering(System.Int32,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.EndSurfaceRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.ContentsAreValid">
            <summary>
            Used to determine if the shadow map contents are valid or if the contents need
            to be re-rendered.
            
            The default SunBurn shadow mapping implementation renders shadow map contents
            every frame, however custom implementations can provide static shadow maps.
            
            Please note: if shadow maps are static and the contents are valid DO NOT call
            ShadowRenderTargetGroup Begin() and End().  On the Xbox this will invalidate the
            render target data.
            
            However skipping calls to Begin and End require calling
            ShadowRenderTargetGroup.UpdateRenderTargetTexture() to ensure the shadow texture
            is up to date.
            
            When using the built-in render managers this is all handled automatically.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.Surfaces">
            <summary>
            Array of surfaces used to render the shadow map. Each surface contains its own
            section within a render target. Surfaces are used for multi-part rendering and
            level-of-detail.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.ShadowEffect">
            <summary>
            Effect used for shadow map rendering. The effect should support both generating
            the shadow map and rendering shadows to the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.CustomRenderTarget">
            <summary>
            Used to provide a custom render target for the shadow map. Though this allows
            custom render targets it also bypasses render target retrieval from the
            ShadowMapCache, which can cause higher memory usage.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.Device">
            <summary>
            The current device used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.SceneState">
            <summary>
            The current SceneState used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMap.ShadowGroup">
            <summary>
            The current ShadowGroup used by this object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowEffectShadowMap.GetEffectType">
            <summary>
            Gets the effect type that performs rendering specific to the shadow
            mapping implementation used by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowEffectShadowMap.CreateEffect">
            <summary>
            Creates a new effect that performs rendering specific to the shadow
            mapping implementation used by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowEffectShadowMap.Build(Microsoft.Xna.Framework.Graphics.GraphicsDevice,SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Shadows.ShadowGroup,SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility,System.Single)">
            <summary>
            Builds the shadow map information based on the provided scene state and shadow
            group, visibility, and quality.
            </summary>
            <param name="device"></param>
            <param name="scenestate"></param>
            <param name="shadowgroup">Shadow group used as the source for the shadow map.</param>
            <param name="shadowvisibility"></param>
            <param name="shadowquality">Shadow quality from 1.0 (highest) to 0.0 (lowest).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowEffectShadowMap.Dispose">
            <summary>
            Releases resources allocated by this object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowEffectShadowMap.GetPackedRenderTargetLocationAndSpan(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32)">
            <summary>
            Creates packed surface information used by the built-in ShadowEffect.
            </summary>
            <param name="shadowmap"></param>
            <param name="padding">Width of pixel padding used to avoid edge artifacts.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowEffectShadowMap.GetPackedSurfaceViewProjection">
            <summary>
            Creates packed surface transforms used by the built-in ShadowEffect.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowEffectShadowMap.ShadowEffect">
            <summary>
            Effect used for shadow map rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.#ctor">
            <summary>
            Creates a new ShadowCubeMap instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.Build(Microsoft.Xna.Framework.Graphics.GraphicsDevice,SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Shadows.ShadowGroup,SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility,System.Single)">
            <summary>
            Builds the shadow map information based on the provided scene state and shadow
            group, visibility, and quality.
            </summary>
            <param name="device"></param>
            <param name="scenestate"></param>
            <param name="shadowgroup">Shadow group used as the source for the shadow map.</param>
            <param name="shadowvisibility"></param>
            <param name="shadowquality">Shadow quality from 1.0 (highest) to 0.0 (lowest).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.SetSurfaceRenderTargetLocation(System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets the location in the shadow map render target the surface renders to.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="location">Texel region used by the shadow map surface.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.IsSurfaceVisible(System.Int32,Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Determines if the shadow map surface is visible to the provided view frustum.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="viewfrustum"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.EndRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.BeginSurfaceRendering(System.Int32)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.BeginSurfaceRendering(System.Int32,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.EndSurfaceRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.Surfaces">
            <summary>
            Array of the cube-map surfaces.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowCubeMap.CustomRenderTarget">
            <summary>
            Unused, this object supports render targets from the ShadowMapCache.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowCubeMap.GetEffectType">
            <summary>
            Gets the effect type that performs rendering specific to the shadow
            mapping implementation used by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowCubeMap.CreateEffect">
            <summary>
            Creates a new effect that performs rendering specific to the shadow
            mapping implementation used by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowCubeMap.Build(Microsoft.Xna.Framework.Graphics.GraphicsDevice,SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Shadows.ShadowGroup,SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility,System.Single)">
            <summary>
            Builds the shadow map information based on the provided scene state and shadow
            group, visibility, and quality.
            </summary>
            <param name="device"></param>
            <param name="scenestate"></param>
            <param name="shadowgroup">Shadow group used as the source for the shadow map.</param>
            <param name="shadowvisibility"></param>
            <param name="shadowquality">Shadow quality from 1.0 (highest) to 0.0 (lowest).</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.LightMapShadowCubeMap.CustomRenderTarget">
            <summary>
            Provides a custom render target for the shadow map.  This bypasses the built-in
            ShadowMapCache, which can cause higher memory usage.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new LightMapShadowDirectionalMap instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.CreateEffect">
            <summary>
            Creates a new effect that performs rendering specific to the shadow
            mapping implementation used by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.Build(Microsoft.Xna.Framework.Graphics.GraphicsDevice,SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Shadows.ShadowGroup,SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility,System.Single)">
            <summary>
            Builds the shadow map information based on the provided scene state and shadow
            group, visibility, and quality.
            </summary>
            <param name="device"></param>
            <param name="scenestate"></param>
            <param name="shadowgroup">Shadow group used as the source for the shadow map.</param>
            <param name="shadowvisibility"></param>
            <param name="shadowquality">Shadow quality from 1.0 (highest) to 0.0 (lowest).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.SetSurfaceRenderTargetLocation(System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets the location in the shadow map render target the surface renders to.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="location">Texel region used by the shadow map surface.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.IsSurfaceVisible(System.Int32,Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Determines if the shadow map surface is visible to the provided view frustum.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="viewfrustum"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.EndRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.BeginSurfaceRendering(System.Int32)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.BeginSurfaceRendering(System.Int32,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.EndSurfaceRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.LightMapShadowDirectionalMap.Surfaces">
            <summary>
            Array of the level-of-detail surfaces.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.LightOcclusionBuffer">
            <summary>
            Provides data for calculating light occlusion (shadowing) with composite lighting.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightOcclusionBuffer.GetOcclusionAmount(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Calculates the occlusion amount (shadowing) for the provided world position.
            </summary>
            <param name="worldpos"></param>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.ILightGroup">
            <summary>
            Interface used for light groups, which help organizing scene lights within a rig.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILightGroup.ShadowGroup">
            <summary>
            Determines if the group acts as a shared shadow source for all contained
            lights. This allows a considerable performance increase over per-light shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILightGroup.Position">
            <summary>
            Shadow source location when used as a shadow group.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.ILightGroup.Lights">
            <summary>
            Readonly list of the contained lights.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.LightGroup">
            <summary>
            Light group object used to help organizing scene lights within a rig.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.ShadowSource">
            <summary>
            Provides a shareable point shadow source for use with PointLight objects.
            Any number of PointLight objects can share the same shadow source.  Shadow
            source position and properties are independent of the lights that reference it.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowSource.GetShadowSourceHashCode">
            <summary>
            Returns a hash code that uniquely identifies the shadow source
            and its current state.  Changes to ShadowPosition affects the
            hash code, which is used to trigger updates on related shadows.
            </summary>
            <returns>Shadow hash code.</returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowSource.#ctor">
            <summary>
            Creates a new ShadowSource instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowSource.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.Name">
            <summary>
            The object's current name.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.ShadowType">
            <summary>
            Defines the type of objects that cast shadows from the source.
            Does not affect an object's ability to receive shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.ShadowPosition">
            <summary>
            Position in world space of the shadow source.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.ShadowQuality">
            <summary>
            Adjusts the visual quality of casts shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.ShadowPrimaryBias">
            <summary>
            Main property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.ShadowSecondaryBias">
            <summary>
            Additional fine-tuned property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.ShadowPerSurfaceLOD">
            <summary>
            Enables independent level-of-detail per cubemap face on point-based lights.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.ShadowRenderLightsTogether">
            <summary>
            Requests that all lights contained within the shadow source are rendered in one
            pass (this is only a performance hint - support depends on the rendering implementation).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.Position">
            <summary>
            Position in world space of the source.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.Radius">
            <summary>
            Maximum distance in world space of the source's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowSource.World">
            <summary>
            World space transform of the shadow source.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightGroup.Add(SynapseGaming.LightingSystem.Lights.ILight)">
            <summary>
            Adds a light to the group.
            </summary>
            <param name="light"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightGroup.Remove(SynapseGaming.LightingSystem.Lights.ILight)">
            <summary>
            Removes a light to the group.
            </summary>
            <param name="light"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightGroup.RemoveAt(System.Int32)">
            <summary>
            Removes the light at a specific index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightGroup.Clear">
            <summary>
            Removes all lights from the group.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightGroup.#ctor">
            <summary>
            Creates a LightGroup instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightGroup.Clone">
            <summary>
            Deep clones the object including any contained sub-objects and components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightGroup.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.LightGroup.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.LightGroup.Lights">
            <summary>
            Readonly list of the contained lights.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.LightGroup.ShadowGroup">
            <summary>
            Determines if the group acts as a shared shadow source for all contained
            lights. This allows a considerable performance increase over per-light shadows.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.PointLight">
            <summary>
            Provides point light (aka: omni light) information for rendering lighting and shadows.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.PointLight.#ctor">
            <summary>
            Creates a new PointLight instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.PointLight.UpdateBounds">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.PointLight.GetShadowSourceHashCode">
            <summary>
            Returns a hash code that uniquely identifies the shadow source
            and its current state.  Changes to ShadowPosition affects the
            hash code, which is used to trigger updates on related shadows.
            </summary>
            <returns>Shadow hash code.</returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.PointLight.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.PointLight.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.LightingType">
            <summary>
            Determines if the lighting is real-time or bake-down.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.FillLight">
            <summary>
            Provides softer indirect-like illumination without "hot-spots".
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.FalloffStrength">
            <summary>
            Controls how quickly lighting falls off over distance (only available in deferred rendering).
            Value ranges from 0.0f to 1.0f.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.ShadowSource">
            <summary>
            Shadow source the light's shadows are generated from.
            Allows sharing shadows between point light sources.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.ShadowType">
            <summary>
            Defines the type of objects that cast shadows from the light.
            Does not affect an object's ability to receive shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.ShadowPosition">
            <summary>
            Position in world space of the shadow source.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.ShadowQuality">
            <summary>
            Adjusts the visual quality of casts shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.ShadowPrimaryBias">
            <summary>
            Main property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.ShadowSecondaryBias">
            <summary>
            Additional fine-tuned property used to eliminate shadow artifacts.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.ShadowPerSurfaceLOD">
            <summary>
            Enables independent level-of-detail per cubemap face on point-based lights.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.ShadowRenderLightsTogether">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.Position">
            <summary>
            Position in world space of the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.Radius">
            <summary>
            Maximum distance in world space of the light's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.World">
            <summary>
            World space transform of the light.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.MoveId">
            <summary>
            Indicates the current move. This value increments each time the object
            is moved (when the World transform changes).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.PointLight.InfiniteBounds">
            <summary>
            Indicates the object bounding area spans the entire world and
            the object is always visible.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Lights.SpotLight">
            <summary>
            Provides spotlight information for rendering lighting and shadows.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.SpotLight.#ctor">
            <summary>
            Creates a new SpotLight instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.SpotLight.UpdateBounds">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.SpotLight.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Lights.SpotLight.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.SpotLight.Direction">
            <summary>
            Direction in world space of the light's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.SpotLight.Angle">
            <summary>
            Angle in degrees of the light's influence.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Lights.SpotLight.Volume">
            <summary>
            Intensity of the light's 3D light beam.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Models.ModelRenderHelper">
            <summary>
            Helper class for rendering raw XNA Models.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Models.ModelRenderHelper.Render(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.ModelMesh)">
            <summary>
            Renders an XNA ModelMesh using the currently assigned
            effect and render states (not the Model's).  Allows
            rendering XNA Models as raw geometry.
            </summary>
            <param name="device">Current graphics device.</param>
            <param name="mesh">ModelMesh to render.</param>
        </member>
        <member name="F:Compact.Net.Mono.Math.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:Compact.Net.Mono.Math.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:Compact.Net.Mono.Math.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="F:Compact.Net.Mono.Math.BigInteger.smallPrimes">
            <summary>
            	Table of primes below 2000.
            </summary>
            <remarks>
            	<para>
            	This table was generated using Mathematica 4.1 using the following function:
            	</para>
            	<para>
            		<code>
            		PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            		PrimeTable [6000]
            		</code>
            	</para>
            </remarks>
        </member>
        <member name="M:Compact.Net.Mono.Math.BigInteger.GenerateRandom(System.Int32,Compact.Net.System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Generates a new, random BigInteger of the specified length.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <param name="rng">A random number generator to use to obtain the bits.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Compact.Net.Mono.Math.BigInteger.GenerateRandom(System.Int32)">
            <summary>
            Generates a new, random BigInteger of the specified length using the default RNG crypto service provider.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Compact.Net.Mono.Math.BigInteger.TestBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:Compact.Net.Mono.Math.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="T:Compact.Net.Mono.Math.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:Compact.Net.Mono.Math.BigInteger.Kernel.AddSameSign(Compact.Net.Mono.Math.BigInteger,Compact.Net.Mono.Math.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:Compact.Net.Mono.Math.BigInteger.Kernel.Compare(Compact.Net.Mono.Math.BigInteger,Compact.Net.Mono.Math.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:Compact.Net.Mono.Math.BigInteger.Kernel.SingleByteDivideInPlace(Compact.Net.Mono.Math.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="M:Compact.Net.Mono.Math.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts it into
            d [dOffset:dOffset+xLen+yLen].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+xLen+yLen].
            </remarks>
        </member>
        <member name="M:Compact.Net.Mono.Math.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts the low mod words into
            d [dOffset:dOffset+mod].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+mod].
            </remarks>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.Forward.LightingMaterialReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.Forward.LightingMaterialReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Effects.Forward.LightingEffect)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.Forward.SasMaterialReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.Forward.SasMaterialReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Effects.Forward.SasEffect)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.Forward.XSIMaterialReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.Forward.XSIMaterialReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Effects.Forward.XSIEffect)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.ModelMeshNames">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Processors.ModelMeshNames.MeshNames">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.PipelineInfo">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.ContentRepositoryReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.ContentRepositoryReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Core.ContentRepository)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.PipelineInfoReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.PipelineInfoReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Processors.PipelineInfo)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.ModelMeshNamesReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.ModelMeshNamesReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Processors.ModelMeshNames)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.BoundingVolumeReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.BoundingVolumeReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Core.BoundingVolume)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.LightOcclusionBufferReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.LightOcclusionBufferReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Lights.LightOcclusionBuffer)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.SceneReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.SceneReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Rendering.Scene)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.SceneEnvironmentReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.SceneEnvironmentReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Core.SceneEnvironment)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.SunBurnInternalEffect_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.SunBurnInternalEffect_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Effects.EffectData)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.TerrainMaterialReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.TerrainMaterialReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Rendering.MeshData)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.SunBurnBasicEffectReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.SunBurnBasicEffectReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Effects.SunBurnBasicEffect)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.SunBurnAlphaTestEffectReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.SunBurnAlphaTestEffectReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Effects.SunBurnAlphaTestEffect)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.SunBurnDualTextureEffectReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.SunBurnDualTextureEffectReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Effects.SunBurnDualTextureEffect)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.SunBurnEnvironmentMapEffectReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.SunBurnEnvironmentMapEffectReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Effects.SunBurnEnvironmentMapEffect)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Processors.SunBurnSkinnedEffectReader_Indie">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Processors.SunBurnSkinnedEffectReader_Indie.Read(Microsoft.Xna.Framework.Content.ContentReader,SynapseGaming.LightingSystem.Effects.SunBurnSkinnedEffect)">
            <summary />
        </member>
        <member name="T:SynapseGaming.LightingSystem.Effects.EffectBatchHelper">
            <summary>
            Helps maximize effect batching by collapsing identical effects in multiple models.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectBatchHelper.CollapseEffect(Microsoft.Xna.Framework.Graphics.Effect,System.Boolean)">
            <summary>
            Maximize effect batching by collapsing identical effects with previously processed effects.
            </summary>
            <param name="effect"></param>
            <param name="disposeunused">Determines if the effects no longer used after collapsing are disposed.
            While this removes unused effects from the editor and frees up memory, it also leaves disposed
            effects in the XNA content manager (until Unload is called). Be careful when applying this option.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectBatchHelper.CollapseEffects(Microsoft.Xna.Framework.Graphics.Model,System.Boolean)">
            <summary>
            Maximize effect batching by collapsing identical effects in this and all previously processed models.
            </summary>
            <param name="model"></param>
            <param name="disposeunused">Determines if the effects no longer used after collapsing are disposed.
            While this removes unused effects from the editor and frees up memory, it also leaves disposed
            effects in the XNA content manager (until Unload is called). Be careful when applying this option.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Effects.EffectBatchHelper.Clear">
            <summary>
            Remove all processed effects.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.IAvatarManager">
            <summary>
            Interface that provides access to the scene's avatar manager. The avatar manager
            provides methods for storing, querying, and rendering scene avatars.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.IShadowRenderer">
            <summary>
            Interface used by objects that perform custom rendering during shadow map generation.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IShadowRenderer.BeginShadowGroupRendering(SynapseGaming.LightingSystem.Shadows.ShadowGroup)">
            <summary>
            Prepares for shadow map rendering.
            </summary>
            <param name="shadowgroup"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IShadowRenderer.RenderToShadowMapSurface(SynapseGaming.LightingSystem.Shadows.ShadowGroup,SynapseGaming.LightingSystem.Shadows.ShadowMapSurface,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Performs shadow map rendering.
            </summary>
            <param name="shadowgroup"></param>
            <param name="surface"></param>
            <param name="shadoweffect"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IShadowRenderer.EndShadowGroupRendering(SynapseGaming.LightingSystem.Shadows.ShadowGroup)">
            <summary>
            Finalizes shadow map rendering.
            </summary>
            <param name="shadowgroup"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IAvatarManager.Clear">
            <summary>
            Removes all objects from the container. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatarManager.AmbientBlend">
            <summary>
            Controls avatar lighting by blending between approximate directional
            and ambient lighting.  A blending value of 0.0f makes avatar lighting
            highly directional, while a value of 1.0f makes avatar lighting highly
            ambient.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatarManager.LightingIntensity">
            <summary>
            Controls avatar lighting intensity, providing a means to tune avatar
            lighting to the rest of the scene. An intensity of 1.0f keeps
            avatar lighting the same, a value of 0.5f halves the lighting
            intensity, while 2.0f doubles it.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.IAvatar">
            <summary>
            Interface used by objects that provide properties necessary for avatar
            rendering and are stored in the IAvatarManager manager service.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IAvatar.ApplyAnimation(Microsoft.Xna.Framework.GamerServices.IAvatarAnimation)">
            <summary>
            Sets both the avatar bone transforms and expression using an AvatarAnimation object.
            </summary>
            <param name="animation"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatar.WorldBoundingBoxProxy">
            <summary>
            Extended world space bounding area of the object. This area is roughly twice the size
            to accommodate avatar animations that fall outside the normal bounds.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatar.SkinBones">
            <summary>
            Array of bone transforms for the skeleton's current pose. The matrix index is the
            same as the bone order used by the avatar.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatar.Expression">
            <summary>
            The current avatar facial expression.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatar.Renderer">
            <summary>
            AvatarRenderer used to render the avatar.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatar.Description">
            <summary>
            Description of the avatar size, clothing, features, and more.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatar.Visibility">
            <summary>
            Defines how the avatar is rendered.
            
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders the avatar and casts shadows from it).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatar.CastShadows">
            <summary>
            Determines if the avatar casts shadows base on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IAvatar.Visible">
            <summary>
            Determines if the avatar is visible base on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.Avatar">
            <summary>
            Avatar implementation that provides properties necessary for avatar
            rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Avatar.#ctor(Microsoft.Xna.Framework.GamerServices.AvatarRenderer,Microsoft.Xna.Framework.GamerServices.AvatarDescription)">
            <summary>
            Creates a new Avatar instance.
            </summary>
            <param name="avatarrenderer">AvatarRenderer used to render the avatar.</param>
            <param name="description">Description of the avatar size, clothing, features, and more.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Avatar.SetRendererAndDescription(Microsoft.Xna.Framework.GamerServices.AvatarRenderer,Microsoft.Xna.Framework.GamerServices.AvatarDescription)">
            <summary>
            Changes both the renderer and description used by the avatar.
            </summary>
            <param name="avatarrenderer">AvatarRenderer used to render the avatar.</param>
            <param name="description">Description of the avatar size, clothing, features, and more.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Avatar.Clone">
            <summary>
            Deep clones the object including any contained sub-objects and components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Avatar.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the object using the provided game time.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Avatar.ApplyAnimation(Microsoft.Xna.Framework.GamerServices.IAvatarAnimation)">
            <summary>
            Sets both the avatar bone transforms and expression using an AvatarAnimation object.
            </summary>
            <param name="animation"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Avatar.SetWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets both the world and inverse world matrices.  Used to improve
            performance when the world matrix is set, by providing a cached
            or precalculated inverse matrix with the world matrix.
            </summary>
            <param name="world">World space transform of the object.</param>
            <param name="worldtoobj">Inverse world space transform of the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Avatar.RenderCustomPass(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Implements a custom rendering pass. The pass occurs after scene rendering completes, but before post processing.
            </summary>
            <param name="scenestate">Current state used to render the scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Avatar.RenderEditorIcon(SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Core.BoundingBoxRenderHelper,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Implements rendering of in-editor icons and helpers.
            
            This method is called twice per-frame: once with scene depth clipping enable, and once with it disabled.
            </summary>
            <param name="scenestate">Current state used to render the scene.</param>
            <param name="renderhelper">Helper used to draw lines associated with the object. Only calling Submit() is
            supported in this method, using other methods may affect rendering of lines drawn by other objects.</param>
            <param name="highlighted">Indicates if the object is currently highlighted by the editor.</param>
            <param name="selected">Indicates if the object is currently selected by the editor.</param>
            <param name="sceneoccludedpass">Indicates if the current rendering pass depth clips with the scene.
            If so rendered icons and helpers are occluded by scene objects.</param>
        </member>
        <member name="E:SynapseGaming.LightingSystem.Rendering.Avatar.UpdateEvent">
            <summary>
            Event used to update the object at regular intervals. This and all
            events are only called on dynamic objects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.UniqueId">
            <summary>
            Unique id used to identify the object across multiple scene loads / reloads.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.InfiniteBounds">
            <summary>
            Indicates the object bounding area spans the entire world and
            the object is always visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.MoveId">
            <summary>
            Indicates the current move. This value increments each time the object
            is moved (when the World transform changes).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.Name">
            <summary>
            The object's current name.
            
            Important note: Name can be changed at any time, HOWEVER managers
            will only see the change after removing and resubmitting the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.UpdateType">
            <summary>
            Determines if objects receive update events from the engine and are tracked
            by the scenegraph.
            
            Automatic update events are necessary to be affected by gravity, for
            components, and for the scenegraph to track moving objects.  Objects without
            Automatic update events can still move, however the containing scenegraph
            (ObjectManager or LightManager) must be notified using Manager.Move(object).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.World">
            <summary>
            World space transform of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.SkinBones">
            <summary>
            Array of bone transforms for the skeleton's current pose. The matrix index is the
            same as the bone order used by the avatar.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.Expression">
            <summary>
            The current avatar facial expression.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.Visibility">
            <summary>
            Defines how the avatar is rendered.
            
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders the avatar and casts shadows from it).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.HullType">
            <summary>
            Determines the bounds used in object culling and collision.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.ObjectBoundingSphere">
            <summary>
            Object space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.ObjectBoundingBox">
            <summary>
            Object space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.WorldBoundingBox">
            <summary>
            World space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.WorldBoundingSphere">
            <summary>
            World space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.WorldBoundingBoxProxy">
            <summary>
            Extended world space bounding area of the object. This area is roughly twice the size
            to accommodate avatar animations that fall outside the normal bounds.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.Renderer">
            <summary>
            AvatarRenderer used to render the avatar.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.Description">
            <summary>
            Description of the avatar size, clothing, features, and more.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.CastShadows">
            <summary>
            Determines if the avatar casts shadows base on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.Visible">
            <summary>
            Determines if the avatar is visible base on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Avatar.Components">
            <summary>
            Container that stores, manages, and updates the object's components.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.AvatarManager">
            <summary>
            Manages scene avatars and provides support for rendering
            and finding avatars by bounding volume.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a new AvatarManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the object and its contained resources.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Submit(SynapseGaming.LightingSystem.Rendering.Avatar)">
            <summary>
            Adds an object to the container. This does not transfer ownership, disposable
            objects should be maintained and disposed separately.
            </summary>
            <param name="avatar"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Move(SynapseGaming.LightingSystem.Rendering.Avatar)">
            <summary>
            Repositions an object within the container. This method is used when a static object
            moves to reposition it in the storage tree / scenegraph.
            </summary>
            <param name="avatar"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.MoveDynamicObjects">
            <summary>
            Auto-detects moved dynamic objects and repositions them in the storage tree / scenegraph.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Remove(SynapseGaming.LightingSystem.Rendering.Avatar)">
            <summary>
            Removes an object from the container.
            </summary>
            <param name="avatar"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Find``1(System.String,``0@)">
            <summary>
            Retrieves a dynamic object of a specific type by name.
            </summary>
            <typeparam name="TCastType">Type of object to find.</typeparam>
            <param name="name">Name of the object to find.</param>
            <param name="obj">Returned object.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Find(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.Avatar},Microsoft.Xna.Framework.BoundingFrustum,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            </summary>
            <param name="foundavatars">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Find(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.Avatar},Microsoft.Xna.Framework.BoundingBox,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            </summary>
            <param name="foundavatars">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Find(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.Avatar},SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes.
            </summary>
            <param name="foundavatars">List used to store found objects during the query.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.FindFast(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.Avatar},Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Quickly finds all objects near a bounding area without the overhead of
            filtering by object type, checking if objects are enabled, or verifying
            containment within the bounds.
            </summary>
            <param name="foundavatars">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.FindFast(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.Avatar})">
            <summary>
            Quickly finds all objects without the overhead of filtering by object
            type or checking if objects are enabled.
            </summary>
            <param name="foundavatars">List used to store found objects during the query.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.BeginShadowGroupRendering(SynapseGaming.LightingSystem.Shadows.ShadowGroup)">
            <summary>
            Prepares for shadow map rendering.
            </summary>
            <param name="shadowgroup"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.EndShadowGroupRendering(SynapseGaming.LightingSystem.Shadows.ShadowGroup)">
            <summary>
            Finalizes shadow map rendering.
            </summary>
            <param name="shadowgroup"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.RenderToShadowMapSurface(SynapseGaming.LightingSystem.Shadows.ShadowGroup,SynapseGaming.LightingSystem.Shadows.ShadowMapSurface,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Performs shadow map rendering.
            </summary>
            <param name="shadowgroup"></param>
            <param name="surface"></param>
            <param name="shadoweffect"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Clear">
            <summary>
            Removes resources managed by this object. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.AvatarManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.AvatarManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.AvatarManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.AvatarManager.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.AvatarManager.AmbientBlend">
            <summary>
            Controls avatar lighting by blending between approximate directional
            and ambient lighting.  A blending value of 0.0f makes avatar lighting
            highly directional, while a value of 1.0f makes avatar lighting highly
            ambient.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.AvatarManager.LightingIntensity">
            <summary>
            Controls avatar lighting intensity, providing a means to tune avatar
            lighting to the rest of the scene. An intensity of 1.0f keeps
            avatar lighting the same, a value of 0.5f halves the lighting
            intensity, while 2.0f doubles it.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.IRenderManager">
            <summary>
            Interface that provides access to the scene's render manager. The render manager
            provides methods for controlling scene rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IRenderManager.Render">
            <summary>
            Renders the scene.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.BaseRenderManager">
            <summary>
            Base class that provides basic render management.  Used by the forward rendering
            RenderManager and deferred rendering DeferredRenderManager classes.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.BaseRenderManager._CompositeLightingBlendAmount">
            <summary/>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a new BaseRenderManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.OnXNARuntimeException(System.Exception,System.String)">
            <summary/>
            <param name="e"></param>
            <param name="contextmessage"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.GetDefaultShadows(System.Collections.Generic.List{SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup},System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight})">
            <summary>
            Provides a default set of shadow groups when no IShadowMapManager manager service is available.
            </summary>
            <param name="rendertargetgroups">Returned render target groups.</param>
            <param name="lights">Source lights to create groups for.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.BuildShadowMaps(System.Collections.Generic.List{SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup})">
            <summary>
            Generates shadow maps for the provided shadow render groups. Override this
            method to customize shadow map generation.
            </summary>
            <param name="shadowrendertargetgroups">Shadow render groups to generate shadow maps for.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Builds all object batches, shadow maps, and cached information before rendering.
            Any object added to the RenderManager after this call will not be visible during the frame.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.Render">
            <summary>
            Renders the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.EndFrameRendering">
            <summary>
            Finalizes rendering and cleans up frame information including removing all frame lifespan objects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.Clear">
            <summary>
            Removes all scene objects and cleans up scene information.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.Unload">
            <summary>
            Unloads all scene and device specific data.  Must be called
            when the device is reset (during Game.UnloadGraphicsContent()).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.HideXNARuntimeExceptions">
            <summary>
            Determines if XNA rendering exceptions are quietly caught
            or allowed to bubble-up to the debugger.
            
            Note: exceptions are always hidden while the editor is
            open and when the game is not being debugged.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.ClearBackBufferEnabled">
            <summary>
            Enables clearing the back buffer during rendering.
            Disabling allows custom rendering (such as skybox)
            prior to calling RenderManager.Render().
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.RenderFillMode">
            <summary>
            Changes the render fill mode allowing solid and wireframe rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.FrameAmbientLight">
            <summary>
            Current composite ambient light (combination of all scene ambient lights)
            provided by the LightManager (only valid between calls to
            BeginFrameRendering and EndFrameRendering).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.FrameLights">
            <summary>
            Current scene lights provided by the LightManager (only valid between
            calls to BeginFrameRendering and EndFrameRendering).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.FrameShadowRenderTargetGroups">
            <summary>
            Current scene shadow maps provided by the ShadowManager and
            filled by this render manager (only valid between calls to
            BeginFrameRendering and EndFrameRendering).
            
            See the Custom Renderer project template for an example of
            how to use ShadowRenderTargetGroup and the contained
            shadow maps to render shadows onto the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.MaxAnisotropy">
            <summary>
            Determines the current rendering quality based on the user preferences provided to ApplyPreferences.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.SceneState">
            <summary>
            Current scene state information provided to BeginFrameRendering (only valid between calls to BeginFrameRendering and EndFrameRendering).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.ShadowDetail">
            <summary>
            Determines the current rendering quality based on the user preferences provided to ApplyPreferences.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.EffectDetail">
            <summary>
            Determines the current rendering quality based on the user preferences provided to ApplyPreferences.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.Filter">
            <summary>
            Determines the current rendering quality based on the user preferences provided to ApplyPreferences.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.FrameAmbientLights">
            <summary>
            Current ambient lights provided by the LightManager (only valid between calls to BeginFrameRendering and EndFrameRendering).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseRenderManager.ServiceProvider">
            <summary>
            Service provider used to access all other manager services in this scene. Allows querying
            objects through the IObjectManager manager interface, querying lights through the ILightManager manager
            interface, and more.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.ISceneEntityGroup">
            <summary>
            Interface used for scene entity groups, which help organizing scene entities within a scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneEntityGroup.Entities">
            <summary>
            Readonly list of the contained scene objects.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.IScene">
            <summary>
            Interface used by objects that store, share, and organize scene entities, objects, and lights.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IScene.SetContainingManager``1(SynapseGaming.LightingSystem.Core.IManager)">
            <summary>
            Sets the single manager of the specified type that contains this scene.
            
            Scenes can only be contained by a single manager of a specific type.
            </summary>
            <typeparam name="T">Type of the specified manager. This is often the
            manager interface type, not the class type.</typeparam>
            <param name="manager">Manager object that contains the scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IScene.Apply">
            <summary>
            Applies changes made to contained objects and groups.  This must be called after
            making changes and before rendering the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IScene.Clear">
            <summary>
            Removes all objects and groups.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IScene.Save">
            <summary>
            Saves the object back to its originating file.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IScene.LightGroups">
            <summary>
            Light groups contained by the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.IScene.EntityGroups">
            <summary>
            Scene object groups contained by the scene.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup">
            <summary>
            Light group object used to help organizing scene lights within a rig.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.Add(SynapseGaming.LightingSystem.Rendering.ISceneEntity)">
            <summary>
            Adds an object to the group.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.Remove(SynapseGaming.LightingSystem.Rendering.ISceneEntity)">
            <summary>
            Removes an object from the group.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.RemoveAt(System.Int32)">
            <summary>
            Removes the object at a specific index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.Clear">
            <summary>
            Removes all objects from the group.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.#ctor">
            <summary>
            Creates a LightGroup instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.Clone">
            <summary>
            Deep clones the object including any contained sub-objects and components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.Entities">
            <summary>
            Readonly list of the contained scene objects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.Name">
            <summary>
            The object's current name.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntityGroup.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.BaseScene">
            <summary>
            Base container object used for storing, sharing, and organizing scene entities, objects, and lights.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.BaseScene._LightGroups">
            <summary />
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.BaseScene._EntityGroups">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseScene.#ctor">
            <summary>
            Creates a BaseScene instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseScene.#ctor(System.Boolean)">
            <summary>
            Creates a BaseScene instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseScene.Dispose">
            <summary>
            Releases resources allocated by this object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseScene.SetContainingManager``1(SynapseGaming.LightingSystem.Core.IManager)">
            <summary>
            Sets the single manager of the specified type that contains this scene.
            
            Scenes can only be contained by a single manager of a specific type.
            </summary>
            <typeparam name="T">Type of the specified manager. This is often the
            manager interface type, not the class type.</typeparam>
            <param name="manager">Manager object that contains the scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseScene.Clear">
            <summary>
            Removes all objects and groups.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseScene.Apply">
            <summary>
            Applies changes made to contained objects and groups.  This must be called after
            making changes and before rendering the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseScene.Save">
            <summary>
            Saves the object back to its originating file.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseScene.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.BaseScene.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseScene.LightGroups">
            <summary>
            Light groups contained by the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseScene.EntityGroups">
            <summary>
            Scene object groups contained by the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseScene.Name">
            <summary>
            The object's current name.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseScene.AssetInUse">
            <summary>
            Notifies the editor that the object is currently used for rendering. The editor
            will display unused / inactive objects as grayed-out.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.BaseScene.AffectedInCode">
            <summary>
            Notifies the editor that the object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.DebugRenderManager">
            <summary>
            Helper renderer that displays the bounding boxes of all
            rendered scene objects and lights.
            
            Can help tune performance and work out bugs by seeing how
            objects and lights within the scene overlap and interact
            with each other.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.DebugRenderManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a new DebugRenderManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.DebugRenderManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.DebugRenderManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.DebugRenderManager.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.DebugRenderManager.Clear">
            <summary>
            Removes resources managed by this object. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.DebugRenderManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.DebugRenderManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.DebugRenderManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.DebugRenderManager.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.Forward.RenderManager">
            <summary>
            Provides a complete forward renderer.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.RenderManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Core.IManagerServiceProvider)">
            <summary>
            Creates a new RenderManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="sceneinterface">Service provider used to access all other manager services in this scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.RenderManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Builds all object batches, shadow maps, and cached information before rendering.
            Any object added to the RenderManager after this call will not be visible during the frame.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.RenderManager.BuildShadowMaps(System.Collections.Generic.List{SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup})">
            <summary>
            Generates shadow maps for the provided shadow render groups. Override this
            method to customize shadow map generation.
            </summary>
            <param name="shadowrendertargetgroups">Shadow render groups to generate shadow maps for.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.RenderManager.Render">
            <summary>
            Renders the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.RenderManager.EndFrameRendering">
            <summary>
            Finalizes rendering and cleans up frame information including removing all frame lifespan objects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.RenderManager.Unload">
            <summary>
            Unloads all scene and device specific data.  Must be called
            when the device is reset (during Game.UnloadGraphicsContent()).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Forward.RenderManager.MultiPassEdgeCleanupEnabled">
            <summary>
            Cleans up shimmering effects on object edges. Requires a
            depth buffer format that supports stencil tests. Improper
            depth buffer formats will disable the feature.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.Forward.RenderManagerStates.LightingShadowedReplaceAlphaBlendState">
            <summary>
            Not compatible with multiple lights per-shadow group, but works fine with light mapping.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent">
            <summary>
            Provides a self-contained SunBurn rendering environment. For quickly adding
            SunBurn to a project with minimal changes and nearly pure XNA code interaction.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.GraphicsDeviceManager,Microsoft.Xna.Framework.Content.ContentManager,System.Boolean)">
            <summary>
            Creates a new LightingSystemGameComponent instance.
            </summary>
            <param name="game"></param>
            <param name="graphicsdevicemanager"></param>
            <param name="managerwithactivationfile">Content manager that contains the SunBurn activation file.</param>
            <param name="usedeferredrendering">Determines if the component should use deferred or forward rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.Clear">
            <summary>
            Removes resources managed by this object. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.UnloadContent">
            <summary>
            Called when graphics resources need to be unloaded. Override this method
            to unload any component-specific graphics resources.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the DrawableGameComponent and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called when the GameComponent needs to be updated. Override this
            method with component-specific update code.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called when the DrawableGameComponent needs to be drawn. Override
            this method with component-specific drawing code.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.SceneInterface">
            <summary>
            Rendering environment's SceneInterface. Use to add scene objects and lights for rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.FrameBuffers">
            <summary>
            Rendering environment's shared buffers.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.View">
            <summary>
            The scene's current view matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.Projection">
            <summary>
            The scene's current projection matrix.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.Forward.LightingSystemGameComponent.Environment">
            <summary>
            The scene's current environment such as fog, viewing distance, and HDR information.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.RenderableMesh">
            <summary>
            Mesh class used by the built-in renderers that provides
            properties common to all rendering in XNA / DirectX.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableMesh.#ctor">
            <summary>
            Creates an empty RenderableMesh instance.
            
            Warning: Build must be called to finish constructing the mesh before
            attempting to render it.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableMesh.Build(SynapseGaming.LightingSystem.Rendering.ISceneObject,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart)">
            <summary>
            Updates the mesh with new effect and geometry data.
            </summary>
            <param name="sceneobject">Parent scene object.</param>
            <param name="mesh">XNA ModelMesh to retrieve information from.</param>
            <param name="part">XNA ModelMeshPart to retrieve information from.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableMesh.Build(SynapseGaming.LightingSystem.Rendering.ISceneObject,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Updates the mesh with new effect and geometry data.
            </summary>
            <param name="sceneobject">Parent scene object.</param>
            <param name="mesh">XNA ModelMesh to retrieve information from.</param>
            <param name="part">XNA ModelMeshPart to retrieve information from.</param>
            <param name="overrideeffect">Effect applied to the mesh during rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableMesh.Build(SynapseGaming.LightingSystem.Rendering.ISceneObject,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Graphics.IndexBuffer,Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32,Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Updates the mesh with new effect and geometry data.
            </summary>
            <param name="sceneobject">Parent scene object.</param>
            <param name="effect">Effect applied to the mesh during rendering.</param>
            <param name="indexbuffer">IndexBuffer that contains the mesh geometry.</param>
            <param name="vertexbuffer">VertexBuffer that contains the mesh geometry.</param>
            <param name="elementstart">Index into the buffer that mesh geometry begins. For indexed meshes this
            is the first index in the index buffer. For non-indexed meshes this is
            the first vertex in the vertex buffer.</param>
            <param name="primitivetype">Primitive format the mesh geometry is stored in.</param>
            <param name="primitivecount">Number of primitives in the mesh geometry.</param>
            <param name="vertexbase">Offset added to each index in the index buffer during rendering.</param>
            <param name="vertexcount">Number of vertices in the vertex buffer range required to
            draw the mesh.  For instance, a quad rendering vertices at indices (2, 5, 6, 9) requires
            a vertex buffer range of 8 vertices (vertices 2 – 9 inclusive).</param>
            <param name="vertexstreamoffset">Offset in bytes from the beginning of the vertex
            buffer to start reading data.</param>
            <param name="objectspace">Mesh object-space matrix.</param>
            <param name="meshboundingsphere">Smallest mesh space bounding sphere that
            completely encloses the object.</param>
            <param name="meshboundingbox">Smallest mesh space bounding box that
            completely encloses the object.</param>
            <param name="detectskinningandlightmapping">Indicates if the mesh should test for skinning
            and light mapping support. Only necessary if the provided effect supports these features
            and the game will use them. Testing for the features allocates memory.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableMesh.CalculateMaterialInfo">
            <summary>
            Recalculates the mesh batching information. This may become necessary
            if the mesh effect changes from a non-transparent mode to transparent.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableMesh.RemapEffect">
            <summary>
            Should be called by custom renderers when receiving a ReplaceEffect event from
            the editor. Replaces the current effect with an editor assigned effect.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableMesh.SetWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets both the world and inverse world matrices.  Used to improve
            performance when the world matrix is set, by providing a cached
            or precalculated inverse matrix with the world matrix.
            
            Note: the matrix should only contain the objectToWorld (not the meshToWorld)
            transform. The mesh specific meshToObject transform is applied using the
            MeshToObject property.
            </summary>
            <param name="world">World space transform of the object.</param>
            <param name="worldtoobject">Inverse world space transform of the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableMesh.SetWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Sets both the world and inverse world matrices.  Used to improve
            performance when the world matrix is set, by providing a cached
            or precalculated inverse matrix with the world matrix.
            
            Note: the matrix should only contain the objectToWorld (not the meshToWorld)
            transform. The mesh specific meshToObject transform is applied using the
            MeshToObject property.
            </summary>
            <param name="world">World space transform of the object.</param>
            <param name="worldtoobject">Inverse world space transform of the object.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.Name">
            <summary>
            The mesh's current name.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.SceneObject">
            <summary>
            Parent scene object this mesh is contained in.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.UniqueId">
            <summary>
            Unique id used to identify the mesh across multiple scene loads / reloads.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.CanLightMap">
            <summary>
            Indicates the mesh is capable of using light maps.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.Effect">
            <summary>
            Effect applied to the mesh during rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.World">
            <summary>
            Complete world space transform of the mesh (from mesh-space to
            world-space, ie: includes the mesh's object-space transform).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.WorldToMesh">
            <summary>
            Inverse complete world space transform of the mesh (from world-space
            to mesh-space, ie: includes the mesh's object-space transform).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.MeshToObject">
            <summary>
            Object space transform of the mesh.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.IndexBuffer">
            <summary>
            IndexBuffer that contains the mesh geometry.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.VertexBuffer">
            <summary>
            VertexBuffer that contains the mesh geometry.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.VertexStreamOffset">
            <summary>
            Offset in bytes from the beginning of the vertex buffer to start reading data.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.VertexBase">
            <summary>
            Offset added to each index in the index buffer during rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.VertexCount">
            <summary>
            Number of vertices in the vertex buffer range required to draw the mesh.
            For instance, a quad rendering vertices at indices (2, 5, 6, 9) requires
            a vertex buffer range of 8 vertices (vertices 2 – 9 inclusive).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.ElementStart">
            <summary>
            Index into the buffer that mesh geometry begins. For indexed meshes this
            is the first index in the index buffer. For non-indexed meshes this is
            the first vertex in the vertex buffer.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.PrimitiveType">
            <summary>
            Primitive format the mesh geometry is stored in.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.PrimitiveCount">
            <summary>
            Number of primitives in the mesh geometry.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.CullMode">
            <summary>
            Cull mode used to ensure the mesh is rendered correctly.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.MeshBoundingSphere">
            <summary>
            Object-space bounding area that completely contains the mesh.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.RenderableMesh.MeshBoundingBox">
            <summary>
            Object-space bounding area that completely contains the mesh.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableObjectInfoBatcher.BuildBatches(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.RenderableObjectInfoBatch},System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.RenderableMesh},SynapseGaming.LightingSystem.Rendering.EffectTypeMask)">
            <summary>
            Sorts RenderableObjectInfo objects by effect, filters by effect type, and applies the
            view/projection.  This method should be called when any combination of these change.
            </summary>
            <param name="view"></param>
            <param name="viewtoworld"></param>
            <param name="projection"></param>
            <param name="projectiontoview"></param>
            <param name="batches"></param>
            <param name="objects"></param>
            <param name="rendertypemask"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.IObjectManager">
            <summary>
            Interface that provides access to the scene's object manager. The object manager
            provides methods for storing and querying scene objects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IObjectManager.SubmitStaticSceneObject(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            
            NOTE: This method creates a single scene object for an
            entire model.  This is ideal for small models such as
            props, however large models that represent entire rooms
            or scenes need to be split into separate objects per
            model mesh using SubmitStaticSceneObjectPerMesh.
            </summary>
            <param name="model">Source model.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IObjectManager.SubmitStaticSceneObjectPerMesh(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            
            NOTE: This method creates a scene object for each mesh
            contained in the model.  This is ideal for large models
            that represent entire rooms or scenes, however small
            models such as props should be contained in a single scene
            object using SubmitStaticSceneObject.
            </summary>
            <param name="model">Source model.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IObjectManager.SubmitStaticSceneObject(Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="mesh">Source model mesh.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IObjectManager.SubmitStaticSceneObject(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            
            NOTE: This method creates a single scene object for an
            entire model.  This is ideal for small models such as
            props, however large models that represent entire rooms
            or scenes need to be split into separate objects per
            model mesh using SubmitStaticSceneObjectPerMesh.
            </summary>
            <param name="model">Source model.</param>
            <param name="overrideeffect">User defined effect used to render the object.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IObjectManager.SubmitStaticSceneObjectPerMesh(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            
            NOTE: This method creates a scene object for each mesh
            contained in the model.  This is ideal for large models
            that represent entire rooms or scenes, however small
            models such as props should be contained in a single scene
            object using SubmitStaticSceneObject.
            </summary>
            <param name="model">Source model.</param>
            <param name="overrideeffect">User defined effect used to render the object.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IObjectManager.SubmitStaticSceneObject(Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="mesh">Source model mesh.</param>
            <param name="overrideeffect">User defined effect used to render the object.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IObjectManager.Clear">
            <summary>
            Removes all objects from the container. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.IObjectManager.Find``1(System.String,``0@)">
            <summary>
            Retrieves a dynamic object of a specific type by name.
            </summary>
            <typeparam name="TCastType">Type of object to find.</typeparam>
            <param name="name">Name of the object to find.</param>
            <param name="obj">Returned object.</param>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.ObjectManager">
            <summary>
            Manages all scene objects in a mini scenegraph.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,Microsoft.Xna.Framework.BoundingBox,System.Int32)">
            <summary>
            Creates a new ObjectManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="worldboundingbox">The smallest bounding area that completely
            contains the scene.  Helps the RenderManager build an optimal scene tree.</param>
            <param name="worldtreemaxdepth"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new ObjectManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.#ctor">
            <summary>
            Creates a new ObjectManager instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Finalize">
            <summary />
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up the object prior to rendering.
            </summary>
            <param name="scenestate"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.EndFrameRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the object and its contained resources.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Submit(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Adds an object to the container. This does not transfer ownership, disposable
            objects should be maintained and disposed separately.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Move(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Moves an object within the container. This method is used when the container
            implements a tree or graph, and relocates an object within that structure
            often due to a change in object world position.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Remove(SynapseGaming.LightingSystem.Rendering.IScene)">
            <summary>
            Removes an object from the container.
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Clear">
            <summary>
            Removes all lights and cleans up scene information.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.SubmitStaticSceneObject(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            
            NOTE: This method creates a single scene object for an
            entire model.  This is ideal for small models such as
            props, however large models that represent entire rooms
            or scenes need to be split into separate objects per
            model mesh using SubmitStaticSceneObjectPerMesh.
            </summary>
            <param name="model">Source model.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.SubmitStaticSceneObjectPerMesh(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            
            NOTE: This method creates a scene object for each mesh
            contained in the model.  This is ideal for large models
            that represent entire rooms or scenes, however small
            models such as props should be contained in a single scene
            object using SubmitStaticSceneObject.
            </summary>
            <param name="model">Source model.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.SubmitStaticSceneObject(Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="mesh">Source model mesh.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.SubmitStaticSceneObject(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            
            NOTE: This method creates a single scene object for an
            entire model.  This is ideal for small models such as
            props, however large models that represent entire rooms
            or scenes need to be split into separate objects per
            model mesh using SubmitStaticSceneObjectPerMesh.
            </summary>
            <param name="model">Source model.</param>
            <param name="overrideeffect">User defined effect used to render the object.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.SubmitStaticSceneObjectPerMesh(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            
            NOTE: This method creates a scene object for each mesh
            contained in the model.  This is ideal for large models
            that represent entire rooms or scenes, however small
            models such as props should be contained in a single scene
            object using SubmitStaticSceneObject.
            </summary>
            <param name="model">Source model.</param>
            <param name="overrideeffect">User defined effect used to render the object.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.SubmitStaticSceneObject(Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Matrix,SynapseGaming.LightingSystem.Core.ObjectVisibility)">
            <summary>
            Helper method that creates and submits a static scene
            object using a method layout similar to SunBurn 1.2.x.
            </summary>
            <param name="mesh">Source model mesh.</param>
            <param name="overrideeffect">User defined effect used to render the object.</param>
            <param name="world">Scene object world transform.</param>
            <param name="visibility">Defines how the object is rendered.
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders objects and casts shadows from them).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Find(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.RenderableMesh},Microsoft.Xna.Framework.BoundingFrustum,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            </summary>
            <param name="foundmeshes">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Find(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.RenderableMesh},Microsoft.Xna.Framework.BoundingBox,SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes
            and overlap with or are contained in a bounding area.
            </summary>
            <param name="foundmeshes">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Find(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.RenderableMesh},SynapseGaming.LightingSystem.Core.ObjectFilter)">
            <summary>
            Finds all contained objects that match a set of filter attributes.
            </summary>
            <param name="foundmeshes">List used to store found objects during the query.</param>
            <param name="objectfilter">Filter used to limit query results to objects with specific attributes.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.FindFast(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.RenderableMesh},Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Quickly finds all objects near a bounding area without the overhead of
            filtering by object type, checking if objects are enabled, or verifying
            containment within the bounds.
            </summary>
            <param name="foundmeshes">List used to store found objects during the query.</param>
            <param name="worldbounds">Bounding area used to limit query results.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.FindFast(System.Collections.Generic.List{SynapseGaming.LightingSystem.Rendering.RenderableMesh})">
            <summary>
            Quickly finds all objects without the overhead of filtering by object
            type or checking if objects are enabled.
            </summary>
            <param name="foundmeshes">List used to store found objects during the query.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ObjectManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ObjectManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ObjectManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ObjectManager.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.Scene">
            <summary>
            Container object used for storing, sharing, and organizing scene entities, objects, and lights.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Scene.#ctor">
            <summary>
            Creates a Scene instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Scene.Save">
            <summary>
            Saves the object back to its originating file.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Scene.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.Scene.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.HullType">
            <summary>
            Defines the bounds used in object culling and collision.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.HullType.Sphere">
            <summary>
            Bounds use a fitted sphere.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.HullType.Box">
            <summary>
            Bounds use a fitted box.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.HullType.Mesh">
            <summary>
            Bounds are calculated using mesh geometry.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.SceneEntity">
            <summary>
            Scene entity implementation used to derive custom entities and scene objects.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.SceneEntity._Components">
            <summary/>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SceneEntity instance.
            </summary>
            <param name="name">Custom name for the object.</param>
            <param name="infinitebounds">Indicates the object bounding area spans the entire world and
            the object is always visible.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.#ctor">
            <summary>
            Creates a new SceneEntity instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.Init(System.String,System.Boolean)">
            <summary>
            Initializes the object to default values.
            </summary>
            <param name="name">Custom name for the object.</param>
            <param name="infinitebounds">Indicates the object bounding area spans the entire world and
            the object is always visible.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.Clone">
            <summary>
            Deep clones the object including any contained sub-objects and components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.Create">
            <summary>
            Creates a new instance of the object type. This method assumes the type has a
            default constructor. If the type does not have a default constructor this method
            can be overridden to manually create the type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the object using the provided game time.
            </summary>
            <param name="gametime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.SetWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets both the world and inverse world matrices.  Used to improve
            performance when the world matrix is set, by providing a cached
            or precalculated inverse matrix with the world matrix.
            </summary>
            <param name="world">World space transform of the object.</param>
            <param name="worldtoobj">Inverse world space transform of the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.UpdateWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Updates the object world space and inverse world space transforms.
            Override to perform custom code when the world transform changes.
            </summary>
            <param name="world">World space transform.</param>
            <param name="worldtoobj">Inverse world space transform.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.CalculateBounds">
            <summary>
            Recalculates the object bounding area based on all contained meshes.
            
            Calling this method may become necessary if a mesh bounding area is
            altered after being added to the object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.CalculateObjectBounds(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@)">
            <summary>
            Calculates the object bounds.
            </summary>
            <param name="objectboundingbox">Object bounds to update.</param>
            <param name="objectboundingsphere">Object bounds to update.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.CalculateWorldBounds(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@,System.Boolean)">
            <summary>
            Updates the object world bounds based on the current world transform and object space bounds.
            
            NOTE: when implementing custom bounds ensure the hull type (box or sphere) is completely
            enclosed by the other bounds type. For instance if the hull type is Box then the bounding
            sphere should completely contain the bounding box, and vice-versa. This is critical for
            correct collision.
            </summary>
            <param name="worldboundingbox">World bounds to update.</param>
            <param name="worldboundingsphere">World bounds to update.</param>
            <param name="alreadymoved">Indicates the object move id is already updated.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.RenderCustomPass(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Implements a custom rendering pass. The pass occurs after scene rendering completes, but before post processing.
            </summary>
            <param name="scenestate">Current state used to render the scene.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.RenderEditorIcon(SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Core.BoundingBoxRenderHelper,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Implements rendering of in-editor icons and helpers.
            
            This method is called twice per-frame: once with scene depth clipping enable, and once with it disabled.
            </summary>
            <param name="scenestate">Current state used to render the scene.</param>
            <param name="renderhelper">Helper used to draw lines associated with the object. Only calling Submit() is
            supported in this method, using other methods may affect rendering of lines drawn by other objects.</param>
            <param name="highlighted">Indicates if the object is currently highlighted by the editor.</param>
            <param name="selected">Indicates if the object is currently selected by the editor.</param>
            <param name="sceneoccludedpass">Indicates if the current rendering pass depth clips with the scene.
            If so rendered icons and helpers are occluded by scene objects.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneEntity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="E:SynapseGaming.LightingSystem.Rendering.SceneEntity.UpdateEvent">
            <summary>
            Event used to update the object at regular intervals. This and all
            events are only called on dynamic objects.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.UniqueId">
            <summary>
            Unique id used to identify the object across multiple scene loads / reloads.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.World">
            <summary>
            World space transform of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.WorldToObject">
            <summary>
            Inverse world space transform of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.InfiniteBounds">
            <summary>
            Indicates the object bounding area spans the entire world and
            the object is always visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.MoveId">
            <summary>
            Indicates the current move. This value increments each time the object
            is moved (when the World transform changes).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.UpdateType">
            <summary>
            Determines if objects receive update events from the engine and are tracked
            by the scenegraph.
            
            Automatic update events are necessary to be affected by gravity, for
            components, and for the scenegraph to track moving objects.  Objects without
            Automatic update events can still move, however the containing scenegraph
            (ObjectManager or LightManager) must be notified using Manager.Move(object).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.ObjectBoundingSphere">
            <summary>
            Object space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.ObjectBoundingBox">
            <summary>
            Object space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.WorldBoundingBox">
            <summary>
            World space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.WorldBoundingSphere">
            <summary>
            World space bounding area of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.Name">
            <summary>
            The object's current name.
            
            Important note: Name can be changed at any time, HOWEVER managers
            will only see the change after removing and resubmitting the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.HullType">
            <summary>
            Determines the bounds used in object culling and collision.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.AffectedInCode">
            <summary>
            Notifies the editor that this object is partially controlled via code. The editor
            will display information to the user indicating some property values are
            overridden in code and changes may not take effect.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneEntity.Components">
            <summary>
            Container that stores, manages, and updates the object's components.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.ModelAsset">
            <summary>
            Provides an asset wrapper for XNA Models containing the source repository name, file name, and direct access
            to the loaded asset. When visible in the SunBurn editor properties of this type automatically support drag
            and drop of repository models into the property.
            
            The content repository provided must be loaded before creating an instance of
            this class otherwise the asset will fail to load.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.ModelAsset.Empty">
            <summary>
            Provides an empty ModelAsset which can be used to initialize properties of this type.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.ModelAsset.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new ModelAsset instance and loads the provided model.
            </summary>
            <param name="repositoryname">Name of the content repository, which contains the asset.</param>
            <param name="sourceassetfilepath">Relative path to the file the asset is loaded from.</param>
            <param name="modelmeshname">Specific ModelMesh that should be used when constructing objects from this
            ModelAsset. Set to null or empty to use the entire model.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ModelAsset.ModelMeshName">
            <summary>
            Specific ModelMesh that should be used when constructing objects from this ModelAsset.
            
            If SourceAssetFilePath is valid and this value is empty then the object should use the entire Model.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.StaticLightingType">
            <summary>
            Determines if an object uses light mapping, approximate lighting, or no lighting
            to receive illumination from BakedDown light sources.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.StaticLightingType.None">
            <summary>
            Object does not receive illumination from BakedDown light sources.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.StaticLightingType.Composite">
            <summary>
            Object receives illumination from an approximate combination of all BakedDown light sources.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.StaticLightingType.BakedDown">
            <summary>
            Object receives illumination from BakedDown light sources using light maps (textures) generated in-editor.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.MeshData">
            <summary>
            Represents geometry data that can be shared between multiple
            scene objects (similar to xna Model).
            
            Generally loaded through the xna content manager.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.MeshData.#ctor">
            <summary>
            Creates a new MeshData instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.MeshData.Dispose">
            <summary>
            Releases resources allocated by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.MeshData.MeshToObject">
            <summary>
            Object space transform of the mesh.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.MeshData.InfiniteBounds">
            <summary>
            Indicates the object bounding area spans the entire world and
            the object is always visible.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.MeshData.PrimitiveCount">
            <summary>
            Number of primitives in the mesh geometry.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.MeshData.VertexCount">
            <summary>
            Number of vertices in the vertex buffer range required to draw the mesh.
            For instance, a quad rendering vertices at indices (2, 5, 6, 9) requires
            a vertex buffer range of 8 vertices (vertices 2 – 9 inclusive).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.MeshData.VertexStride">
            <summary>
            Size in bytes of the elements in the vertex buffer.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.MeshData.ObjectSpaceBoundingSphere">
            <summary>
            Object-space bounding area that completely contains the mesh.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.MeshData.VertexBuffer">
            <summary>
            VertexBuffer that contains the mesh geometry.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.MeshData.IndexBuffer">
            <summary>
            IndexBuffer that contains the mesh geometry.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.MeshData.Effect">
            <summary>
            Effect applied to the mesh during rendering.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.RenderableMeshCollection">
            <summary>
            Represents a collection of RenderableMesh objects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.RenderableMeshCollection.#ctor(System.Collections.Generic.IList{SynapseGaming.LightingSystem.Rendering.RenderableMesh})">
            <summary>
            Creates a new RenderableMeshCollection instance.
            </summary>
            <param name="meshes">Source mesh list.</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.ISceneObject">
            <summary>
            Interface used by objects contained within the IObjectManager
            manager service.
            
            In many cases these object are renderable, however non-renderable
            objects can also use this interface and be stored within the
            IObjectManager manager service.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.ModelAsset">
            <summary>
            Provides direct access to the repository name, file name, and model
            the scene object was created from. Only valid for serialized scene objects
            created via the SunBurn editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.StaticLightingType">
            <summary>
            Determines if an object uses light mapping, approximate lighting, or no lighting
            to receive illumination from BakedDown light sources.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.CanLightMap">
            <summary>
            Indicates the object's meshes are capable of using light maps.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.Valid">
            <summary>
            Indicates the object is rendering without errors.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.RenderingErrors">
            <summary>
            Contains any errors that occurred during rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.CastShadows">
            <summary>
            Determines if the object casts shadows based on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.Visible">
            <summary>
            Determines if the object is visible based on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.VisibleInEditor">
            <summary>
            Determines if the object is visible in the editor based on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.Visibility">
            <summary>
            Defines how the object is rendered.
            
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders the object and casts shadows from it).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.SkinBones">
            <summary>
            Array of bone transforms used to form the skeleton's current pose. The array
            index of a bone matrix should match the vertex buffer bone index.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.ISceneObject.RenderableMeshes">
            <summary>
            Collection of the object's internal mesh parts.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.SceneObject">
            <summary>
            Scene object implementation that uses XNA Models, SunBurn MeshData,
            and raw vertex / index buffers as a source.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor">
            <summary>
            Default constructor for derived classes that implement their own mesh creation.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SceneObject instance.
            </summary>
            <param name="name">Custom name for the object.</param>
            <param name="infinitebounds">Indicates the object bounding area spans the entire world and
            the object is always visible.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(SynapseGaming.LightingSystem.Rendering.MeshData)">
            <summary>
            Creates a new SceneObject from mesh data.
            </summary>
            <param name="meshdata"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(SynapseGaming.LightingSystem.Rendering.MeshData,System.String)">
            <summary>
            Creates a new SceneObject from mesh data.
            </summary>
            <param name="meshdata"></param>
            <param name="name">Custom name for the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Graphics.VertexBuffer,Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new SceneObject from a user defined vertex buffer.
            </summary>
            <param name="effect">Effect applied to the mesh during rendering.</param>
            <param name="meshboundingsphere">Smallest mesh space bounding sphere that
            completely encloses the object.</param>
            <param name="meshboundingbox">Smallest mesh space bounding box that
            completely encloses the object.</param>
            <param name="vertexbuffer">VertexBuffer that contains the mesh geometry.</param>
            <param name="vertexstart">Index into the vertex buffer that mesh geometry begins.</param>
            <param name="primitivetype">Primitive format the mesh geometry is stored in.</param>
            <param name="primitivecount">Number of primitives in the mesh geometry.</param>
            <param name="vertexstreamoffset">Offset in bytes from the beginning of the vertex
            buffer to start reading data.</param>
            <param name="objectspace">Mesh object-space matrix.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Graphics.VertexBuffer,Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new SceneObject from a user defined vertex buffer.
            </summary>
            <param name="name">Custom name for the object.</param>
            <param name="infinitebounds">Determines if the object spans an infinite bounding volume.</param>
            <param name="effect">Effect applied to the mesh during rendering.</param>
            <param name="meshboundingsphere">Smallest mesh space bounding sphere that
            completely encloses the object.</param>
            <param name="meshboundingbox">Smallest mesh space bounding box that
            completely encloses the object.</param>
            <param name="vertexbuffer">VertexBuffer that contains the mesh geometry.</param>
            <param name="vertexstart">Index into the vertex buffer that mesh geometry begins.</param>
            <param name="primitivetype">Primitive format the mesh geometry is stored in.</param>
            <param name="primitivecount">Number of primitives in the mesh geometry.</param>
            <param name="vertexstreamoffset">Offset in bytes from the beginning of the vertex
            buffer to start reading data.</param>
            <param name="objectspace">Mesh object-space matrix.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Graphics.IndexBuffer,Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32,Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new SceneObject from a user defined vertex and index buffer.
            </summary>
            <param name="effect">Effect applied to the mesh during rendering.</param>
            <param name="meshboundingsphere">Smallest mesh space bounding sphere that
            completely encloses the object.</param>
            <param name="meshboundingbox">Smallest mesh space bounding box that
            completely encloses the object.</param>
            <param name="indexbuffer">IndexBuffer that contains the mesh geometry.</param>
            <param name="vertexbuffer">VertexBuffer that contains the mesh geometry.</param>
            <param name="indexstart">Index into the index buffer that mesh geometry begins.</param>
            <param name="primitivetype">Primitive format the mesh geometry is stored in.</param>
            <param name="primitivecount">Number of primitives in the mesh geometry.</param>
            <param name="vertexbase">Offset added to each index in the index buffer during rendering.</param>
            <param name="vertexcount">Number of vertices in the vertex buffer range required to
            draw the mesh.  For instance, a quad rendering vertices at indices (2, 5, 6, 9) requires
            a vertex buffer range of 8 vertices (vertices 2 – 9 inclusive).</param>
            <param name="vertexstreamoffset">Offset in bytes from the beginning of the vertex
            buffer to start reading data.</param>
            <param name="objectspace">Mesh object-space matrix.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(System.String,System.Boolean,Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Graphics.IndexBuffer,Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32,Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new SceneObject from a user defined vertex and index buffer.
            </summary>
            <param name="name">Custom name for the object.</param>
            <param name="infinitebounds">Determines if the object spans an infinite bounding volume.</param>
            <param name="effect">Effect applied to the mesh during rendering.</param>
            <param name="meshboundingsphere">Smallest mesh space bounding sphere that
            completely encloses the object.</param>
            <param name="meshboundingbox">Smallest mesh space bounding box that
            completely encloses the object.</param>
            <param name="indexbuffer">IndexBuffer that contains the mesh geometry.</param>
            <param name="vertexbuffer">VertexBuffer that contains the mesh geometry.</param>
            <param name="indexstart">Index into the index buffer that mesh geometry begins.</param>
            <param name="primitivetype">Primitive format the mesh geometry is stored in.</param>
            <param name="primitivecount">Number of primitives in the mesh geometry.</param>
            <param name="vertexbase">Offset added to each index in the index buffer during rendering.</param>
            <param name="vertexcount">Number of vertices in the vertex buffer range required to
            draw the mesh.  For instance, a quad rendering vertices at indices (2, 5, 6, 9) requires
            a vertex buffer range of 8 vertices (vertices 2 – 9 inclusive).</param>
            <param name="vertexstreamoffset">Offset in bytes from the beginning of the vertex
            buffer to start reading data.</param>
            <param name="objectspace">Mesh object-space matrix.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Creates a new SceneObject constructing RenderableMeshes
            from all ModelMeshes within the provided Model.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(Microsoft.Xna.Framework.Graphics.ModelMesh)">
            <summary>
            Creates a new SceneObject constructing RenderableMeshes
            from the provided ModelMesh.
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(Microsoft.Xna.Framework.Graphics.Model,System.String)">
            <summary>
            Creates a new SceneObject constructing RenderableMeshes
            from all ModelMeshes within the provided Model.
            </summary>
            <param name="model"></param>
            <param name="name">Custom name for the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(Microsoft.Xna.Framework.Graphics.ModelMesh,System.String)">
            <summary>
            Creates a new SceneObject constructing RenderableMeshes
            from the provided ModelMesh.
            </summary>
            <param name="mesh"></param>
            <param name="name">Custom name for the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect,System.String)">
            <summary>
            Creates a new SceneObject constructing RenderableMeshes
            from all ModelMeshes within the provided Model.
            </summary>
            <param name="model"></param>
            <param name="overrideeffect">User defined effect used to render the object.</param>
            <param name="name">Custom name for the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.#ctor(Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.Effect,System.String)">
            <summary>
            Creates a new SceneObject constructing RenderableMeshes
            from the provided ModelMesh.
            </summary>
            <param name="mesh"></param>
            <param name="overrideeffect">User defined effect used to render the object.</param>
            <param name="name">Custom name for the object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.Init(System.String,System.Boolean)">
            <summary>
            Initializes the object to default values.
            </summary>
            <param name="name">Custom name for the object.</param>
            <param name="infinitebounds">Indicates the object bounding area spans the entire world and
            the object is always visible.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.Clone">
            <summary>
            Deep clones the object including any contained sub-objects and components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.OnCollisionReact(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Collision.CollisionPoint,System.Boolean@)">
            <summary>
            Used to trigger the CollisionReactEvent event when two objects collide.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="collidee">The object hit by the moving object.</param>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
            <param name="collisionhandled">Determines if the collision was handled by a prior event hander.
            If this value is true do NOT process any collision reaction code. If the event handler processes
            collision reaction code set this value to true to avoid another handler or SunBurn's built-in
            reaction code from processing.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.OnCollisionTrigger(SynapseGaming.LightingSystem.Core.IMovableObject,SynapseGaming.LightingSystem.Core.IMovableObject)">
            <summary>
            Used to trigger the CollisionTriggerEvent event when an object passes through or overlaps a trigger.
            </summary>
            <param name="collider">The moving object.</param>
            <param name="trigger">The trigger hit by the moving object.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.React(SynapseGaming.LightingSystem.Collision.CollisionPoint)">
            <summary>
            Calculates and applies the reaction force between the
            object and the collision surface contained in the CollisionPoint.
            </summary>
            <param name="worldcollisionpoint">Contains information about the closest collision point to the collider.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.Add(SynapseGaming.LightingSystem.Rendering.RenderableMesh)">
            <summary>
            Adds a mesh to this object. Automatically recalculates the object bounds.
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.Remove(SynapseGaming.LightingSystem.Rendering.RenderableMesh)">
            <summary>
            Removes a mesh from this object. Automatically recalculates the object bounds.
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.Clear">
            <summary>
            Removes all meshes from this object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.RebuildMeshInfo">
            <summary>
            Called when the mesh list changes.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.CalculateObjectBounds(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@)">
            <summary>
            Calculates the object bounds.
            </summary>
            <param name="objectboundingbox">Object bounds to update.</param>
            <param name="objectboundingsphere">Object bounds to update.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.CalculateWorldBounds(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@,System.Boolean)">
            <summary>
            Updates the object world bounds based on the current world transform and object space bounds.
            
            NOTE: when implementing custom bounds ensure the hull type (box or sphere) is completely
            enclosed by the other bounds type. For instance if the hull type is Box then the bounding
            sphere should completely contain the bounding box, and vice-versa. This is critical for
            correct collision.
            </summary>
            <param name="worldboundingbox">World bounds to update.</param>
            <param name="worldboundingsphere">World bounds to update.</param>
            <param name="alreadymoved">Indicates the object move id is already updated.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.AddModelMesh(Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Converts a ModelMesh into RenderableMeshes and adds them
            to this object. Automatically recalculates the object bounds.
            </summary>
            <param name="mesh"></param>
            <param name="overrideeffect">User defined effect used to render
            the object. If null the effects contained in the ModelMesh are used.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.UpdateWorldAndWorldToObject(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Updates the object world space and inverse world space transforms.
            Override to perform custom code when the world transform changes.
            </summary>
            <param name="world">World space transform.</param>
            <param name="worldtoobj">Inverse world space transform.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.CreateMeshBasedObjectsFromModel(Microsoft.Xna.Framework.Graphics.Model,System.Collections.Generic.IList{SynapseGaming.LightingSystem.Rendering.SceneObject})">
            <summary>
            Helper method that creates a new SceneObject for each
            ModelMesh in the provided Model.
            </summary>
            <param name="model">Source Model object.</param>
            <param name="returnobjects">List used to store the created SceneObject objects.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.SetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes object data from the provided SerializationInfo.
            </summary>
            <param name="info">Contains the serialized object data.</param>
            <param name="context"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SceneObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes object data to the provided SerializationInfo.
            </summary>
            <param name="info">SerializationInfo to store the serialized data.</param>
            <param name="context"></param>
        </member>
        <member name="E:SynapseGaming.LightingSystem.Rendering.SceneObject.CollisionReactEvent">
            <summary>
            Event used to detect when the object collides with another object, or to
            override the default reaction behavior between objects.
            </summary>
        </member>
        <member name="E:SynapseGaming.LightingSystem.Rendering.SceneObject.CollisionTriggerEvent">
            <summary>
            Event used to detect when another object collides with this object, but only
            when this object's CollisionType is set to Trigger.
            
            The event handler can then apply custom trigger code like damage, apply force, and more.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.ModelAsset">
            <summary>
            Provides direct access to the repository name, file name, and model
            the scene object was created from. Only valid for serialized scene objects
            created via the SunBurn editor.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.AffectedByGravity">
            <summary>
            Determines if gravity will cause the object to fall. For an object to be affected
            by gravity its UpdateType must be Automatic and CollisionType must be Collide.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.CollisionType">
            <summary>
            Determines how an object interacts with the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.CollisionMove">
            <summary>
            Move helper used by this object to determine its momentum, next location, and sweep volume.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.DefaultCollisionMaterial">
            <summary>
            Default material used when collision surface does not implement material info.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.Mass">
            <summary>
            Mass of the object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.StaticLightingType">
            <summary>
            Determines if an object uses light mapping, approximate lighting, or no lighting
            to receive illumination from BakedDown light sources.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.CanLightMap">
            <summary>
            Indicates the object's meshes are capable of using light maps.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.Valid">
            <summary>
            Indicates the object is rendering without errors.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.RenderingErrors">
            <summary>
            Contains any errors that occurred during rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.SkinBones">
            <summary>
            Array of bone transforms used to form the skeleton's current pose. The array
            index of a bone matrix should match the vertex buffer bone index.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.Visibility">
            <summary>
            Defines how the object is rendered.
            
            This enumeration is a Flag, which allows combining multiple values using the
            Logical OR operator (example: "ObjectVisibility.Rendered | ObjectVisibility.CastShadows",
            both renders the object and casts shadows from it).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.CastShadows">
            <summary>
            Determines if the object casts shadows based on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.Visible">
            <summary>
            Determines if the object is visible based on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.VisibleInEditor">
            <summary>
            Determines if the object is visible in the editor based on the current ObjectVisibility options.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SceneObject.RenderableMeshes">
            <summary>
            Collection of the object's internal mesh parts.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.SplashScreen">
            <summary>
            Displays the SunBurn splash screen. Used when the XNA Game object is not available, such as WinForm applications.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SplashScreen.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new SplashScreen instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SplashScreen.Unload">
            <summary>
            Called when graphics resources need to be unloaded.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SplashScreen.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called periodically to allow users to click out of the splash screen.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SplashScreen.Render(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Renders the SunBurn splash screen (require by the SunBurn license).
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SplashScreen.DisplayComplete">
            <summary>
            Used to determine when the SunBurn splash screen is finished displaying
            and it's safe to begin game rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SplashScreen.UserCancelled">
            <summary>
            Determines if the splash screen was canceled early by the user.
            This can be used to skip later splash screens.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SplashScreen.ShowDuringDevelopment">
            <summary>
            Used to enable or disable the SunBurn splash screen during development. Enabling the splash
            screen helps when making sure the screen displays properly in released projects.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.SplashScreenGameComponent">
            <summary>
            Displays the SunBurn splash screen.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SplashScreenGameComponent.#ctor(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new SplashScreenGameComponent instance.
            </summary>
            <param name="game"></param>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SplashScreenGameComponent.OnDrawOrderChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the DrawOrder property changes. Raises the DrawOrderChanged event.
            </summary>
            <param name="sender">The DrawableGameComponent.</param>
            <param name="args">Arguments to the DrawOrderChanged event.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SplashScreenGameComponent.UnloadContent">
            <summary>
            Called when graphics resources need to be unloaded. Override this method to
            unload any component-specific graphics resources.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SplashScreenGameComponent.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called when the GameComponent needs to be updated. Override this method with
            component-specific update code.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SplashScreenGameComponent.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called when the DrawableGameComponent needs to be drawn. Override this method
            with component-specific drawing code.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SplashScreenGameComponent.DisplayComplete">
            <summary>
            Used to determine when the SunBurn splash screen is finished displaying
            and it's safe to begin game rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SplashScreenGameComponent.UserCancelled">
            <summary>
            Determines if the splash screen was canceled early by the user.
            This can be used to skip later splash screens.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SplashScreenGameComponent.ShowDuringDevelopment">
            <summary>
            Used to enable or disable the SunBurn splash screen during development. Enabling the splash
            screen helps when making sure the screen displays properly in released projects.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Rendering.VertexSprite.VertexDeclaration">
            <summary>
            Vertex declaration, which defines per-vertex data.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.SpriteContainer">
            <summary>
            Specialized 2D scene object used to store and render sprites using
            SunBurn's forward and deferred rendering systems and effects.
            
            Create an instance using SpriteManager.CreateSpriteContainer().
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Begin">
            <summary>
            Prepares the container for new sprites, also clears all existing sprites from the container.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Add(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a sprite to this container. Can only be used between calls to Begin() and End().
            </summary>
            <param name="effect">Effect applied to the sprite during rendering.</param>
            <param name="size">Size of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="position">Position of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="layerdepth">Controls both the z-sorting and the height between
            sprites, which is critical for proper shadowing. If shadows are too
            disconnected form the caster try reducing the depth between the shadow
            caster and receiver.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Add(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Adds a sprite to this container. Can only be used between calls to Begin() and End().
            </summary>
            <param name="effect">Effect applied to the sprite during rendering.</param>
            <param name="size">Size of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="position">Position of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="rotation">Rotation of the sprite in radians.</param>
            <param name="layerdepth">Controls both the z-sorting and the height between
            sprites, which is critical for proper shadowing. If shadows are too
            disconnected form the caster try reducing the depth between the shadow
            caster and receiver.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Add(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a sprite to this container. Can only be used between calls to Begin() and End().
            </summary>
            <param name="effect">Effect applied to the sprite during rendering.</param>
            <param name="size">Size of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="position">Position of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="rotation">Rotation of the sprite in radians.</param>
            <param name="origin">Indicates the sprite origin or pivot point (offset from
            the sprite center).</param>
            <param name="layerdepth">Controls both the z-sorting and the height between
            sprites, which is critical for proper shadowing. If shadows are too
            disconnected form the caster try reducing the depth between the shadow
            caster and receiver.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Add(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a sprite to this container. Can only be used between calls to Begin() and End().
            </summary>
            <param name="effect">Effect applied to the sprite during rendering.</param>
            <param name="size">Size of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="position">Position of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="uvsize">Indicates the number of times a material will tile
            across the sprite.</param>
            <param name="uvposition">Indicates the uv offset applied to a material
            on the sprite (in uv coordinates, where a single material tile ranges from 0.0f - 1.0f).</param>
            <param name="layerdepth">Controls both the z-sorting and the height between
            sprites, which is critical for proper shadowing. If shadows are too
            disconnected form the caster try reducing the depth between the shadow
            caster and receiver.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Add(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a sprite to this container. Can only be used between calls to Begin() and End().
            </summary>
            <param name="effect">Effect applied to the sprite during rendering.</param>
            <param name="size">Size of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="position">Position of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="rotation">Rotation of the sprite in radians.</param>
            <param name="uvsize">Indicates the number of times a material will tile
            across the sprite.</param>
            <param name="uvposition">Indicates the uv offset applied to a material
            on the sprite (in uv coordinates, where a single material tile ranges from 0.0f - 1.0f).</param>
            <param name="layerdepth">Controls both the z-sorting and the height between
            sprites, which is critical for proper shadowing. If shadows are too
            disconnected form the caster try reducing the depth between the shadow
            caster and receiver.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Add(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a sprite to this container. Can only be used between calls to Begin() and End().
            </summary>
            <param name="effect">Effect applied to the sprite during rendering.</param>
            <param name="size">Size of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="position">Position of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="rotation">Rotation of the sprite in radians.</param>
            <param name="origin">Indicates the sprite origin or pivot point (offset from
            the sprite center).</param>
            <param name="uvsize">Indicates the number of times a material will tile
            across the sprite.</param>
            <param name="uvposition">Indicates the uv offset applied to a material
            on the sprite (in uv coordinates, where a single material tile ranges from 0.0f - 1.0f).</param>
            <param name="layerdepth">Controls both the z-sorting and the height between
            sprites, which is critical for proper shadowing. If shadows are too
            disconnected form the caster try reducing the depth between the shadow
            caster and receiver.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Add(Microsoft.Xna.Framework.Graphics.Effect,System.Int32,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Adds a sprite to this container. Can only be used between calls to Begin() and End().
            </summary>
            <param name="effect">Effect applied to the sprite during rendering.</param>
            <param name="effecthashcode">Unique hashcode of the effect.</param>
            <param name="size">Size of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="position">Position of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="rotation">Rotation of the sprite in radians.</param>
            <param name="origin">Indicates the sprite origin or pivot point (offset from
            the sprite center).</param>
            <param name="uvsize">Indicates the number of times a material will tile
            across the sprite.</param>
            <param name="uvposition">Indicates the uv offset applied to a material
            on the sprite (in uv coordinates, where a single material tile ranges from 0.0f - 1.0f).</param>
            <param name="layerdepth">Controls both the z-sorting and the height between
            sprites, which is critical for proper shadowing. If shadows are too
            disconnected form the caster try reducing the depth between the shadow
            caster and receiver.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Add(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single)">
            <summary>
            Adds a sprite to this container. Can only be used between calls to Begin() and End().
            </summary>
            <param name="effect">Effect applied to the sprite during rendering.</param>
            <param name="size">Size of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="position">Position of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="rotation">Rotation of the sprite in radians.</param>
            <param name="origin">Indicates the sprite origin or pivot point (offset from
            the sprite center).</param>
            <param name="uvsize">Indicates the number of times a material will tile
            across the sprite.</param>
            <param name="uvposition">Indicates the uv offset applied to a material
            on the sprite (in uv coordinates, where a single material tile ranges from 0.0f - 1.0f).</param>
            <param name="layerdepth">Controls both the z-sorting and the height between
            sprites, which is critical for proper shadowing. If shadows are too
            disconnected form the caster try reducing the depth between the shadow
            caster and receiver.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.Add(Microsoft.Xna.Framework.Graphics.Effect,System.Int32,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single)">
            <summary>
            Adds a sprite to this container. Can only be used between calls to Begin() and End().
            </summary>
            <param name="effect">Effect applied to the sprite during rendering.</param>
            <param name="effecthashcode">Unique hashcode of the effect.</param>
            <param name="size">Size of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="position">Position of the sprite (in world-space if the container
            uses an identity world transform, otherwise in object-space)</param>
            <param name="rotation">Rotation of the sprite in radians.</param>
            <param name="origin">Indicates the sprite origin or pivot point (offset from
            the sprite center).</param>
            <param name="uvsize">Indicates the number of times a material will tile
            across the sprite.</param>
            <param name="uvposition">Indicates the uv offset applied to a material
            on the sprite (in uv coordinates, where a single material tile ranges from 0.0f - 1.0f).</param>
            <param name="layerdepth">Controls both the z-sorting and the height between
            sprites, which is critical for proper shadowing. If shadows are too
            disconnected form the caster try reducing the depth between the shadow
            caster and receiver.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteContainer.End">
            <summary>
            Finishes all sprite operations until the next call to Begin().
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Rendering.SpriteManager">
            <summary>
            Acts as a resource manager for arrays and buffers used during sprite creation.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new SpriteManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteManager.CreateSpriteContainer">
            <summary>
            Creates a new SpriteContainer instance for storing and rendering 2D sprites.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteManager.Clear">
            <summary>
            Removes all objects from the container. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Rendering.SpriteManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SpriteManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Rendering.SpriteManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Serialization.SerializationInclusionModelAttribute">
            <summary>
            Provides an inclusion based model for member serialization. Please note: if the class
            implements IFullSerializable in its hierarchy chain this attribute is ignored and the
            full serializable methods are used instead.
            
            By default .Net uses an exclusion based serialization model, which serializes ALL members
            and requires specifically excluding those that should not be serialized.
            
            In contrast this attribute enables an inclusion based model to serialize members of the
            class. This means by default NO members are serialized and members can be specifically
            included by adding the [SerializeMember] attribute to them.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Serialization.SerializeMemberAttribute">
            <summary>
            Used to include a member in serialization when the inclusion based model is active on
            the containing class (see [SerializationInclusionModel]).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Serialization.SerializationHelper">
            <summary>
            Provides helper methods for serializing objects and hierarchies of objects to xml or file.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.SerializationHelper.SerializeFieldOrEnum``1(``0@,System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Serializes a field or enumeration. The type must include the [Serialize] attribute and
            if a custom class should ideally implement the IFullSerializable interface.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">Field or enumeration to serialize.</param>
            <param name="info">SerializationInfo object used to store the serialized name and data.</param>
            <param name="name">Name stored with the serialized data.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.SerializationHelper.DeserializeField``1(``0@,System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean)">
            <summary>
            Deserializes a field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">Variable used to store the deserialized data.</param>
            <param name="info">SerializationInfo object containing the serialized data.</param>
            <param name="name">Name used to retrieve the serialized data.</param>
            <param name="usedefault">Determines if a default value should be applied to the field when data cannot be deserialized.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.SerializationHelper.DeserializeField``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Deserializes a field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="info">SerializationInfo object containing the serialized data.</param>
            <param name="name">Name used to retrieve the serialized data.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.SerializationHelper.DeserializeEnum``1(``0@,System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean)">
            <summary>
            Deserializes an enumeration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">Variable used to store the deserialized data.</param>
            <param name="info">SerializationInfo object containing the serialized data.</param>
            <param name="name">Name used to retrieve the serialized data.</param>
            <param name="isflag">Determines if the enumeration type is a flag and can contain more than one value.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.SerializationHelper.DeserializeEnum``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Deserializes an enumeration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="info">SerializationInfo object containing the serialized data.</param>
            <param name="name">Name used to retrieve the serialized data.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.SerializationHelper.SaveToFile(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Serializes an object to file in xml format. The object type must include the [Serialize] attribute and
            if a custom class should ideally implement the IFullSerializable interface.
            </summary>
            <param name="filename">Name and path of the file to store the serialized data.</param>
            <param name="obj">Object to serialize.</param>
            <param name="createifmissing">Determines if the file should be created when missing.</param>
            <param name="forcesave">Determines if the file should be saved even if the contents have not changed.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.SerializationHelper.SaveToXml(System.Object)">
            <summary>
            Serializes an object to xml format. The object type must include the [Serialize] attribute and
            if a custom class should ideally implement the IFullSerializable interface.
            </summary>
            <param name="obj">Object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.SerializationHelper.LoadFromFile``1(System.String)">
            <summary>
            Deserializes an object from an xml file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename">Name and path of the file containing the serialized data.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.SerializationHelper.LoadFromXml``1(System.String)">
            <summary>
            Deserializes an object from xml.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.AssemblyDictionary.GetAllTypes``1(System.Collections.Generic.List{System.Type},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds all types that are or implement T.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.DeserializerTypeDictionary.GetAndAdd(System.String,System.String,System.String)">
            <summary>
            Gets a type from the provided info and adds it to the
            dictionary using the fully qualified name.
            </summary>
            <param name="fullname"></param>
            <param name="assemblyname"></param>
            <param name="fullyqualifiedname"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.DeserializerTypeDictionary.Add(System.String,System.Type)">
            <summary>
            Adds a type to the dictionary using the provided name as the key.
            
            This is used to provide a lookup between the xml short name and the type.
            </summary>
            <param name="typename"></param>
            <param name="type"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Serialization.DeserializerTypeDictionary.GetInformation(System.String,System.Type@,System.Reflection.MemberInfo[]@)">
            <summary>
            Get information by name.
            </summary>
            <param name="typename"></param>
            <param name="type"></param>
            <param name="members"></param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.ShadowMapSurface">
            <summary>
            Class that represents one surface in a shadow map, which can be
            used for multi-part rendering and level-of-detail. The surface
            contains its own section within a render target.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowMapSurface.#ctor">
            <summary>
            Creates a new ShadowMapSurface instance.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapSurface.WorldToSurfaceView">
            <summary>
            View transform used to project the scene into the
            surface and the surface onto the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapSurface.Projection">
            <summary>
            Projection transform used to project the scene into
            the surface and the surface onto the scene.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapSurface.Frustum">
            <summary>
            The surface projection frustum.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapSurface.Viewport">
            <summary>
            Viewport used when rendering to the surface render target location.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapSurface.LevelOfDetail">
            <summary>
            Level-of-detail applied to the surface.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapSurface.RenderTargetLocation">
            <summary>
            The surface location in the render target.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapSurface.Enabled">
            <summary>
            Determines if the shadow map contents should be generated for this face.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility">
            <summary>
            Interface that provides support for determining shadow visibility and level-of-detail information.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility.ShadowLODRangeHints">
            <summary>
            Determines how far from the camera a directional shadow level-of-detail (lod) will
            stretch before transitioning to the next lod.
            
            Index 0 controls the highest level of detail, 1 controls the next highest, and so on.
            
            The range is normalized relative to the environment ShadowFadeEndDistance,
            for instance a value of 1.0 transitions at the ShadowFadeEndDistance
            whereas a value of 0.25 transitions at (ShadowFadeEndDistance * 0.25).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility.ShadowLODEnabled">
            <summary>
            Determines if a directional shadow level-of-detail (lod) is enabled and will have its
            shadow map filled with an image of the scene.  Disabling unneeded lods reduces
            the number of rendered objects and draw calls.
            
            Index 0 controls the highest level of detail, 1 controls the next highest, and so on.
            
            Unlike point light shadows, directional light shadows render all of their lods
            every frame.  Each lod represents a different area in front of the camera with
            the highest lod closest to the viewer.  For some games (such as top-down
            perspective games) only a single lod is necessary and the rest can be disabled.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap">
            <summary>
            Shadow map class that implements cascading level-of-detail
            directional shadows. Used for directional lights.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.#ctor">
            <summary>
            Creates a new ShadowDirectionalMap instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.Build(Microsoft.Xna.Framework.Graphics.GraphicsDevice,SynapseGaming.LightingSystem.Core.ISceneState,SynapseGaming.LightingSystem.Shadows.ShadowGroup,SynapseGaming.LightingSystem.Shadows.IShadowMapVisibility,System.Single)">
            <summary>
            Builds the shadow map information based on the provided scene state and shadow
            group, visibility, and quality.
            </summary>
            <param name="device"></param>
            <param name="scenestate"></param>
            <param name="shadowgroup">Shadow group used as the source for the shadow map.</param>
            <param name="shadowvisibility"></param>
            <param name="shadowquality">Shadow quality from 1.0 (highest) to 0.0 (lowest).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.SetSurfaceRenderTargetLocation(System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets the location in the shadow map render target the surface renders to.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="location">Texel region used by the shadow map surface.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.IsSurfaceVisible(System.Int32,Microsoft.Xna.Framework.BoundingFrustum)">
            <summary>
            Determines if the shadow map surface is visible to the provided view frustum.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="viewfrustum"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.BeginRendering(Microsoft.Xna.Framework.Graphics.Texture,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map for rendering shadows to the scene.
            </summary>
            <param name="shadowmap"></param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.EndRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.BeginSurfaceRendering(System.Int32)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.BeginSurfaceRendering(System.Int32,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Sets up the shadow map surface for generating the shadow map depth buffer.
            </summary>
            <param name="surface">Shadow map surface index.</param>
            <param name="shadoweffect">Custom shadow effect used in rendering.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.EndSurfaceRendering">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.Surfaces">
            <summary>
            Array of the level-of-detail surfaces.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowDirectionalMap.CustomRenderTarget">
            <summary>
            Unused, this object supports render targets from the ShadowMapCache.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.IShadowMapManager">
            <summary>
            Interface that provides access to the scene's shadow map manager. The shadow map manager
            provides methods for creating and caching scene shadow maps.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.IShadowMapManager.BuildShadows(System.Collections.Generic.List{SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup},System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},System.Boolean)">
            <summary>
            Organizes the provided lights into shadow and render target groups.
            </summary>
            <param name="rendertargetgroups">Returned render target groups.</param>
            <param name="lights">Lights to organize.</param>
            <param name="usedefaultgrouping">Determines if ungrouped lights should be placed in a
            single default group (recommended: true for deferred rendering and false for forward).</param>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager">
            <summary>
            Base class that provides shadow map management.  Used by the forward rendering
            ShadowMapManager and deferred rendering DeferredShadowMapManager classes.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.BaseShadowManager">
            <summary>
            Provides base scene shadow management support.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new BaseShadowManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up frame information necessary for scene shadowing.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowManager.EndFrameRendering">
            <summary>
            Cleans up frame information.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowManager.BuildShadowGroups(System.Collections.Generic.List{SynapseGaming.LightingSystem.Shadows.ShadowGroup},System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},System.Boolean)">
            <summary>
            Builds a list of shadow groups based on the provided light list.  Shadow
            groups contain a list of all lights that share a common shadow source.
            </summary>
            <param name="shadowgroups">Destination shadow group list.</param>
            <param name="lights">Source light list.</param>
            <param name="usedefaultgrouping">Determines if ungrouped lights should be placed in a
            single default group (recommended: true for deferred rendering and false for forward).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowManager.Clear">
            <summary>
            Removes resources managed by this object. Commonly used while clearing the scene.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowManager.GraphicsDeviceManager">
            <summary>
            The current GraphicsDeviceManager used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowManager.SceneState">
            <summary>
            The current SceneState used by this object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.CreateDirectionalShadowMap(SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Creates a new or cached shadow map object for this light type.
            </summary>
            <param name="shadowsource">Shadow source which uses the newly created or cached shadow map object.
            Provides information about how the shadow is used, such as location and the type of objects rendered
            to the shadow map.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.CreatePointShadowMap(SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Creates a new or cached shadow map object for this light type.
            </summary>
            <param name="shadowsource">Shadow source which uses the newly created or cached shadow map object.
            Provides information about how the shadow is used, such as location and the type of objects rendered
            to the shadow map.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.CreateSpotShadowMap(SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Creates a new or cached shadow map object for this light type.
            </summary>
            <param name="shadowsource">Shadow source which uses the newly created or cached shadow map object.
            Provides information about how the shadow is used, such as location and the type of objects rendered
            to the shadow map.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new BaseShadowMapManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="pagesize">Size in pixels of each render target (page) in the cache.
            For a size of 1024 the actual page dimensions are 1024x1024. Small sizes can reduce
            performance by fragmenting the shadow maps, and reduce shadow quality by lowering
            the maximum resolution of each shadow map section.</param>
            <param name="maxmemoryusage">Maximum amount of memory the cache is allowed to consume.
            This is an approximate value and the cache may use more memory in certain instances.</param>
            <param name="preferhalffloat">True when smaller half-float format render targets are
            preferred. These formats consume less memory and generally perform better, but have
            lower accuracy on directional lights.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Shadows.ShadowMapCache)">
            <summary>
            Creates a new BaseShadowMapManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="shadowmapcache"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new BaseShadowMapManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.ApplyPreferences(SynapseGaming.LightingSystem.Core.ILightingSystemPreferences)">
            <summary>
            Use to apply user quality and performance preferences to the resources managed by this object.
            </summary>
            <param name="preferences"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.BuildShadows(System.Collections.Generic.List{SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup},System.Collections.Generic.List{SynapseGaming.LightingSystem.Lights.BaseLight},System.Boolean)">
            <summary>
            Organizes the provided lights into shadow and render target groups.
            </summary>
            <param name="rendertargetgroups">Returned render target groups.</param>
            <param name="lights">Lights to organize.</param>
            <param name="usedefaultgrouping">Determines if ungrouped lights should be placed in a
            single default group (recommended: true for deferred rendering and false for forward).</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.BeginFrameRendering(SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Sets up frame information necessary for scene shadowing.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.EndFrameRendering">
            <summary>
            Cleans up frame information including removing all reserved shadow maps.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.Clear">
            <summary>
            Cleans up scene information.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.Unload">
            <summary>
            Disposes any graphics resource used internally by this object, and removes
            scene resources managed by this object. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.ManagerType">
            <summary>
            Gets the manager specific Type used as a unique key for storing and
            requesting the manager from the IManagerServiceProvider.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.ManagerProcessOrder">
            <summary>
            Sets the order this manager is processed relative to other managers
            in the IManagerServiceProvider. Managers with lower processing order
            values are processed first.
            
            In the case of BeginFrameRendering and EndFrameRendering, BeginFrameRendering
            is processed in the normal order (lowest order value to highest), however
            EndFrameRendering is processed in reverse order (highest to lowest) to ensure
            the first manager begun is the last one ended (FILO).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.ShadowLODRangeHints">
            <summary>
            Determines how far from the camera a directional shadow level-of-detail (lod) will
            stretch before transitioning to the next lod.
            
            Index 0 controls the highest level of detail, 1 controls the next highest, and so on.
            
            The range is normalized relative to the environment ShadowFadeEndDistance,
            for instance a value of 1.0 transitions at the ShadowFadeEndDistance
            whereas a value of 0.25 transitions at (ShadowFadeEndDistance * 0.25).
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.ShadowLODEnabled">
            <summary>
            Determines if a directional shadow level-of-detail (lod) is enabled and will have its
            shadow map filled with an image of the scene.  Disabling unneeded lods reduces
            the number of rendered objects and draw calls.
            
            Index 0 controls the highest level of detail, 1 controls the next highest, and so on.
            
            Unlike point light shadows, directional light shadows render all of their lods
            every frame.  Each lod represents a different area in front of the camera with
            the highest lod closest to the viewer.  For some games (such as top-down
            perspective games) only a single lod is necessary and the rest can be disabled.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.PreferHalfFloatTextureFormat">
            <summary>
            True when smaller half-float format render targets are preferred. These
            formats consume less memory and generally perform better, but have lower
            accuracy on directional lights.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.MaxMemoryUsage">
            <summary>
            Maximum amount of memory the shadow map cache is allowed to consume. This is an
            approximate value and the cache may use more memory in certain instances.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.BaseShadowMapManager.PageSize">
            <summary>
            Size in pixels of each render target (page) in the cache. For a size of 1024
            the actual page dimensions are 1024x1024. Small sizes can reduce performance by
            fragmenting the shadow maps, and reduce shadow quality by lowering the maximum
            resolution of each shadow map section.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.Forward.ShadowDirectionalMap">
            <summary>
            Shadow map class that implements cascading level-of-detail
            directional shadows. Used for directional lights.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowDirectionalMap.GetEffectType">
            <summary>
            Gets the effect type that performs rendering specific to the shadow
            mapping implementation used by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowDirectionalMap.CreateEffect">
            <summary>
            Creates a new effect that performs rendering specific to the shadow
            mapping implementation used by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.Forward.ShadowMapManager">
            <summary>
            Manages scene shadow maps and provides methods for building and organizing
            relationships between lights and shadows. Uses a render target cache to
            minimize memory usage.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowMapManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new ShadowMapManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="pagesize">Size in pixels of each render target (page) in the cache.
            For a size of 1024 the actual page dimensions are 1024x1024. Small sizes can reduce
            performance by fragmenting the shadow maps, and reduce shadow quality by lowering
            the maximum resolution of each shadow map section.</param>
            <param name="maxmemoryusage">Maximum amount of memory the cache is allowed to consume.
            This is an approximate value and the cache may use more memory in certain instances.</param>
            <param name="preferhalffloat">True when smaller half-float format render targets are
            preferred. These formats consume less memory and generally perform better, but have
            lower accuracy on directional lights.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowMapManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,SynapseGaming.LightingSystem.Shadows.ShadowMapCache)">
            <summary>
            Creates a new ShadowMapManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="shadowmapcache"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowMapManager.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService)">
            <summary>
            Creates a new ShadowMapManager instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowMapManager.CreateDirectionalShadowMap(SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Creates a new or cached shadow map object for this light type.
            </summary>
            <param name="shadowsource">Shadow source which uses the newly created or cached shadow map object.
            Provides information about how the shadow is used, such as location and the type of objects rendered
            to the shadow map.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowMapManager.CreatePointShadowMap(SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Creates a new or cached shadow map object for this light type.
            </summary>
            <param name="shadowsource">Shadow source which uses the newly created or cached shadow map object.
            Provides information about how the shadow is used, such as location and the type of objects rendered
            to the shadow map.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowMapManager.CreateSpotShadowMap(SynapseGaming.LightingSystem.Shadows.IShadowSource)">
            <summary>
            Creates a new or cached shadow map object for this light type.
            </summary>
            <param name="shadowsource">Shadow source which uses the newly created or cached shadow map object.
            Provides information about how the shadow is used, such as location and the type of objects rendered
            to the shadow map.</param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowMapManager.EndFrameRendering">
            <summary>
            Finalizes rendering and cleans up frame information including removing all frame lifespan objects.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.Forward.ShadowMapManager.Unload">
            <summary>
            Unloads all scene and device specific data.  Must be called
            when the device is reset (during Game.UnloadGraphicsContent()).
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.ShadowType">
            <summary>
            Determines the types of objects that cast shadows from a light source.
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Shadows.ShadowType.None">
            <summary>
            Disables shadow casting from the light (highest performance).
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Shadows.ShadowType.StaticObjects">
            <summary>
            Limits shadow casting to objects that are static (provides optimal
            balance of quality and performance).
            </summary>
        </member>
        <member name="F:SynapseGaming.LightingSystem.Shadows.ShadowType.AllObjects">
            <summary>
            Allows shadows from all shadow casting objects.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.ShadowGroup">
            <summary>
            Defines a group of lights that share the same shadow source.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowGroup.Build(SynapseGaming.LightingSystem.Shadows.IShadowSource,SynapseGaming.LightingSystem.Core.ISceneState)">
            <summary>
            Builds the shadow group information based on the shadow source.
            </summary>
            <param name="shadowsource"></param>
            <param name="scenestate">Scene state used to render the current view.</param>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowGroup.ShadowSource">
            <summary>
            Shared shadow source used to determine shadow casting information.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowGroup.Shadow">
            <summary>
            Shadow object used to store and render shadows.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowGroup.BoundingSphereCentered">
            <summary>
            Shadow bounding sphere originating at the shadow source center.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowGroup.BoundingBox">
            <summary>
            Shadow bounding box fitted to the shadow region. For some light types like
            spotlights this is not necessarily centered around the shadow source.  For
            others like directional lights this is only the shadow bounding area and does
            not relate to the illuminated area.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowGroup.Lights">
            <summary>
            List of lights that share the shadow source.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.ShadowMapCache">
            <summary>
            Class that manages render target sections used for shadow mapping.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowMapCache.#ctor(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new ShadowMapCache instance.
            </summary>
            <param name="graphicsdevicemanager"></param>
            <param name="pagesize">Size in pixels of each render target (page) in the cache.
            For a size of 1024 the actual page dimensions are 1024x1024. Small sizes can reduce
            performance by fragmenting the shadow maps, and reduce shadow quality by lowering
            the maximum resolution of each shadow map section.</param>
            <param name="maxmemoryusage">Maximum amount of memory the cache is allowed to consume.
            This is an approximate value and the cache may use more memory in certain instances.</param>
            <param name="preferhalffloat">True when smaller half-float format render targets are
            preferred. These formats consume less memory and generally perform better, but have
            lower accuracy on directional lights.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowMapCache.Resize(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes shadow maps and memory usage.
            </summary>
            <param name="pagesize">Size in pixels of each render target (page) in the cache.
            For a size of 1024 the actual page dimensions are 1024x1024. Small sizes can reduce
            performance by fragmenting the shadow maps, and reduce shadow quality by lowering
            the maximum resolution of each shadow map section.</param>
            <param name="maxmemoryusage">Maximum amount of memory the cache is allowed to consume.
            This is an approximate value and the cache may use more memory in certain instances.</param>
            <param name="preferhalffloat">True when smaller half-float format render targets are
            preferred. These formats consume less memory and generally perform better, but have
            lower accuracy on directional lights.</param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowMapCache.ReserveSections(System.Collections.Generic.List{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Attempts to reserve the requested shadow map sections in a
            single render target. If successful the render target is
            returned, otherwise null is returned.
            </summary>
            <param name="sectionsizes"></param>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowMapCache.ClearReserves">
            <summary>
            Clears all reserved shadow map sections, allowing the sections to be reused
            in future shadow maps section requests.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowMapCache.Unload">
            <summary>
            Disposes any graphics resources used internally by this object, and clears
            all reserved shadow map sections. Commonly used during Game.UnloadContent.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapCache.MaxMemoryUsage">
            <summary>
            Maximum amount of memory the cache is allowed to consume. This is an
            approximate value and the cache may use more memory in certain instances.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapCache.PreferHalfFloatTextureFormat">
            <summary>
            True when smaller half-float format render targets are preferred. These
            formats consume less memory and generally perform better, but have lower
            accuracy on directional lights.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowMapCache.PageSize">
            <summary>
            Size in pixels of each render target (page) in the cache. For a size of 1024
            the actual page dimensions are 1024x1024. Small sizes can reduce performance by
            fragmenting the shadow maps, and reduce shadow quality by lowering the maximum
            resolution of each shadow map section.
            </summary>
        </member>
        <member name="T:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup">
            <summary>
            Class that manages shadow groups sharing the same render target.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.#ctor">
            <summary>
            Creates a new ShadowRenderTargetGroup instance.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.HasShadows">
            <summary>
            Determines if the render target group uses shadows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.Build(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Builds the render target group information based on the
            provided render target and depth buffer.
            </summary>
            <param name="device"></param>
            <param name="shadowmaprendertarget"></param>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.Dispose">
            <summary>
            Releases resources allocated by this object.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.Begin">
            <summary>
            Sets up the render target group for generating the shadow maps.
            </summary>
        </member>
        <member name="M:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.End">
            <summary>
            Finalizes rendering.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.RenderTarget">
            <summary>
            The current RenderTarget used by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.Viewport">
            <summary>
            Viewport that encapsulates the entire render target.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.ShadowGroups">
            <summary>
            List of shadow groups managed by this object.
            </summary>
        </member>
        <member name="P:SynapseGaming.LightingSystem.Shadows.ShadowRenderTargetGroup.ContentsAreValid">
            <summary>
            Used to determine if the render target contents are valid or if the contents need
            to be re-rendered.
            
            The default SunBurn shadow mapping implementation renders shadow map contents
            every frame, however custom implementations can provide static shadow maps.
            
            Please note: if shadow maps are static and the contents are valid DO NOT call
            ShadowRenderTargetGroup Begin() and End().  On the Xbox this will invalidate the
            render target data.
            
            However skipping calls to Begin and End require calling
            ShadowRenderTargetGroup.UpdateRenderTargetTexture() to ensure the shadow texture
            is up to date.
            
            When using the built-in render managers this is all handled automatically.
            </summary>
        </member>
    </members>
</doc>
